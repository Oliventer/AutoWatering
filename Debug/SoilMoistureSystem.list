
SoilMoistureSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08005e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          000004f0  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000570  20000570  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016fce  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002859  00000000  00000000  0003707e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001528  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001420  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bc53  00000000  00000000  0003c220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000066aa  00000000  00000000  00047e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e51d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005ec8  00000000  00000000  0004e59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dc4 	.word	0x08005dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005dc4 	.word	0x08005dc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fe9d 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f823 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa1d 	bl	80006cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000292:	f000 f887 	bl	80003a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000296:	f000 f8f5 	bl	8000484 <MX_I2C1_Init>
  MX_SPI1_Init();
 800029a:	f000 f933 	bl	8000504 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800029e:	f000 f9c3 	bl	8000628 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80002a2:	f000 f9f1 	bl	8000688 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80002a6:	f000 f96b 	bl	8000580 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x4c>)
 80002ac:	f004 f87c 	bl	80043a8 <HAL_TIM_Base_Start_IT>
  struct State state = { Idle, 0 };
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <main+0x50>)
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  HAL_Delay(2000); // set correct value
 80002b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002bc:	f000 fee8 	bl	8001090 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  state.next(&state);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	463a      	mov	r2, r7
 80002c4:	4610      	mov	r0, r2
 80002c6:	4798      	blx	r3
 80002c8:	e7fa      	b.n	80002c0 <main+0x40>
 80002ca:	bf00      	nop
 80002cc:	200001cc 	.word	0x200001cc
 80002d0:	080008fd 	.word	0x080008fd

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09e      	sub	sp, #120	; 0x78
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f948 	bl	8005578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	223c      	movs	r2, #60	; 0x3c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 f93a 	bl	8005578 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000304:	2303      	movs	r3, #3
 8000306:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000308:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800030c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	2302      	movs	r3, #2
 800031c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000324:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000328:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fc4c 	bl	8002bcc <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800033a:	f000 fc39 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000342:	2302      	movs	r3, #2
 8000344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000358:	2101      	movs	r1, #1
 800035a:	4618      	mov	r0, r3
 800035c:	f003 fb3e 	bl	80039dc <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000366:	f000 fc23 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <SystemClock_Config+0xcc>)
 800036c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800037c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000380:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000382:	2300      	movs	r3, #0
 8000384:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	463b      	mov	r3, r7
 8000388:	4618      	mov	r0, r3
 800038a:	f003 fd5d 	bl	8003e48 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000394:	f000 fc0c 	bl	8000bb0 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3778      	adds	r7, #120	; 0x78
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	000210a1 	.word	0x000210a1

080003a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003aa:	f107 031c 	add.w	r3, r7, #28
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003c6:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003d4:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000402:	2201      	movs	r2, #1
 8000404:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800040e:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000410:	2204      	movs	r2, #4
 8000412:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000414:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000416:	2200      	movs	r2, #0
 8000418:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800041a:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000420:	4817      	ldr	r0, [pc, #92]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000422:	f000 fe57 	bl	80010d4 <HAL_ADC_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800042c:	f000 fbc0 	bl	8000bb0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000434:	f107 031c 	add.w	r3, r7, #28
 8000438:	4619      	mov	r1, r3
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <MX_ADC1_Init+0xdc>)
 800043c:	f001 fd34 	bl	8001ea8 <HAL_ADCEx_MultiModeConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000446:	f000 fbb3 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800044a:	2302      	movs	r3, #2
 800044c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800044e:	2301      	movs	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <MX_ADC1_Init+0xdc>)
 8000468:	f001 fa32 	bl	80018d0 <HAL_ADC_ConfigChannel>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000472:	f000 fb9d 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	; 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000f8 	.word	0x200000f8

08000484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_I2C1_Init+0x74>)
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <MX_I2C1_Init+0x78>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_I2C1_Init+0x74>)
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <MX_I2C1_Init+0x7c>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_I2C1_Init+0x74>)
 800049c:	2201      	movs	r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004be:	480e      	ldr	r0, [pc, #56]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004c0:	f002 f981 	bl	80027c6 <HAL_I2C_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ca:	f000 fb71 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004d2:	f002 fa06 	bl	80028e2 <HAL_I2CEx_ConfigAnalogFilter>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004dc:	f000 fb68 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004e0:	2100      	movs	r1, #0
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_I2C1_Init+0x74>)
 80004e4:	f002 fa48 	bl	8002978 <HAL_I2CEx_ConfigDigitalFilter>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 fb5f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	40005400 	.word	0x40005400
 8000500:	2000090e 	.word	0x2000090e

08000504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_SPI1_Init+0x74>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <MX_SPI1_Init+0x78>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_SPI1_Init+0x74>)
 8000510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_SPI1_Init+0x74>)
 800051e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000522:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_SPI1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_SPI1_Init+0x74>)
 8000532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000536:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_SPI1_Init+0x74>)
 800053a:	2208      	movs	r2, #8
 800053c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_SPI1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_SPI1_Init+0x74>)
 8000552:	2207      	movs	r2, #7
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_SPI1_Init+0x74>)
 800055e:	2208      	movs	r2, #8
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_SPI1_Init+0x74>)
 8000564:	f003 fe20 	bl	80041a8 <HAL_SPI_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 fb1f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000218 	.word	0x20000218
 800057c:	40013000 	.word	0x40013000

08000580 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <MX_TIM1_Init+0xa4>)
 80005a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005a6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005cc:	4814      	ldr	r0, [pc, #80]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005ce:	f003 fe94 	bl	80042fa <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 faea 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_TIM1_Init+0xa0>)
 80005ea:	f004 f866 	bl	80046ba <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80005f4:	f000 fadc 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_TIM1_Init+0xa0>)
 800060a:	f004 fa6b 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000614:	f000 facc 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200001cc 	.word	0x200001cc
 8000624:	40012c00 	.word	0x40012c00

08000628 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART1_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800066c:	f004 fad8 	bl	8004c20 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000676:	f000 fa9b 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000148 	.word	0x20000148
 8000684:	40013800 	.word	0x40013800

08000688 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <MX_USB_PCD_Init+0x40>)
 8000690:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 8000694:	2208      	movs	r2, #8
 8000696:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 800069a:	2202      	movs	r2, #2
 800069c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_USB_PCD_Init+0x3c>)
 80006b2:	f002 f9ad 	bl	8002a10 <HAL_PCD_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006bc:	f000 fa78 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000027c 	.word	0x2000027c
 80006c8:	40005c00 	.word	0x40005c00

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e2:	4a4e      	ldr	r2, [pc, #312]	; (800081c <MX_GPIO_Init+0x150>)
 80006e4:	4b4d      	ldr	r3, [pc, #308]	; (800081c <MX_GPIO_Init+0x150>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b4b      	ldr	r3, [pc, #300]	; (800081c <MX_GPIO_Init+0x150>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4a48      	ldr	r2, [pc, #288]	; (800081c <MX_GPIO_Init+0x150>)
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <MX_GPIO_Init+0x150>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b45      	ldr	r3, [pc, #276]	; (800081c <MX_GPIO_Init+0x150>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	4a42      	ldr	r2, [pc, #264]	; (800081c <MX_GPIO_Init+0x150>)
 8000714:	4b41      	ldr	r3, [pc, #260]	; (800081c <MX_GPIO_Init+0x150>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b3f      	ldr	r3, [pc, #252]	; (800081c <MX_GPIO_Init+0x150>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4a3c      	ldr	r2, [pc, #240]	; (800081c <MX_GPIO_Init+0x150>)
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <MX_GPIO_Init+0x150>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <MX_GPIO_Init+0x150>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <MX_GPIO_Init+0x150>)
 8000744:	4b35      	ldr	r3, [pc, #212]	; (800081c <MX_GPIO_Init+0x150>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <MX_GPIO_Init+0x150>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800075a:	2200      	movs	r2, #0
 800075c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000760:	482f      	ldr	r0, [pc, #188]	; (8000820 <MX_GPIO_Init+0x154>)
 8000762:	f001 ffdb 	bl	800271c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f240 4104 	movw	r1, #1028	; 0x404
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f001 ffd4 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000774:	2336      	movs	r3, #54	; 0x36
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0x158>)
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4826      	ldr	r0, [pc, #152]	; (8000820 <MX_GPIO_Init+0x154>)
 8000788:	f001 fe4e 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800078c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000790:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	481e      	ldr	r0, [pc, #120]	; (8000820 <MX_GPIO_Init+0x154>)
 80007a6:	f001 fe3f 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_GPIO_Init+0x15c>)
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 fe32 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c4:	2304      	movs	r3, #4
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007c8:	2311      	movs	r3, #17
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f001 fe23 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 fe13 	bl	8002428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2006      	movs	r0, #6
 8000808:	f001 fdd7 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080c:	2006      	movs	r0, #6
 800080e:	f001 fdf0 	bl	80023f2 <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	48001000 	.word	0x48001000
 8000824:	10120000 	.word	0x10120000
 8000828:	10110000 	.word	0x10110000

0800082c <Read_From_Sensor>:

/* USER CODE BEGIN 4 */
static int Read_From_Sensor(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
	uint16_t raw;
	int percentage;

	HAL_ADC_Start(&hadc1);
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <Read_From_Sensor+0x40>)
 8000834:	f000 fe2e 	bl	8001494 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <Read_From_Sensor+0x40>)
 800083e:	f000 ff3f 	bl	80016c0 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <Read_From_Sensor+0x40>)
 8000844:	f001 f836 	bl	80018b4 <HAL_ADC_GetValue>
 8000848:	4603      	mov	r3, r0
 800084a:	80fb      	strh	r3, [r7, #6]

	percentage = Map(raw, 1230, 3140, 0, 100);
 800084c:	88f8      	ldrh	r0, [r7, #6]
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	f640 4244 	movw	r2, #3140	; 0xc44
 8000858:	f240 41ce 	movw	r1, #1230	; 0x4ce
 800085c:	f000 f808 	bl	8000870 <Map>
 8000860:	6038      	str	r0, [r7, #0]

	return percentage;
 8000862:	683b      	ldr	r3, [r7, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000f8 	.word	0x200000f8

08000870 <Map>:

static int Map(int input, int input_min, int input_max, int output_min, int output_max)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
	return ((((input - input_min)*(output_max - output_min))/(input_max - input_min)) + output_min);
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	69b9      	ldr	r1, [r7, #24]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	1a8a      	subs	r2, r1, r2
 800088a:	fb02 f203 	mul.w	r2, r2, r3
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1acb      	subs	r3, r1, r3
 8000894:	fb92 f2f3 	sdiv	r2, r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <Watering>:

static void Watering(struct State * state)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    int dryness_before = Read_From_Sensor();
 80008b0:	f7ff ffbc 	bl	800082c <Read_From_Sensor>
 80008b4:	60f8      	str	r0, [r7, #12]
    Humidify();
 80008b6:	f000 f869 	bl	800098c <Humidify>
    HAL_Delay(5000); // fix
 80008ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80008be:	f000 fbe7 	bl	8001090 <HAL_Delay>
    int dryness_after = Read_From_Sensor();
 80008c2:	f7ff ffb3 	bl	800082c <Read_From_Sensor>
 80008c6:	60b8      	str	r0, [r7, #8]

    if (abs(dryness_after - dryness_before) >= 10)
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bfb8      	it	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	2b09      	cmp	r3, #9
 80008d6:	dd03      	ble.n	80008e0 <Watering+0x38>
    	state->cnt_unsucc_waterings = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	e004      	b.n	80008ea <Watering+0x42>
    else
    	state->cnt_unsucc_waterings++;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	605a      	str	r2, [r3, #4]

    state->next = Idle;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a02      	ldr	r2, [pc, #8]	; (80008f8 <Watering+0x50>)
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	080008fd 	.word	0x080008fd

080008fc <Idle>:

static void Idle(struct State * state)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    char msg[10]; // comment debug info
    int dryness = Read_From_Sensor();
 8000904:	f7ff ff92 	bl	800082c <Read_From_Sensor>
 8000908:	6178      	str	r0, [r7, #20]

    sprintf(msg, "%hu%%\r\n", dryness);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	4912      	ldr	r1, [pc, #72]	; (800095c <Idle+0x60>)
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fe38 	bl	8005588 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 10); // comment debug info
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc57 	bl	80001d0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	f107 0108 	add.w	r1, r7, #8
 800092a:	230a      	movs	r3, #10
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <Idle+0x64>)
 800092e:	f004 f9c5 	bl	8004cbc <HAL_UART_Transmit>

    if (dryness > 80)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b50      	cmp	r3, #80	; 0x50
 8000936:	dd09      	ble.n	800094c <Idle+0x50>
        state->next = state->cnt_unsucc_waterings >= 2 ? Panic : Watering;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	dd01      	ble.n	8000944 <Idle+0x48>
 8000940:	4a08      	ldr	r2, [pc, #32]	; (8000964 <Idle+0x68>)
 8000942:	e000      	b.n	8000946 <Idle+0x4a>
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <Idle+0x6c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
    else
        HAL_Delay(10000); // set proper value
}
 800094a:	e003      	b.n	8000954 <Idle+0x58>
        HAL_Delay(10000); // set proper value
 800094c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000950:	f000 fb9e 	bl	8001090 <HAL_Delay>
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08005ddc 	.word	0x08005ddc
 8000960:	20000148 	.word	0x20000148
 8000964:	0800096d 	.word	0x0800096d
 8000968:	080008a9 	.word	0x080008a9

0800096c <Panic>:

static void Panic(struct State * state)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	Flash_LED();
 8000974:	f000 f83e 	bl	80009f4 <Flash_LED>
	state->next = Watering;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a03      	ldr	r2, [pc, #12]	; (8000988 <Panic+0x1c>)
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	080008a9 	.word	0x080008a9

0800098c <Humidify>:

static void Humidify(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2104      	movs	r1, #4
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f001 fec0 	bl	800271c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800099c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <Humidify+0x5c>)
 80009a2:	f001 fed3 	bl	800274c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 80009a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <Humidify+0x5c>)
 80009ac:	f001 fece 	bl	800274c <HAL_GPIO_TogglePin>

	HAL_Delay(Mode_Delay[current_mode]);
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <Humidify+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <Humidify+0x64>)
 80009b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fb67 	bl	8001090 <HAL_Delay>

	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 80009c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c6:	4808      	ldr	r0, [pc, #32]	; (80009e8 <Humidify+0x5c>)
 80009c8:	f001 fec0 	bl	800274c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 80009cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <Humidify+0x5c>)
 80009d2:	f001 febb 	bl	800274c <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f001 fe9d 	bl	800271c <HAL_GPIO_WritePin>

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	48001000 	.word	0x48001000
 80009ec:	2000009c 	.word	0x2000009c
 80009f0:	20000000 	.word	0x20000000

080009f4 <Flash_LED>:


static void Flash_LED(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	int repeat = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]

	while(repeat++ < 5)
 80009fe:	e01b      	b.n	8000a38 <Flash_LED+0x44>
	{ //set repeat <= 3600 (every hour)
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Flash_LED+0x58>)
 8000a06:	f001 fea1 	bl	800274c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <Flash_LED+0x58>)
 8000a10:	f001 fe9c 	bl	800274c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a18:	f000 fb3a 	bl	8001090 <HAL_Delay>
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <Flash_LED+0x58>)
 8000a22:	f001 fe93 	bl	800274c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <Flash_LED+0x58>)
 8000a2c:	f001 fe8e 	bl	800274c <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f000 fb2c 	bl	8001090 <HAL_Delay>
	while(repeat++ < 5)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	ddde      	ble.n	8000a00 <Flash_LED+0xc>
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	48001000 	.word	0x48001000

08000a50 <Ext_Delay>:

static void Ext_Delay(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
	int c;
	for (c = 1; c <= 500000; c++)
 8000a56:	2301      	movs	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e002      	b.n	8000a62 <Ext_Delay+0x12>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <Ext_Delay+0x28>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	ddf8      	ble.n	8000a5c <Ext_Delay+0xc>
	{}
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	0007a120 	.word	0x0007a120

08000a7c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f001 fe7d 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  current_mode = (current_mode + 1) % 4;
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <EXTI0_IRQHandler+0x12c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	425a      	negs	r2, r3
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	f002 0203 	and.w	r2, r2, #3
 8000a96:	bf58      	it	pl
 8000a98:	4253      	negpl	r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <EXTI0_IRQHandler+0x12c>)
 8000a9e:	701a      	strb	r2, [r3, #0]
  switch(current_mode)
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <EXTI0_IRQHandler+0x12c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d87b      	bhi.n	8000ba0 <EXTI0_IRQHandler+0x124>
 8000aa8:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <EXTI0_IRQHandler+0x34>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000ac1 	.word	0x08000ac1
 8000ab4:	08000adb 	.word	0x08000adb
 8000ab8:	08000b09 	.word	0x08000b09
 8000abc:	08000b4b 	.word	0x08000b4b
  {
  case LOW:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	4839      	ldr	r0, [pc, #228]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000ac6:	f001 fe41 	bl	800274c <HAL_GPIO_TogglePin>
	  Ext_Delay();
 8000aca:	f7ff ffc1 	bl	8000a50 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad2:	4836      	ldr	r0, [pc, #216]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000ad4:	f001 fe3a 	bl	800274c <HAL_GPIO_TogglePin>
	  break;
 8000ad8:	e063      	b.n	8000ba2 <EXTI0_IRQHandler+0x126>
  case MEDIUM:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000ae0:	f001 fe34 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae8:	4830      	ldr	r0, [pc, #192]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000aea:	f001 fe2f 	bl	800274c <HAL_GPIO_TogglePin>
	  Ext_Delay();
 8000aee:	f7ff ffaf 	bl	8000a50 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000af8:	f001 fe28 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	482a      	ldr	r0, [pc, #168]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b02:	f001 fe23 	bl	800274c <HAL_GPIO_TogglePin>
	  break;
 8000b06:	e04c      	b.n	8000ba2 <EXTI0_IRQHandler+0x126>
  case HIGH:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0c:	4827      	ldr	r0, [pc, #156]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b0e:	f001 fe1d 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b18:	f001 fe18 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4822      	ldr	r0, [pc, #136]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b22:	f001 fe13 	bl	800274c <HAL_GPIO_TogglePin>
	  Ext_Delay();
 8000b26:	f7ff ff93 	bl	8000a50 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	481f      	ldr	r0, [pc, #124]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b30:	f001 fe0c 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b3a:	f001 fe07 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	481a      	ldr	r0, [pc, #104]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b44:	f001 fe02 	bl	800274c <HAL_GPIO_TogglePin>
	  break;
 8000b48:	e02b      	b.n	8000ba2 <EXTI0_IRQHandler+0x126>
  case ULTRA:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4e:	4817      	ldr	r0, [pc, #92]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b50:	f001 fdfc 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b58:	4814      	ldr	r0, [pc, #80]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b5a:	f001 fdf7 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b64:	f001 fdf2 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b6e:	f001 fded 	bl	800274c <HAL_GPIO_TogglePin>
	  Ext_Delay();
 8000b72:	f7ff ff6d 	bl	8000a50 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b7c:	f001 fde6 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b86:	f001 fde1 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b90:	f001 fddc 	bl	800274c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <EXTI0_IRQHandler+0x130>)
 8000b9a:	f001 fdd7 	bl	800274c <HAL_GPIO_TogglePin>
	  break;
 8000b9e:	e000      	b.n	8000ba2 <EXTI0_IRQHandler+0x126>
  default:
	  break;
 8000ba0:	bf00      	nop
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000009c 	.word	0x2000009c
 8000bac:	48001000 	.word	0x48001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <Error_Handler+0x6>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_MspInit+0x44>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f001 fbd8 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c20:	d124      	bne.n	8000c6c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_ADC_MspInit+0x74>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c56:	2303      	movs	r3, #3
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f001 fbde 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_I2C_MspInit+0x7c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d127      	bne.n	8000cea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cb2:	23c0      	movs	r3, #192	; 0xc0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <HAL_I2C_MspInit+0x84>)
 8000cce:	f001 fbab 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_I2C_MspInit+0x80>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400

08000d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d128      	bne.n	8000d74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6153      	str	r3, [r2, #20]
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d52:	23e0      	movs	r3, #224	; 0xe0
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d62:	2305      	movs	r3, #5
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f001 fb5a 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013000 	.word	0x40013000
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <HAL_TIM_Base_MspInit+0x44>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d113      	bne.n	8000dbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_TIM_Base_MspInit+0x48>)
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_Base_MspInit+0x48>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_TIM_Base_MspInit+0x48>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2019      	movs	r0, #25
 8000db4:	f001 fb01 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000db8:	2019      	movs	r0, #25
 8000dba:	f001 fb1a 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x7c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d127      	bne.n	8000e42 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6193      	str	r3, [r2, #24]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0x80>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e22:	2330      	movs	r3, #48	; 0x30
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e32:	2307      	movs	r3, #7
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0x84>)
 8000e3e:	f001 faf3 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800

08000e58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_PCD_MspInit+0x80>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d129      	bne.n	8000ece <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ea4:	230e      	movs	r3, #14
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f001 fab9 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_PCD_MspInit+0x84>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005c00 	.word	0x40005c00
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f890 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f3a:	f003 fa9f 	bl	800447c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001cc 	.word	0x200001cc

08000f48 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x16>
		heap_end = &end;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <_sbrk+0x50>)
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <_sbrk+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <_sbrk+0x50>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <_sbrk+0x50>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	466a      	mov	r2, sp
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d907      	bls.n	8000f82 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f72:	f004 fad7 	bl	8005524 <__errno>
 8000f76:	4602      	mov	r2, r0
 8000f78:	230c      	movs	r3, #12
 8000f7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	e006      	b.n	8000f90 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <_sbrk+0x50>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <_sbrk+0x50>)
 8000f8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000a0 	.word	0x200000a0
 8000f9c:	20000570 	.word	0x20000570

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_Init+0x28>)
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x28>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 f9e5 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fdea 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f001 f9fd 	bl	800240e <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f001 f9c5 	bl	80023ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000010 	.word	0x20000010
 8001048:	20000018 	.word	0x20000018
 800104c:	20000014 	.word	0x20000014

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000018 	.word	0x20000018
 8001074:	20000568 	.word	0x20000568

08001078 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;  
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000568 	.word	0x20000568

08001090 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_Delay+0x40>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d3f7      	bcc.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000018 	.word	0x20000018

080010d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b09a      	sub	sp, #104	; 0x68
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e1c9      	b.n	8001488 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d176      	bne.n	80011f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d152      	bne.n	80011b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fd69 	bl	8000c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d13b      	bne.n	80011b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f001 f803 	bl	8002148 <ADC_Disable>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d12f      	bne.n	80011b4 <HAL_ADC_Init+0xe0>
 8001154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001158:	2b00      	cmp	r3, #0
 800115a:	d12b      	bne.n	80011b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001164:	f023 0302 	bic.w	r3, r3, #2
 8001168:	f043 0202 	orr.w	r2, r3, #2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	6892      	ldr	r2, [r2, #8]
 800117a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800117e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	6892      	ldr	r2, [r2, #8]
 800118a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001190:	4b86      	ldr	r3, [pc, #536]	; (80013ac <HAL_ADC_Init+0x2d8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a86      	ldr	r2, [pc, #536]	; (80013b0 <HAL_ADC_Init+0x2dc>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9a      	lsrs	r2, r3, #18
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a6:	e002      	b.n	80011ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f9      	bne.n	80011a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d0:	d110      	bne.n	80011f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f023 0312 	bic.w	r3, r3, #18
 80011da:	f043 0210 	orr.w	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f040 8136 	bne.w	800146e <HAL_ADC_Init+0x39a>
 8001202:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8131 	bne.w	800146e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	f040 8129 	bne.w	800146e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001224:	f043 0202 	orr.w	r2, r3, #2
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001234:	d004      	beq.n	8001240 <HAL_ADC_Init+0x16c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HAL_ADC_Init+0x2e0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Init+0x170>
 8001240:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_ADC_Init+0x2e4>)
 8001242:	e000      	b.n	8001246 <HAL_ADC_Init+0x172>
 8001244:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_ADC_Init+0x2e8>)
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0x184>
 8001252:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_ADC_Init+0x2e0>)
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e01a      	b.n	800128e <HAL_ADC_Init+0x1ba>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a55      	ldr	r2, [pc, #340]	; (80013b4 <HAL_ADC_Init+0x2e0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d103      	bne.n	800126a <HAL_ADC_Init+0x196>
 8001262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e011      	b.n	800128e <HAL_ADC_Init+0x1ba>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a54      	ldr	r2, [pc, #336]	; (80013c0 <HAL_ADC_Init+0x2ec>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d102      	bne.n	800127a <HAL_ADC_Init+0x1a6>
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_ADC_Init+0x2f0>)
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e009      	b.n	800128e <HAL_ADC_Init+0x1ba>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_ADC_Init+0x2f0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d102      	bne.n	800128a <HAL_ADC_Init+0x1b6>
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <HAL_ADC_Init+0x2ec>)
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e001      	b.n	800128e <HAL_ADC_Init+0x1ba>
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_ADC_Init+0x1da>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x1da>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_ADC_Init+0x1dc>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d11c      	bne.n	80012ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_ADC_Init+0x202>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Init+0x202>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_ADC_Init+0x204>
 80012d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e5b      	ldrb	r3, [r3, #25]
 80012f2:	035a      	lsls	r2, r3, #13
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d002      	beq.n	8001302 <HAL_ADC_Init+0x22e>
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	e000      	b.n	8001304 <HAL_ADC_Init+0x230>
 8001302:	2300      	movs	r3, #0
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4313      	orrs	r3, r2
 8001312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001314:	4313      	orrs	r3, r2
 8001316:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d11b      	bne.n	800135a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7e5b      	ldrb	r3, [r3, #25]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	3b01      	subs	r3, #1
 8001330:	045a      	lsls	r2, r3, #17
 8001332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001334:	4313      	orrs	r3, r2
 8001336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133a:	663b      	str	r3, [r7, #96]	; 0x60
 800133c:	e00d      	b.n	800135a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001346:	f043 0220 	orr.w	r2, r3, #32
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	2b01      	cmp	r3, #1
 8001360:	d03a      	beq.n	80013d8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <HAL_ADC_Init+0x2ec>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Init+0x2a2>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_ADC_Init+0x2f0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d128      	bne.n	80013c8 <HAL_ADC_Init+0x2f4>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800137e:	d012      	beq.n	80013a6 <HAL_ADC_Init+0x2d2>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001388:	d00a      	beq.n	80013a0 <HAL_ADC_Init+0x2cc>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001392:	d002      	beq.n	800139a <HAL_ADC_Init+0x2c6>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	e018      	b.n	80013cc <HAL_ADC_Init+0x2f8>
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	e015      	b.n	80013cc <HAL_ADC_Init+0x2f8>
 80013a0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80013a4:	e012      	b.n	80013cc <HAL_ADC_Init+0x2f8>
 80013a6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013aa:	e00f      	b.n	80013cc <HAL_ADC_Init+0x2f8>
 80013ac:	20000010 	.word	0x20000010
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	50000100 	.word	0x50000100
 80013b8:	50000300 	.word	0x50000300
 80013bc:	50000700 	.word	0x50000700
 80013c0:	50000400 	.word	0x50000400
 80013c4:	50000500 	.word	0x50000500
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013d0:	4313      	orrs	r3, r2
 80013d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013d4:	4313      	orrs	r3, r2
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d114      	bne.n	8001410 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f4:	f023 0302 	bic.w	r3, r3, #2
 80013f8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7e1b      	ldrb	r3, [r3, #24]
 80013fe:	039a      	lsls	r2, r3, #14
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4313      	orrs	r3, r2
 800140a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140c:	4313      	orrs	r3, r2
 800140e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68d9      	ldr	r1, [r3, #12]
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_ADC_Init+0x3bc>)
 800141c:	400b      	ands	r3, r1
 800141e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001420:	430b      	orrs	r3, r1
 8001422:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10c      	bne.n	8001446 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001436:	f022 010f 	bic.w	r1, r2, #15
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	69d2      	ldr	r2, [r2, #28]
 800143e:	3a01      	subs	r2, #1
 8001440:	430a      	orrs	r2, r1
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
 8001444:	e007      	b.n	8001456 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001450:	f022 020f 	bic.w	r2, r2, #15
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	e00a      	b.n	8001484 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f023 0312 	bic.w	r3, r3, #18
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800147e:	2301      	movs	r3, #1
 8001480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001488:	4618      	mov	r0, r3
 800148a:	3768      	adds	r7, #104	; 0x68
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	fff0c007 	.word	0xfff0c007

08001494 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 80f9 	bne.w	80016a2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Start+0x2a>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e0f4      	b.n	80016a8 <HAL_ADC_Start+0x214>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fde0 	bl	800208c <ADC_Enable>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80e0 	bne.w	8001698 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_Start+0x6c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6d      	ldr	r2, [pc, #436]	; (80016b0 <HAL_ADC_Start+0x21c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d106      	bne.n	800150e <HAL_ADC_Start+0x7a>
 8001500:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_ADC_Start+0x220>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <HAL_ADC_Start+0x9a>
 800150c:	e005      	b.n	800151a <HAL_ADC_Start+0x86>
 800150e:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_ADC_Start+0x224>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_ADC_Start+0x9a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001522:	d004      	beq.n	800152e <HAL_ADC_Start+0x9a>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a64      	ldr	r2, [pc, #400]	; (80016bc <HAL_ADC_Start+0x228>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d115      	bne.n	800155a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d036      	beq.n	80015b6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001558:	e02d      	b.n	80015b6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800156e:	d004      	beq.n	800157a <HAL_ADC_Start+0xe6>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_ADC_Start+0x21c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10a      	bne.n	8001590 <HAL_ADC_Start+0xfc>
 800157a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	e008      	b.n	80015a2 <HAL_ADC_Start+0x10e>
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_ADC_Start+0x228>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015c2:	d106      	bne.n	80015d2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f023 0206 	bic.w	r2, r3, #6
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	221c      	movs	r2, #28
 80015e6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f0:	d004      	beq.n	80015fc <HAL_ADC_Start+0x168>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <HAL_ADC_Start+0x21c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d106      	bne.n	800160a <HAL_ADC_Start+0x176>
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_ADC_Start+0x220>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03e      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001608:	e005      	b.n	8001616 <HAL_ADC_Start+0x182>
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_ADC_Start+0x224>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2b00      	cmp	r3, #0
 8001614:	d037      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800161e:	d004      	beq.n	800162a <HAL_ADC_Start+0x196>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_ADC_Start+0x21c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d106      	bne.n	8001638 <HAL_ADC_Start+0x1a4>
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_ADC_Start+0x220>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2b05      	cmp	r3, #5
 8001634:	d027      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001636:	e005      	b.n	8001644 <HAL_ADC_Start+0x1b0>
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_ADC_Start+0x224>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	2b05      	cmp	r3, #5
 8001642:	d020      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164c:	d004      	beq.n	8001658 <HAL_ADC_Start+0x1c4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_ADC_Start+0x21c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d106      	bne.n	8001666 <HAL_ADC_Start+0x1d2>
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_ADC_Start+0x220>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	2b09      	cmp	r3, #9
 8001662:	d010      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001664:	e005      	b.n	8001672 <HAL_ADC_Start+0x1de>
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_ADC_Start+0x224>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2b09      	cmp	r3, #9
 8001670:	d009      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d004      	beq.n	8001686 <HAL_ADC_Start+0x1f2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_ADC_Start+0x228>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10f      	bne.n	80016a6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	6892      	ldr	r2, [r2, #8]
 8001690:	f042 0204 	orr.w	r2, r2, #4
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	e006      	b.n	80016a6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80016a0:	e001      	b.n	80016a6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a2:	2302      	movs	r3, #2
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	50000100 	.word	0x50000100
 80016b4:	50000300 	.word	0x50000300
 80016b8:	50000700 	.word	0x50000700
 80016bc:	50000400 	.word	0x50000400

080016c0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d102      	bne.n	80016dc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016d6:	2308      	movs	r3, #8
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e03a      	b.n	8001752 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e4:	d004      	beq.n	80016f0 <HAL_ADC_PollForConversion+0x30>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6e      	ldr	r2, [pc, #440]	; (80018a4 <HAL_ADC_PollForConversion+0x1e4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x34>
 80016f0:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_ADC_PollForConversion+0x1e8>)
 80016f2:	e000      	b.n	80016f6 <HAL_ADC_PollForConversion+0x36>
 80016f4:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <HAL_ADC_PollForConversion+0x1ec>)
 80016f6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2b00      	cmp	r3, #0
 8001702:	d112      	bne.n	800172a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d11d      	bne.n	800174e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f043 0220 	orr.w	r2, r3, #32
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0b8      	b.n	800189c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f043 0220 	orr.w	r2, r3, #32
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0a6      	b.n	800189c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175a:	d004      	beq.n	8001766 <HAL_ADC_PollForConversion+0xa6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a50      	ldr	r2, [pc, #320]	; (80018a4 <HAL_ADC_PollForConversion+0x1e4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d106      	bne.n	8001774 <HAL_ADC_PollForConversion+0xb4>
 8001766:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_ADC_PollForConversion+0x1e8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2b00      	cmp	r3, #0
 8001770:	d010      	beq.n	8001794 <HAL_ADC_PollForConversion+0xd4>
 8001772:	e005      	b.n	8001780 <HAL_ADC_PollForConversion+0xc0>
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_ADC_PollForConversion+0x1ec>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_ADC_PollForConversion+0xd4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001788:	d004      	beq.n	8001794 <HAL_ADC_PollForConversion+0xd4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_ADC_PollForConversion+0x1f0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d104      	bne.n	800179e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	e00f      	b.n	80017be <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a6:	d004      	beq.n	80017b2 <HAL_ADC_PollForConversion+0xf2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <HAL_ADC_PollForConversion+0x1e4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d102      	bne.n	80017b8 <HAL_ADC_PollForConversion+0xf8>
 80017b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b6:	e000      	b.n	80017ba <HAL_ADC_PollForConversion+0xfa>
 80017b8:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_ADC_PollForConversion+0x1f0>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80017be:	f7ff fc5b 	bl	8001078 <HAL_GetTick>
 80017c2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017c4:	e01a      	b.n	80017fc <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d016      	beq.n	80017fc <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_ADC_PollForConversion+0x124>
 80017d4:	f7ff fc50 	bl	8001078 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad2      	subs	r2, r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d90b      	bls.n	80017fc <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0204 	orr.w	r2, r3, #4
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e04f      	b.n	800189c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0dd      	beq.n	80017c6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001820:	2b00      	cmp	r3, #0
 8001822:	d131      	bne.n	8001888 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12c      	bne.n	8001888 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d125      	bne.n	8001888 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d112      	bne.n	8001870 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d112      	bne.n	8001888 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
 800186e:	e00b      	b.n	8001888 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d103      	bne.n	800189a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50000100 	.word	0x50000100
 80018a8:	50000300 	.word	0x50000300
 80018ac:	50000700 	.word	0x50000700
 80018b0:	50000400 	.word	0x50000400

080018b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018d0:	b490      	push	{r4, r7}
 80018d2:	b09a      	sub	sp, #104	; 0x68
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x22>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e2cd      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x5be>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 82b1 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d81c      	bhi.n	800194c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	231f      	movs	r3, #31
 800192c:	4093      	lsls	r3, r2
 800192e:	43db      	mvns	r3, r3
 8001930:	4018      	ands	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681c      	ldr	r4, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa04 f303 	lsl.w	r3, r4, r3
 8001946:	4303      	orrs	r3, r0
 8001948:	630b      	str	r3, [r1, #48]	; 0x30
 800194a:	e063      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d81e      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	3b1e      	subs	r3, #30
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4018      	ands	r0, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681c      	ldr	r4, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	3b1e      	subs	r3, #30
 8001988:	fa04 f303 	lsl.w	r3, r4, r3
 800198c:	4303      	orrs	r3, r0
 800198e:	634b      	str	r3, [r1, #52]	; 0x34
 8001990:	e040      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b0e      	cmp	r3, #14
 8001998:	d81e      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	3b3c      	subs	r3, #60	; 0x3c
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4018      	ands	r0, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3b3c      	subs	r3, #60	; 0x3c
 80019ce:	fa04 f303 	lsl.w	r3, r4, r3
 80019d2:	4303      	orrs	r3, r0
 80019d4:	638b      	str	r3, [r1, #56]	; 0x38
 80019d6:	e01d      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	3b5a      	subs	r3, #90	; 0x5a
 80019f0:	221f      	movs	r2, #31
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4018      	ands	r0, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681c      	ldr	r4, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	3b5a      	subs	r3, #90	; 0x5a
 8001a0c:	fa04 f303 	lsl.w	r3, r4, r3
 8001a10:	4303      	orrs	r3, r0
 8001a12:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 80e5 	bne.w	8001bee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d91c      	bls.n	8001a66 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6998      	ldr	r0, [r3, #24]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b1e      	subs	r3, #30
 8001a42:	2207      	movs	r2, #7
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4018      	ands	r0, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689c      	ldr	r4, [r3, #8]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	fa04 f303 	lsl.w	r3, r4, r3
 8001a60:	4303      	orrs	r3, r0
 8001a62:	618b      	str	r3, [r1, #24]
 8001a64:	e019      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6958      	ldr	r0, [r3, #20]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4018      	ands	r0, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689c      	ldr	r4, [r3, #8]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	fa04 f303 	lsl.w	r3, r4, r3
 8001a96:	4303      	orrs	r3, r0
 8001a98:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d84f      	bhi.n	8001b5c <HAL_ADC_ConfigChannel+0x28c>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001af7 	.word	0x08001af7
 8001acc:	08001b19 	.word	0x08001b19
 8001ad0:	08001b3b 	.word	0x08001b3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001ade:	4ba1      	ldr	r3, [pc, #644]	; (8001d64 <HAL_ADC_ConfigChannel+0x494>)
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	6809      	ldr	r1, [r1, #0]
 8001ae6:	0688      	lsls	r0, r1, #26
 8001ae8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001aea:	4301      	orrs	r1, r0
 8001aec:	430b      	orrs	r3, r1
 8001aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001af4:	e07b      	b.n	8001bee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001b00:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <HAL_ADC_ConfigChannel+0x494>)
 8001b02:	400b      	ands	r3, r1
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	0688      	lsls	r0, r1, #26
 8001b0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b0c:	4301      	orrs	r1, r0
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b14:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b16:	e06a      	b.n	8001bee <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001b22:	4b90      	ldr	r3, [pc, #576]	; (8001d64 <HAL_ADC_ConfigChannel+0x494>)
 8001b24:	400b      	ands	r3, r1
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	6809      	ldr	r1, [r1, #0]
 8001b2a:	0688      	lsls	r0, r1, #26
 8001b2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b2e:	4301      	orrs	r1, r0
 8001b30:	430b      	orrs	r3, r1
 8001b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b36:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b38:	e059      	b.n	8001bee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001b44:	4b87      	ldr	r3, [pc, #540]	; (8001d64 <HAL_ADC_ConfigChannel+0x494>)
 8001b46:	400b      	ands	r3, r1
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	0688      	lsls	r0, r1, #26
 8001b4e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b50:	4301      	orrs	r1, r0
 8001b52:	430b      	orrs	r3, r1
 8001b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b58:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b5a:	e048      	b.n	8001bee <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001b7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	069b      	lsls	r3, r3, #26
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d107      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001b9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ba2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	069b      	lsls	r3, r3, #26
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bc6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	069b      	lsls	r3, r3, #26
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d107      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001be6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001bec:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d108      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x33e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x33e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x340>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 8136 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d00f      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	2001      	movs	r0, #1
 8001c30:	fa00 f202 	lsl.w	r2, r0, r2
 8001c34:	43d2      	mvns	r2, r2
 8001c36:	400a      	ands	r2, r1
 8001c38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c3c:	e04a      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	2001      	movs	r0, #1
 8001c50:	fa00 f202 	lsl.w	r2, r0, r2
 8001c54:	430a      	orrs	r2, r1
 8001c56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d91c      	bls.n	8001c9c <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6998      	ldr	r0, [r3, #24]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	3b1b      	subs	r3, #27
 8001c78:	2207      	movs	r2, #7
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4018      	ands	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689c      	ldr	r4, [r3, #8]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b1b      	subs	r3, #27
 8001c92:	fa04 f303 	lsl.w	r3, r4, r3
 8001c96:	4303      	orrs	r3, r0
 8001c98:	618b      	str	r3, [r1, #24]
 8001c9a:	e01b      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6958      	ldr	r0, [r3, #20]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4018      	ands	r0, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689c      	ldr	r4, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	fa04 f303 	lsl.w	r3, r4, r3
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cdc:	d004      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x418>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_ADC_ConfigChannel+0x498>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x41c>
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_ADC_ConfigChannel+0x49c>)
 8001cea:	e000      	b.n	8001cee <HAL_ADC_ConfigChannel+0x41e>
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_ADC_ConfigChannel+0x4a0>)
 8001cee:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d08:	2b11      	cmp	r3, #17
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	f040 80b0 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 80a9 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x5b2>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d38:	d102      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x470>
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_ADC_ConfigChannel+0x498>)
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e027      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x4c0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_ADC_ConfigChannel+0x498>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d103      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x482>
 8001d4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e01e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x4c0>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_ADC_ConfigChannel+0x4a4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10f      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x4ac>
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_ADC_ConfigChannel+0x4a8>)
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e016      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x4c0>
 8001d62:	bf00      	nop
 8001d64:	83fff000 	.word	0x83fff000
 8001d68:	50000100 	.word	0x50000100
 8001d6c:	50000300 	.word	0x50000300
 8001d70:	50000700 	.word	0x50000700
 8001d74:	50000400 	.word	0x50000400
 8001d78:	50000500 	.word	0x50000500
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d102      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x4bc>
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e001      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x4c0>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x4e0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x4e0>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x4e2>
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d150      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x50e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x508>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x508>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_ConfigChannel+0x50a>
 8001dd8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d13c      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x588>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d11d      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x552>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dee:	d118      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e12:	e002      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x544>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e20:	e02e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x5b0>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b11      	cmp	r3, #17
 8001e28:	d10b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x572>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e32:	d106      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e40:	e01e      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d11a      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e54:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e56:	e013      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e6a:	e00a      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e7e:	e000      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x5b2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e80:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3768      	adds	r7, #104	; 0x68
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc90      	pop	{r4, r7}
 8001e96:	4770      	bx	lr
 8001e98:	50000500 	.word	0x50000500
 8001e9c:	50000400 	.word	0x50000400
 8001ea0:	20000010 	.word	0x20000010
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b099      	sub	sp, #100	; 0x64
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ec2:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	e01a      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d103      	bne.n	8001eda <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ed2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	e011      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a67      	ldr	r2, [pc, #412]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d102      	bne.n	8001eea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	e009      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a64      	ldr	r2, [pc, #400]	; (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d102      	bne.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	e001      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b0      	b.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0a9      	b.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f040 808d 	bne.w	8002048 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8086 	bne.w	8002048 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f44:	d004      	beq.n	8001f50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a4b      	ldr	r2, [pc, #300]	; (8002078 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001f52:	e000      	b.n	8001f56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001f54:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001f56:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d040      	beq.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f72:	035b      	lsls	r3, r3, #13
 8001f74:	430b      	orrs	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d15c      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d107      	bne.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001fbe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d14b      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fcc:	f023 030f 	bic.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	6811      	ldr	r1, [r2, #0]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6892      	ldr	r2, [r2, #8]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fde:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe0:	e03c      	b.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d123      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002030:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800203e:	f023 030f 	bic.w	r3, r3, #15
 8002042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002044:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002046:	e009      	b.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800205a:	e000      	b.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800205c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800206a:	4618      	mov	r0, r3
 800206c:	3764      	adds	r7, #100	; 0x64
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	50000100 	.word	0x50000100
 800207c:	50000400 	.word	0x50000400
 8002080:	50000500 	.word	0x50000500
 8002084:	50000300 	.word	0x50000300
 8002088:	50000700 	.word	0x50000700

0800208c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d108      	bne.n	80020b8 <ADC_Enable+0x2c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <ADC_Enable+0x2c>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <ADC_Enable+0x2e>
 80020b8:	2300      	movs	r3, #0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13c      	bne.n	8002138 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <ADC_Enable+0xb8>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e028      	b.n	800213a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020f8:	f7fe ffbe 	bl	8001078 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020fe:	e014      	b.n	800212a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002100:	f7fe ffba 	bl	8001078 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d90d      	bls.n	800212a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e007      	b.n	800213a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d1e3      	bne.n	8002100 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	8000003f 	.word	0x8000003f

08002148 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d108      	bne.n	8002174 <ADC_Disable+0x2c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <ADC_Disable+0x2c>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <ADC_Disable+0x2e>
 8002174:	2300      	movs	r3, #0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030d 	and.w	r3, r3, #13
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10f      	bne.n	80021a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	f042 0202 	orr.w	r2, r2, #2
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2203      	movs	r2, #3
 800219e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021a0:	f7fe ff6a 	bl	8001078 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021a6:	e022      	b.n	80021ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e01c      	b.n	80021fe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021c4:	f7fe ff58 	bl	8001078 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d90d      	bls.n	80021ee <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e007      	b.n	80021fe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d0e3      	beq.n	80021c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	4909      	ldr	r1, [pc, #36]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	79fa      	ldrb	r2, [r7, #7]
 8002288:	f002 021f 	and.w	r2, r2, #31
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	4909      	ldr	r1, [pc, #36]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	2201      	movs	r2, #1
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	401a      	ands	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002342:	2101      	movs	r1, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff90 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff2b 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff40 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff90 	bl	80022fc <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5f 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff33 	bl	800226c <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa2 	bl	8002360 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e154      	b.n	80026e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8146 	beq.w	80026dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d00b      	beq.n	8002470 <HAL_GPIO_Init+0x48>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002464:	2b11      	cmp	r3, #17
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d130      	bne.n	80024d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a6:	2201      	movs	r2, #1
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 0201 	and.w	r2, r3, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0xea>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b12      	cmp	r3, #18
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a0 	beq.w	80026dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_GPIO_Init+0x2d8>)
 800259e:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_GPIO_Init+0x2d8>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_GPIO_Init+0x2d8>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_GPIO_Init+0x2dc>)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025de:	d019      	beq.n	8002614 <HAL_GPIO_Init+0x1ec>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a49      	ldr	r2, [pc, #292]	; (8002708 <HAL_GPIO_Init+0x2e0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_GPIO_Init+0x1e8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2e4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00d      	beq.n	800260c <HAL_GPIO_Init+0x1e4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_GPIO_Init+0x2e8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x1e0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a46      	ldr	r2, [pc, #280]	; (8002714 <HAL_GPIO_Init+0x2ec>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_GPIO_Init+0x1dc>
 8002600:	2304      	movs	r3, #4
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002604:	2305      	movs	r3, #5
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x1ee>
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002626:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_GPIO_Init+0x2dc>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002658:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f aea3 	bne.w	8002438 <HAL_GPIO_Init+0x10>
  }
}
 80026f2:	bf00      	nop
 80026f4:	371c      	adds	r7, #28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	48000c00 	.word	0x48000c00
 8002714:	48001000 	.word	0x48001000
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002738:	e002      	b.n	8002740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43d9      	mvns	r1, r3
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	400b      	ands	r3, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f806 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e080      	b.n	80028da <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fa43 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2224      	movs	r2, #36	; 0x24
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6852      	ldr	r2, [r2, #4]
 8002812:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002816:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6892      	ldr	r2, [r2, #8]
 8002822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002826:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e006      	b.n	800284e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800284c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d104      	bne.n	8002860 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002882:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6911      	ldr	r1, [r2, #16]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6952      	ldr	r2, [r2, #20]
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6992      	ldr	r2, [r2, #24]
 8002896:	0212      	lsls	r2, r2, #8
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	69d1      	ldr	r1, [r2, #28]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6a12      	ldr	r2, [r2, #32]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d138      	bne.n	800296a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002902:	2302      	movs	r3, #2
 8002904:	e032      	b.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2224      	movs	r2, #36	; 0x24
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002934:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	6811      	ldr	r1, [r2, #0]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d139      	bne.n	8002a02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002998:	2302      	movs	r3, #2
 800299a:	e033      	b.n	8002a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af06      	add	r7, sp, #24
 8002a16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0d0      	b.n	8002bc4 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe fa0e 	bl	8000e58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fd04 	bl	8005456 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e04c      	b.n	8002aee <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3301      	adds	r3, #1
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	b298      	uxth	r0, r3
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3336      	adds	r3, #54	; 0x36
 8002a92:	4602      	mov	r2, r0
 8002a94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3303      	adds	r3, #3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	333c      	adds	r3, #60	; 0x3c
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3340      	adds	r3, #64	; 0x40
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	3301      	adds	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3ad      	bcc.n	8002a54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e044      	b.n	8002b88 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b56:	7bfa      	ldrb	r2, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	3301      	adds	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d3b5      	bcc.n	8002afe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	687e      	ldr	r6, [r7, #4]
 8002b9a:	466d      	mov	r5, sp
 8002b9c:	f106 0410 	add.w	r4, r6, #16
 8002ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	602b      	str	r3, [r5, #0]
 8002ba8:	1d33      	adds	r3, r6, #4
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f002 fc6d 	bl	800548c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	f000 bef4 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 816a 	beq.w	8002eca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bf6:	4bb3      	ldr	r3, [pc, #716]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c02:	4bb0      	ldr	r3, [pc, #704]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d159      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
 8002c0e:	4bad      	ldr	r3, [pc, #692]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d152      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_OscConfig+0x82>
 8002c48:	4b9e      	ldr	r3, [pc, #632]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	e015      	b.n	8002c7a <HAL_RCC_OscConfig+0xae>
 8002c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c76:	4b93      	ldr	r3, [pc, #588]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c86:	fa92 f2a2 	rbit	r2, r2
 8002c8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 810c 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x2fc>
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8106 	bne.w	8002ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f000 be86 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x110>
 8002cce:	4a7d      	ldr	r2, [pc, #500]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002cd0:	4b7c      	ldr	r3, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e030      	b.n	8002d3e <HAL_RCC_OscConfig+0x172>
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x134>
 8002ce6:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf4:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01e      	b.n	8002d3e <HAL_RCC_OscConfig+0x172>
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x15a>
 8002d0c:	4a6d      	ldr	r2, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x172>
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d28:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4a64      	ldr	r2, [pc, #400]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d3e:	4961      	ldr	r1, [pc, #388]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f023 020f 	bic.w	r2, r3, #15
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d059      	beq.n	8002e10 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f98c 	bl	8001078 <HAL_GetTick>
 8002d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d66:	f7fe f987 	bl	8001078 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d902      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	f000 be29 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_OscConfig+0x1e2>
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x20e>
 8002dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dde:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002de2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002de6:	fa92 f2a2 	rbit	r2, r2
 8002dea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002dee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002df2:	fab2 f282 	clz	r2, r2
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f202 	lsl.w	r2, r1, r2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ab      	beq.n	8002d66 <HAL_RCC_OscConfig+0x19a>
 8002e0e:	e05c      	b.n	8002eca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe f932 	bl	8001078 <HAL_GetTick>
 8002e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1a:	f7fe f92d 	bl	8001078 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d902      	bls.n	8002e30 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f000 bdcf 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
 8002e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e34:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e44:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0x296>
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x2c2>
 8002e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e7e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_RCC_OscConfig+0x2f8>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e92:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e96:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e9a:	fa92 f2a2 	rbit	r2, r2
 8002e9e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ea2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ab      	bne.n	8002e1a <HAL_RCC_OscConfig+0x24e>
 8002ec2:	e002      	b.n	8002eca <HAL_RCC_OscConfig+0x2fe>
 8002ec4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 816f 	beq.w	80031b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eda:	4bd0      	ldr	r3, [pc, #832]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ee6:	4bcd      	ldr	r3, [pc, #820]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d16c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x400>
 8002ef2:	4bca      	ldr	r3, [pc, #808]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d166      	bne.n	8002fcc <HAL_RCC_OscConfig+0x400>
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_RCC_OscConfig+0x362>
 8002f28:	4bbc      	ldr	r3, [pc, #752]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	e013      	b.n	8002f56 <HAL_RCC_OscConfig+0x38a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f52:	4bb2      	ldr	r3, [pc, #712]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2202      	movs	r2, #2
 8002f58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f68:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f000 bd1b 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	48a0      	ldr	r0, [pc, #640]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002f9a:	4ba0      	ldr	r3, [pc, #640]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	21f8      	movs	r1, #248	; 0xf8
 8002faa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fb2:	fa91 f1a1 	rbit	r1, r1
 8002fb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fbe:	fab1 f181 	clz	r1, r1
 8002fc2:	b2c9      	uxtb	r1, r1
 8002fc4:	408b      	lsls	r3, r1
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fca:	e0f5      	b.n	80031b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8085 	beq.w	80030e2 <HAL_RCC_OscConfig+0x516>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	2301      	movs	r3, #1
 8003002:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe f838 	bl	8001078 <HAL_GetTick>
 8003008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300e:	f7fe f833 	bl	8001078 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d902      	bls.n	8003024 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	f000 bcd5 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003036:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0x488>
 800304e:	4b73      	ldr	r3, [pc, #460]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0x4b0>
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800306c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003078:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x650>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2202      	movs	r2, #2
 800307e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003082:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800308e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0af      	beq.n	800300e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	485b      	ldr	r0, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x650>)
 80030b0:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x650>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	21f8      	movs	r1, #248	; 0xf8
 80030c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030c8:	fa91 f1a1 	rbit	r1, r1
 80030cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030d4:	fab1 f181 	clz	r1, r1
 80030d8:	b2c9      	uxtb	r1, r1
 80030da:	408b      	lsls	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	6003      	str	r3, [r0, #0]
 80030e0:	e06a      	b.n	80031b8 <HAL_RCC_OscConfig+0x5ec>
 80030e2:	2301      	movs	r3, #1
 80030e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2300      	movs	r3, #0
 800310c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fd ffb3 	bl	8001078 <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fd ffae 	bl	8001078 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	f000 bc50 	b.w	80039ce <HAL_RCC_OscConfig+0xe02>
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_RCC_OscConfig+0x592>
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_OscConfig+0x650>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	e013      	b.n	8003186 <HAL_RCC_OscConfig+0x5ba>
 800315e:	2302      	movs	r3, #2
 8003160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003170:	2302      	movs	r3, #2
 8003172:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003176:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x650>)
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	2202      	movs	r2, #2
 8003188:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800318c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003190:	fa92 f2a2 	rbit	r2, r2
 8003194:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003198:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1af      	bne.n	8003118 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80da 	beq.w	800337c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d069      	beq.n	80032a6 <HAL_RCC_OscConfig+0x6da>
 80031d2:	2301      	movs	r3, #1
 80031d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x654>)
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	461a      	mov	r2, r3
 80031f8:	2301      	movs	r3, #1
 80031fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fd ff3c 	bl	8001078 <HAL_GetTick>
 8003200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003204:	e00e      	b.n	8003224 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003206:	f7fd ff37 	bl	8001078 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d906      	bls.n	8003224 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e3d9      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	10908120 	.word	0x10908120
 8003224:	2302      	movs	r3, #2
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003236:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003264:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	4ba5      	ldr	r3, [pc, #660]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800326e:	2102      	movs	r1, #2
 8003270:	6019      	str	r1, [r3, #0]
 8003272:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fa93 f1a3 	rbit	r1, r3
 800327c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003280:	6019      	str	r1, [r3, #0]
  return result;
 8003282:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0b0      	beq.n	8003206 <HAL_RCC_OscConfig+0x63a>
 80032a4:	e06a      	b.n	800337c <HAL_RCC_OscConfig+0x7b0>
 80032a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032bc:	601a      	str	r2, [r3, #0]
  return result;
 80032be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b8c      	ldr	r3, [pc, #560]	; (8003500 <HAL_RCC_OscConfig+0x934>)
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	461a      	mov	r2, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fece 	bl	8001078 <HAL_GetTick>
 80032dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e009      	b.n	80032f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fd fec9 	bl	8001078 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e36b      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 80032f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80032fa:	2202      	movs	r2, #2
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003312:	2202      	movs	r2, #2
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800332a:	2202      	movs	r2, #2
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800333c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333e:	4b6f      	ldr	r3, [pc, #444]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003342:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003346:	2102      	movs	r1, #2
 8003348:	6019      	str	r1, [r3, #0]
 800334a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f1a3 	rbit	r1, r3
 8003354:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003358:	6019      	str	r1, [r3, #0]
  return result;
 800335a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1b2      	bne.n	80032e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	1d3b      	adds	r3, r7, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8158 	beq.w	800363c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4a57      	ldr	r2, [pc, #348]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 80033a0:	4b56      	ldr	r3, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x938>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x938>)
 80033d2:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x938>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033dc:	f7fd fe4c 	bl	8001078 <HAL_GetTick>
 80033e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e009      	b.n	80033fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fd fe47 	bl	8001078 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e2e9      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b42      	ldr	r3, [pc, #264]	; (8003504 <HAL_RCC_OscConfig+0x938>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ef      	beq.n	80033e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x852>
 8003410:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	e02f      	b.n	800347e <HAL_RCC_OscConfig+0x8b2>
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x876>
 8003428:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	e01d      	b.n	800347e <HAL_RCC_OscConfig+0x8b2>
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x89a>
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	4a28      	ldr	r2, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x8b2>
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6213      	str	r3, [r2, #32]
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d06b      	beq.n	8003560 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fd fdf6 	bl	8001078 <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd fdf1 	bl	8001078 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e291      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 80034aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034c6:	2202      	movs	r2, #2
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	fa93 f2a3 	rbit	r2, r3
 80034d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034d8:	601a      	str	r2, [r3, #0]
  return result;
 80034da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d109      	bne.n	8003508 <HAL_RCC_OscConfig+0x93c>
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <HAL_RCC_OscConfig+0x930>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	e014      	b.n	8003524 <HAL_RCC_OscConfig+0x958>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	10908120 	.word	0x10908120
 8003504:	40007000 	.word	0x40007000
 8003508:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800350c:	2202      	movs	r2, #2
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4bbb      	ldr	r3, [pc, #748]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003528:	2102      	movs	r1, #2
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	fa92 f1a2 	rbit	r1, r2
 8003536:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800353a:	6011      	str	r1, [r2, #0]
  return result;
 800353c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	fab2 f282 	clz	r2, r2
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	f002 021f 	and.w	r2, r2, #31
 8003552:	2101      	movs	r1, #1
 8003554:	fa01 f202 	lsl.w	r2, r1, r2
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d099      	beq.n	8003492 <HAL_RCC_OscConfig+0x8c6>
 800355e:	e063      	b.n	8003628 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fd fd8a 	bl	8001078 <HAL_GetTick>
 8003564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fd85 	bl	8001078 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e225      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 8003582:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003586:	2202      	movs	r2, #2
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800359e:	2202      	movs	r2, #2
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035b0:	601a      	str	r2, [r3, #0]
  return result;
 80035b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0xa06>
 80035cc:	4b90      	ldr	r3, [pc, #576]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	e00d      	b.n	80035ee <HAL_RCC_OscConfig+0xa22>
 80035d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035d6:	2202      	movs	r2, #2
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b89      	ldr	r3, [pc, #548]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035f2:	2102      	movs	r1, #2
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	fa92 f1a2 	rbit	r1, r2
 8003600:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003604:	6011      	str	r1, [r2, #0]
  return result;
 8003606:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1a0      	bne.n	800356a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003628:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003632:	4b77      	ldr	r3, [pc, #476]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 81c2 	beq.w	80039cc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	4b71      	ldr	r3, [pc, #452]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	f000 819c 	beq.w	800398e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b02      	cmp	r3, #2
 800365e:	f040 8114 	bne.w	800388a <HAL_RCC_OscConfig+0xcbe>
 8003662:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800366a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003680:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800368c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	461a      	mov	r2, r3
 8003694:	2300      	movs	r3, #0
 8003696:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fcee 	bl	8001078 <HAL_GetTick>
 800369c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fd fce9 	bl	8001078 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e18b      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 80036b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	fa93 f2a3 	rbit	r2, r3
 80036ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036ce:	601a      	str	r2, [r3, #0]
  return result;
 80036d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_OscConfig+0xb24>
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e01b      	b.n	8003728 <HAL_RCC_OscConfig+0xb5c>
 80036f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f2a3 	rbit	r2, r3
 8003704:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800370e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800372c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003730:	6011      	str	r1, [r2, #0]
 8003732:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fa92 f1a2 	rbit	r1, r2
 800373c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003740:	6011      	str	r1, [r2, #0]
  return result;
 8003742:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d19e      	bne.n	80036a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003764:	482a      	ldr	r0, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003766:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	430b      	orrs	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	6043      	str	r3, [r0, #4]
 8003780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003784:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003798:	601a      	str	r2, [r3, #0]
  return result;
 800379a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800379e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	461a      	mov	r2, r3
 80037b2:	2301      	movs	r3, #1
 80037b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd fc5f 	bl	8001078 <HAL_GetTick>
 80037ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037be:	e009      	b.n	80037d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fd fc5a 	bl	8001078 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0fc      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 80037d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037ec:	601a      	str	r2, [r3, #0]
  return result;
 80037ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0xc48>
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <HAL_RCC_OscConfig+0xc44>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e01e      	b.n	800384c <HAL_RCC_OscConfig+0xc80>
 800380e:	bf00      	nop
 8003810:	40021000 	.word	0x40021000
 8003814:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0xe0c>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003850:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	fa92 f1a2 	rbit	r1, r2
 8003860:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d09b      	beq.n	80037c0 <HAL_RCC_OscConfig+0xbf4>
 8003888:	e0a0      	b.n	80039cc <HAL_RCC_OscConfig+0xe00>
 800388a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	fa93 f2a3 	rbit	r2, r3
 800389e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a2:	601a      	str	r2, [r3, #0]
  return result;
 80038a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2300      	movs	r3, #0
 80038be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fd fbda 	bl	8001078 <HAL_GetTick>
 80038c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	e009      	b.n	80038de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ca:	f7fd fbd5 	bl	8001078 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e077      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
 80038de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	fa93 f2a3 	rbit	r2, r3
 80038f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <HAL_RCC_OscConfig+0xd4c>
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_OscConfig+0xe0c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e01b      	b.n	8003950 <HAL_RCC_OscConfig+0xd84>
 8003918:	f107 0320 	add.w	r3, r7, #32
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f107 0320 	add.w	r3, r7, #32
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f107 0318 	add.w	r3, r7, #24
 8003936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f107 0318 	add.w	r3, r7, #24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCC_OscConfig+0xe0c>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f107 0210 	add.w	r2, r7, #16
 8003954:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	f107 0210 	add.w	r2, r7, #16
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	fa92 f1a2 	rbit	r1, r2
 8003964:	f107 020c 	add.w	r2, r7, #12
 8003968:	6011      	str	r1, [r2, #0]
  return result;
 800396a:	f107 020c 	add.w	r2, r7, #12
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f042 0220 	orr.w	r2, r2, #32
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f002 021f 	and.w	r2, r2, #31
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d19e      	bne.n	80038ca <HAL_RCC_OscConfig+0xcfe>
 800398c:	e01e      	b.n	80039cc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e018      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0xe0c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000

080039dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b09e      	sub	sp, #120	; 0x78
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e162      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b90      	ldr	r3, [pc, #576]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0207 	and.w	r2, r3, #7
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d210      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	498d      	ldr	r1, [pc, #564]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 0207 	bic.w	r2, r3, #7
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b89      	ldr	r3, [pc, #548]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0207 	and.w	r2, r3, #7
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e14a      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4982      	ldr	r1, [pc, #520]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003a32:	4b82      	ldr	r3, [pc, #520]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80dc 	beq.w	8003c08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d13c      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xf6>
 8003a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xa6>
 8003a7c:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0xc6>
 8003a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a94:	663b      	str	r3, [r7, #96]	; 0x60
 8003a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a9e:	4b67      	ldr	r3, [pc, #412]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aa6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aaa:	fa92 f2a2 	rbit	r2, r2
 8003aae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ab2:	fab2 f282 	clz	r2, r2
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	f042 0220 	orr.w	r2, r2, #32
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f002 021f 	and.w	r2, r2, #31
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d17b      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0f3      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d13c      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x178>
 8003ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x128>
 8003afe:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e00f      	b.n	8003b24 <HAL_RCC_ClockConfig+0x148>
 8003b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40
 8003b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b20:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b28:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b2c:	fa92 f2a2 	rbit	r2, r2
 8003b30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d13a      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b2      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
 8003b54:	2302      	movs	r3, #2
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x1a0>
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e00d      	b.n	8003b98 <HAL_RCC_ClockConfig+0x1bc>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2202      	movs	r2, #2
 8003b9a:	61ba      	str	r2, [r7, #24]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	fa92 f2a2 	rbit	r2, r2
 8003ba2:	617a      	str	r2, [r7, #20]
  return result;
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	fab2 f282 	clz	r2, r2
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	f042 0220 	orr.w	r2, r2, #32
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	f002 021f 	and.w	r2, r2, #31
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e079      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bc6:	491d      	ldr	r1, [pc, #116]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 0203 	bic.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fa4e 	bl	8001078 <HAL_GetTick>
 8003bdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd fa4a 	bl	8001078 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e061      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 020c 	and.w	r2, r3, #12
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1eb      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0207 	and.w	r2, r3, #7
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d914      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 0207 	bic.w	r2, r3, #7
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_ClockConfig+0x25c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0207 	and.w	r2, r3, #7
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e040      	b.n	8003cba <HAL_RCC_ClockConfig+0x2de>
 8003c38:	40022000 	.word	0x40022000
 8003c3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	491d      	ldr	r1, [pc, #116]	; (8003cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c6a:	4916      	ldr	r1, [pc, #88]	; (8003cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c7e:	f000 f829 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003c82:	4601      	mov	r1, r0
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8c:	22f0      	movs	r2, #240	; 0xf0
 8003c8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	fa92 f2a2 	rbit	r2, r2
 8003c96:	60fa      	str	r2, [r7, #12]
  return result;
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	fab2 f282 	clz	r2, r2
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	40d3      	lsrs	r3, r2
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x2ec>)
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
 8003ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_RCC_ClockConfig+0x2f0>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_ClockConfig+0x2f4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd f99c 	bl	8000ff0 <HAL_InitTick>
  
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3778      	adds	r7, #120	; 0x78
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08005de4 	.word	0x08005de4
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	20000014 	.word	0x20000014

08003cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b08b      	sub	sp, #44	; 0x2c
 8003cd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d002      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x30>
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x36>
 8003d02:	e03c      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d04:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d06:	623b      	str	r3, [r7, #32]
      break;
 8003d08:	e03c      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	fa92 f2a2 	rbit	r2, r2
 8003d1c:	607a      	str	r2, [r7, #4]
  return result;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	40d3      	lsrs	r3, r2
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	220f      	movs	r2, #15
 8003d38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	fa92 f2a2 	rbit	r2, r2
 8003d40:	60fa      	str	r2, [r7, #12]
  return result;
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	fab2 f282 	clz	r2, r2
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	40d3      	lsrs	r3, r2
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6c:	e004      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a0c      	ldr	r2, [pc, #48]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	623b      	str	r3, [r7, #32]
      break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d80:	623b      	str	r3, [r7, #32]
      break;
 8003d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	372c      	adds	r7, #44	; 0x2c
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	007a1200 	.word	0x007a1200
 8003d9c:	08005dfc 	.word	0x08005dfc
 8003da0:	08005e0c 	.word	0x08005e0c
 8003da4:	003d0900 	.word	0x003d0900

08003da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000010 	.word	0x20000010

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003dc6:	f7ff ffef 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003dca:	4601      	mov	r1, r0
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dd4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003dd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	fa92 f2a2 	rbit	r2, r2
 8003de0:	603a      	str	r2, [r7, #0]
  return result;
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	fab2 f282 	clz	r2, r2
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	40d3      	lsrs	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08005df4 	.word	0x08005df4

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003e0a:	f7ff ffcd 	bl	8003da8 <HAL_RCC_GetHCLKFreq>
 8003e0e:	4601      	mov	r1, r0
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003e18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003e1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	fa92 f2a2 	rbit	r2, r2
 8003e24:	603a      	str	r2, [r7, #0]
  return result;
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	40d3      	lsrs	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08005df4 	.word	0x08005df4

08003e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b092      	sub	sp, #72	; 0x48
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80d4 	beq.w	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6c:	4b4e      	ldr	r3, [pc, #312]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10e      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	61d3      	str	r3, [r2, #28]
 8003e84:	4b48      	ldr	r3, [pc, #288]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e96:	4b45      	ldr	r3, [pc, #276]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d118      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea2:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eae:	f7fd f8e3 	bl	8001078 <HAL_GetTick>
 8003eb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb6:	f7fd f8df 	bl	8001078 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b64      	cmp	r3, #100	; 0x64
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e169      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8084 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d07c      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2301      	movs	r3, #1
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	461a      	mov	r2, r3
 8003f42:	2300      	movs	r3, #0
 8003f44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d04b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd f88f 	bl	8001078 <HAL_GetTick>
 8003f5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd f88b 	bl	8001078 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e113      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003f74:	2302      	movs	r3, #2
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	2302      	movs	r3, #2
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d108      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003fa2:	4b01      	ldr	r3, [pc, #4]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	e00d      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	10908100 	.word	0x10908100
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa93 f3a3 	rbit	r3, r3
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	613a      	str	r2, [r7, #16]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	fa92 f2a2 	rbit	r2, r2
 8003fce:	60fa      	str	r2, [r7, #12]
  return result;
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	fab2 f282 	clz	r2, r2
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f002 021f 	and.w	r2, r2, #31
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0b7      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fee:	496d      	ldr	r1, [pc, #436]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4a66      	ldr	r2, [pc, #408]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004020:	4960      	ldr	r1, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004022:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403e:	4959      	ldr	r1, [pc, #356]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004040:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405c:	4951      	ldr	r1, [pc, #324]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800407a:	494a      	ldr	r1, [pc, #296]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407c:	4b49      	ldr	r3, [pc, #292]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f023 0210 	bic.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004098:	4942      	ldr	r1, [pc, #264]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409a:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b6:	493b      	ldr	r1, [pc, #236]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b8:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f023 0220 	bic.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d4:	4933      	ldr	r1, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f2:	492c      	ldr	r1, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004110:	4924      	ldr	r1, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800412e:	491d      	ldr	r1, [pc, #116]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	4313      	orrs	r3, r2
 800413e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800414c:	4915      	ldr	r1, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	4313      	orrs	r3, r2
 800415c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800416a:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4313      	orrs	r3, r2
 800417a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	4313      	orrs	r3, r2
 8004198:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3748      	adds	r7, #72	; 0x48
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000

080041a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e09b      	b.n	80042f2 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d108      	bne.n	80041d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ca:	d009      	beq.n	80041e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
 80041d2:	e005      	b.n	80041e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fd80 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004220:	d902      	bls.n	8004228 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e002      	b.n	800422e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800422c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004236:	d007      	beq.n	8004248 <HAL_SPI_Init+0xa0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6852      	ldr	r2, [r2, #4]
 8004250:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800425c:	4311      	orrs	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	f002 0202 	and.w	r2, r2, #2
 8004266:	4311      	orrs	r1, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6952      	ldr	r2, [r2, #20]
 800426c:	f002 0201 	and.w	r2, r2, #1
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6992      	ldr	r2, [r2, #24]
 8004276:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	69d2      	ldr	r2, [r2, #28]
 8004280:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6a12      	ldr	r2, [r2, #32]
 800428a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800428e:	4311      	orrs	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004294:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6992      	ldr	r2, [r2, #24]
 80042a4:	0c12      	lsrs	r2, r2, #16
 80042a6:	f002 0104 	and.w	r1, r2, #4
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ae:	f002 0210 	and.w	r2, r2, #16
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042b8:	f002 0208 	and.w	r2, r2, #8
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80042c6:	4311      	orrs	r1, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	69d2      	ldr	r2, [r2, #28]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e049      	b.n	80043a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fd2f 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 faa9 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e04a      	b.n	8004456 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_TIM_Base_Start_IT+0xbc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d013      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_TIM_Base_Start_IT+0xc0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_TIM_Base_Start_IT+0xc4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1a      	ldr	r2, [pc, #104]	; (8004470 <HAL_TIM_Base_Start_IT+0xc8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a19      	ldr	r2, [pc, #100]	; (8004474 <HAL_TIM_Base_Start_IT+0xcc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d115      	bne.n	8004440 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <HAL_TIM_Base_Start_IT+0xd0>)
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d015      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0xaa>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442c:	d011      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e008      	b.n	8004452 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e000      	b.n	8004454 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40013400 	.word	0x40013400
 8004474:	40014000 	.word	0x40014000
 8004478:	00010007 	.word	0x00010007

0800447c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0202 	mvn.w	r2, #2
 80044a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9c8 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9ba 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f9cb 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0204 	mvn.w	r2, #4
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f99e 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f990 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f9a1 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b08      	cmp	r3, #8
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b08      	cmp	r3, #8
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0208 	mvn.w	r2, #8
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2204      	movs	r2, #4
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f974 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f966 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f977 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b10      	cmp	r3, #16
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0210 	mvn.w	r2, #16
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2208      	movs	r2, #8
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f94a 	bl	8004854 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f93c 	bl	8004840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f94d 	bl	8004868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0201 	mvn.w	r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f916 	bl	800482c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d10e      	bne.n	800462c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d107      	bne.n	800462c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fae6 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fad9 	bl	8004c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8fb 	bl	800487c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b20      	cmp	r3, #32
 8004692:	d10e      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f06f 0220 	mvn.w	r2, #32
 80046aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fa99 	bl	8004be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_ConfigClockSource+0x18>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e0a8      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x16a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d067      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x124>
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d80b      	bhi.n	800472a <HAL_TIM_ConfigClockSource+0x70>
 8004712:	2b10      	cmp	r3, #16
 8004714:	d073      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x144>
 8004716:	2b10      	cmp	r3, #16
 8004718:	d802      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x66>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d06f      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800471e:	e078      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004720:	2b20      	cmp	r3, #32
 8004722:	d06c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x144>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d06a      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004728:	e073      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800472a:	2b70      	cmp	r3, #112	; 0x70
 800472c:	d00d      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x90>
 800472e:	2b70      	cmp	r3, #112	; 0x70
 8004730:	d804      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x82>
 8004732:	2b50      	cmp	r3, #80	; 0x50
 8004734:	d033      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xe4>
 8004736:	2b60      	cmp	r3, #96	; 0x60
 8004738:	d041      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x104>
      break;
 800473a:	e06a      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d066      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0x156>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d017      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004748:	e063      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 f9a3 	bl	8004aa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
      break;
 8004776:	e04c      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f000 f98c 	bl	8004aa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479a:	609a      	str	r2, [r3, #8]
      break;
 800479c:	e039      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f900 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2150      	movs	r1, #80	; 0x50
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f959 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 80047bc:	e029      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f000 f91f 	bl	8004a0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2160      	movs	r1, #96	; 0x60
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f949 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 80047dc:	e019      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 f8e0 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f939 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 80047fc:	e009      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f930 	bl	8004a6e <TIM_ITRx_SetConfig>
        break;
 800480e:	e000      	b.n	8004812 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004810:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a39      	ldr	r2, [pc, #228]	; (8004998 <TIM_Base_SetConfig+0x108>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <TIM_Base_SetConfig+0x10c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <TIM_Base_SetConfig+0x108>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <TIM_Base_SetConfig+0x10c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_Base_SetConfig+0x104>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00f      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00b      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0xe8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d103      	bne.n	8004980 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	615a      	str	r2, [r3, #20]
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e063      	b.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40014000 	.word	0x40014000

08004be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e040      	b.n	8004cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fc f8c4 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2224      	movs	r2, #36	; 0x24
 8004c4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8c0 	bl	8004de4 <UART_SetConfig>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e022      	b.n	8004cb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa86 	bl	8005188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	6892      	ldr	r2, [r2, #8]
 8004c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb0d 	bl	80052cc <UART_CheckIdleState>
 8004cb2:	4603      	mov	r3, r0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	f040 8082 	bne.w	8004dda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <HAL_UART_Transmit+0x26>
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e07a      	b.n	8004ddc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_UART_Transmit+0x38>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e073      	b.n	8004ddc <HAL_UART_Transmit+0x120>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2221      	movs	r2, #33	; 0x21
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f9b5 	bl	8001078 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d108      	bne.n	8004d3c <HAL_UART_Transmit+0x80>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e003      	b.n	8004d44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d4c:	e02d      	b.n	8004daa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fb00 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e039      	b.n	8004ddc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7a:	b292      	uxth	r2, r2
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	3302      	adds	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e008      	b.n	8004d98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3301      	adds	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1cb      	bne.n	8004d4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2140      	movs	r1, #64	; 0x40
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 facc 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e005      	b.n	8004ddc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e16:	f023 030c 	bic.w	r3, r3, #12
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	6852      	ldr	r2, [r2, #4]
 8004e2a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68d2      	ldr	r2, [r2, #12]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4aad      	ldr	r2, [pc, #692]	; (8005114 <UART_SetConfig+0x330>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d121      	bne.n	8004ea8 <UART_SetConfig+0xc4>
 8004e64:	4bac      	ldr	r3, [pc, #688]	; (8005118 <UART_SetConfig+0x334>)
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d817      	bhi.n	8004ea0 <UART_SetConfig+0xbc>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x94>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e95 	.word	0x08004e95
 8004e80:	08004e9b 	.word	0x08004e9b
 8004e84:	08004e8f 	.word	0x08004e8f
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e0b2      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e0af      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004e94:	2304      	movs	r3, #4
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0ac      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e0a9      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	bf00      	nop
 8004ea6:	e0a5      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a9b      	ldr	r2, [pc, #620]	; (800511c <UART_SetConfig+0x338>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d123      	bne.n	8004efa <UART_SetConfig+0x116>
 8004eb2:	4b99      	ldr	r3, [pc, #612]	; (8005118 <UART_SetConfig+0x334>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d012      	beq.n	8004ee6 <UART_SetConfig+0x102>
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d802      	bhi.n	8004ecc <UART_SetConfig+0xe8>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <UART_SetConfig+0xf6>
 8004eca:	e012      	b.n	8004ef2 <UART_SetConfig+0x10e>
 8004ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed0:	d00c      	beq.n	8004eec <UART_SetConfig+0x108>
 8004ed2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0xfc>
 8004ed8:	e00b      	b.n	8004ef2 <UART_SetConfig+0x10e>
 8004eda:	2300      	movs	r3, #0
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e089      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e086      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ee6:	2304      	movs	r3, #4
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e083      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004eec:	2308      	movs	r3, #8
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e080      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	bf00      	nop
 8004ef8:	e07c      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a88      	ldr	r2, [pc, #544]	; (8005120 <UART_SetConfig+0x33c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d123      	bne.n	8004f4c <UART_SetConfig+0x168>
 8004f04:	4b84      	ldr	r3, [pc, #528]	; (8005118 <UART_SetConfig+0x334>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f10:	d012      	beq.n	8004f38 <UART_SetConfig+0x154>
 8004f12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f16:	d802      	bhi.n	8004f1e <UART_SetConfig+0x13a>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <UART_SetConfig+0x148>
 8004f1c:	e012      	b.n	8004f44 <UART_SetConfig+0x160>
 8004f1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f22:	d00c      	beq.n	8004f3e <UART_SetConfig+0x15a>
 8004f24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f28:	d003      	beq.n	8004f32 <UART_SetConfig+0x14e>
 8004f2a:	e00b      	b.n	8004f44 <UART_SetConfig+0x160>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e060      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f32:	2302      	movs	r3, #2
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e05d      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e05a      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e057      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f44:	2310      	movs	r3, #16
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	bf00      	nop
 8004f4a:	e053      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a74      	ldr	r2, [pc, #464]	; (8005124 <UART_SetConfig+0x340>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d123      	bne.n	8004f9e <UART_SetConfig+0x1ba>
 8004f56:	4b70      	ldr	r3, [pc, #448]	; (8005118 <UART_SetConfig+0x334>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f62:	d012      	beq.n	8004f8a <UART_SetConfig+0x1a6>
 8004f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f68:	d802      	bhi.n	8004f70 <UART_SetConfig+0x18c>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <UART_SetConfig+0x19a>
 8004f6e:	e012      	b.n	8004f96 <UART_SetConfig+0x1b2>
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f74:	d00c      	beq.n	8004f90 <UART_SetConfig+0x1ac>
 8004f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f7a:	d003      	beq.n	8004f84 <UART_SetConfig+0x1a0>
 8004f7c:	e00b      	b.n	8004f96 <UART_SetConfig+0x1b2>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e037      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f84:	2302      	movs	r3, #2
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e034      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e031      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f90:	2308      	movs	r3, #8
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e02e      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f96:	2310      	movs	r3, #16
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	bf00      	nop
 8004f9c:	e02a      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a61      	ldr	r2, [pc, #388]	; (8005128 <UART_SetConfig+0x344>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d123      	bne.n	8004ff0 <UART_SetConfig+0x20c>
 8004fa8:	4b5b      	ldr	r3, [pc, #364]	; (8005118 <UART_SetConfig+0x334>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb4:	d012      	beq.n	8004fdc <UART_SetConfig+0x1f8>
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fba:	d802      	bhi.n	8004fc2 <UART_SetConfig+0x1de>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <UART_SetConfig+0x1ec>
 8004fc0:	e012      	b.n	8004fe8 <UART_SetConfig+0x204>
 8004fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc6:	d00c      	beq.n	8004fe2 <UART_SetConfig+0x1fe>
 8004fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fcc:	d003      	beq.n	8004fd6 <UART_SetConfig+0x1f2>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x204>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e00e      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e008      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e005      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	bf00      	nop
 8004fee:	e001      	b.n	8004ff4 <UART_SetConfig+0x210>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffc:	d15d      	bne.n	80050ba <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8004ffe:	7ffb      	ldrb	r3, [r7, #31]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d828      	bhi.n	8005056 <UART_SetConfig+0x272>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x228>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	08005057 	.word	0x08005057
 800501c:	08005047 	.word	0x08005047
 8005020:	08005057 	.word	0x08005057
 8005024:	08005057 	.word	0x08005057
 8005028:	08005057 	.word	0x08005057
 800502c:	0800504f 	.word	0x0800504f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe fec6 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8005034:	61b8      	str	r0, [r7, #24]
        break;
 8005036:	e013      	b.n	8005060 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005038:	f7fe fee4 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <UART_SetConfig+0x348>)
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e00c      	b.n	8005060 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005046:	f7fe fe45 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 800504a:	61b8      	str	r0, [r7, #24]
        break;
 800504c:	e008      	b.n	8005060 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005052:	61bb      	str	r3, [r7, #24]
        break;
 8005054:	e004      	b.n	8005060 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	77bb      	strb	r3, [r7, #30]
        break;
 800505e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8085 	beq.w	8005172 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	005a      	lsls	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d916      	bls.n	80050b4 <UART_SetConfig+0x2d0>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508c:	d212      	bcs.n	80050b4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f023 030f 	bic.w	r3, r3, #15
 8005096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	89fa      	ldrh	r2, [r7, #14]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e05e      	b.n	8005172 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	77bb      	strb	r3, [r7, #30]
 80050b8:	e05b      	b.n	8005172 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d837      	bhi.n	8005130 <UART_SetConfig+0x34c>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0x2e4>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005131 	.word	0x08005131
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005131 	.word	0x08005131
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005131 	.word	0x08005131
 80050e8:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fe fe68 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 80050f0:	61b8      	str	r0, [r7, #24]
        break;
 80050f2:	e022      	b.n	800513a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fe fe86 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 80050f8:	61b8      	str	r0, [r7, #24]
        break;
 80050fa:	e01e      	b.n	800513a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <UART_SetConfig+0x348>)
 80050fe:	61bb      	str	r3, [r7, #24]
        break;
 8005100:	e01b      	b.n	800513a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fe fde7 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8005106:	61b8      	str	r0, [r7, #24]
        break;
 8005108:	e017      	b.n	800513a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e013      	b.n	800513a <UART_SetConfig+0x356>
 8005112:	bf00      	nop
 8005114:	40013800 	.word	0x40013800
 8005118:	40021000 	.word	0x40021000
 800511c:	40004400 	.word	0x40004400
 8005120:	40004800 	.word	0x40004800
 8005124:	40004c00 	.word	0x40004c00
 8005128:	40005000 	.word	0x40005000
 800512c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	77bb      	strb	r3, [r7, #30]
        break;
 8005138:	bf00      	nop
    }

    if (pclk != 0U)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d018      	beq.n	8005172 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	085a      	lsrs	r2, r3, #1
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b0f      	cmp	r3, #15
 800515a:	d908      	bls.n	800516e <UART_SetConfig+0x38a>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005162:	d204      	bcs.n	800516e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	60da      	str	r2, [r3, #12]
 800516c:	e001      	b.n	8005172 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800517e:	7fbb      	ldrb	r3, [r7, #30]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	6852      	ldr	r2, [r2, #4]
 80051a6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	6852      	ldr	r2, [r2, #4]
 80051c8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	6852      	ldr	r2, [r2, #4]
 80051ea:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	6852      	ldr	r2, [r2, #4]
 800520c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	6892      	ldr	r2, [r2, #8]
 800522e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	6892      	ldr	r2, [r2, #8]
 8005250:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	6852      	ldr	r2, [r2, #4]
 8005272:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005286:	d10a      	bne.n	800529e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	6852      	ldr	r2, [r2, #4]
 8005292:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052dc:	f7fb fecc 	bl	8001078 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d10e      	bne.n	800530e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f82d 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e023      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d10e      	bne.n	800533a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f817 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00d      	b.n	8005356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	e05e      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d05a      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005378:	f7fb fe7e 	bl	8001078 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d802      	bhi.n	800538e <UART_WaitOnFlagUntilTimeout+0x30>
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11b      	bne.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800539c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	6892      	ldr	r2, [r2, #8]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e043      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02c      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d124      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6892      	ldr	r2, [r2, #8]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2220      	movs	r2, #32
 8005412:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	401a      	ands	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d091      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800545e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005462:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	b29b      	uxth	r3, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	b29b      	uxth	r3, r3
 8005474:	4013      	ands	r3, r2
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800548c:	b084      	sub	sp, #16
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	f107 0014 	add.w	r0, r7, #20
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	b004      	add	sp, #16
 80054cc:	4770      	bx	lr
	...

080054d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80054d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005508 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054d4:	480d      	ldr	r0, [pc, #52]	; (800550c <LoopForever+0x6>)
  ldr r1, =_edata
 80054d6:	490e      	ldr	r1, [pc, #56]	; (8005510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054d8:	4a0e      	ldr	r2, [pc, #56]	; (8005514 <LoopForever+0xe>)
  movs r3, #0
 80054da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054dc:	e002      	b.n	80054e4 <LoopCopyDataInit>

080054de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054e2:	3304      	adds	r3, #4

080054e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054e8:	d3f9      	bcc.n	80054de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054ea:	4a0b      	ldr	r2, [pc, #44]	; (8005518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80054ec:	4c0b      	ldr	r4, [pc, #44]	; (800551c <LoopForever+0x16>)
  movs r3, #0
 80054ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054f0:	e001      	b.n	80054f6 <LoopFillZerobss>

080054f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054f4:	3204      	adds	r2, #4

080054f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054f8:	d3fb      	bcc.n	80054f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054fa:	f7fb fd51 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054fe:	f000 f817 	bl	8005530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005502:	f7fa febd 	bl	8000280 <main>

08005506 <LoopForever>:

LoopForever:
    b LoopForever
 8005506:	e7fe      	b.n	8005506 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005508:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800550c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005510:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005514:	08005e58 	.word	0x08005e58
  ldr r2, =_sbss
 8005518:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800551c:	20000570 	.word	0x20000570

08005520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005520:	e7fe      	b.n	8005520 <ADC1_2_IRQHandler>
	...

08005524 <__errno>:
 8005524:	4b01      	ldr	r3, [pc, #4]	; (800552c <__errno+0x8>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	2000001c 	.word	0x2000001c

08005530 <__libc_init_array>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0d      	ldr	r6, [pc, #52]	; (8005568 <__libc_init_array+0x38>)
 8005534:	4c0d      	ldr	r4, [pc, #52]	; (800556c <__libc_init_array+0x3c>)
 8005536:	1ba4      	subs	r4, r4, r6
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	2500      	movs	r5, #0
 800553c:	42a5      	cmp	r5, r4
 800553e:	d109      	bne.n	8005554 <__libc_init_array+0x24>
 8005540:	4e0b      	ldr	r6, [pc, #44]	; (8005570 <__libc_init_array+0x40>)
 8005542:	4c0c      	ldr	r4, [pc, #48]	; (8005574 <__libc_init_array+0x44>)
 8005544:	f000 fc3e 	bl	8005dc4 <_init>
 8005548:	1ba4      	subs	r4, r4, r6
 800554a:	10a4      	asrs	r4, r4, #2
 800554c:	2500      	movs	r5, #0
 800554e:	42a5      	cmp	r5, r4
 8005550:	d105      	bne.n	800555e <__libc_init_array+0x2e>
 8005552:	bd70      	pop	{r4, r5, r6, pc}
 8005554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005558:	4798      	blx	r3
 800555a:	3501      	adds	r5, #1
 800555c:	e7ee      	b.n	800553c <__libc_init_array+0xc>
 800555e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005562:	4798      	blx	r3
 8005564:	3501      	adds	r5, #1
 8005566:	e7f2      	b.n	800554e <__libc_init_array+0x1e>
 8005568:	08005e50 	.word	0x08005e50
 800556c:	08005e50 	.word	0x08005e50
 8005570:	08005e50 	.word	0x08005e50
 8005574:	08005e54 	.word	0x08005e54

08005578 <memset>:
 8005578:	4402      	add	r2, r0
 800557a:	4603      	mov	r3, r0
 800557c:	4293      	cmp	r3, r2
 800557e:	d100      	bne.n	8005582 <memset+0xa>
 8005580:	4770      	bx	lr
 8005582:	f803 1b01 	strb.w	r1, [r3], #1
 8005586:	e7f9      	b.n	800557c <memset+0x4>

08005588 <siprintf>:
 8005588:	b40e      	push	{r1, r2, r3}
 800558a:	b500      	push	{lr}
 800558c:	b09c      	sub	sp, #112	; 0x70
 800558e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005592:	ab1d      	add	r3, sp, #116	; 0x74
 8005594:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005598:	9002      	str	r0, [sp, #8]
 800559a:	9006      	str	r0, [sp, #24]
 800559c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055a0:	480a      	ldr	r0, [pc, #40]	; (80055cc <siprintf+0x44>)
 80055a2:	9104      	str	r1, [sp, #16]
 80055a4:	9107      	str	r1, [sp, #28]
 80055a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80055aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	a902      	add	r1, sp, #8
 80055b8:	f000 f866 	bl	8005688 <_svfiprintf_r>
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	b01c      	add	sp, #112	; 0x70
 80055c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c8:	b003      	add	sp, #12
 80055ca:	4770      	bx	lr
 80055cc:	2000001c 	.word	0x2000001c

080055d0 <__ssputs_r>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	688e      	ldr	r6, [r1, #8]
 80055d6:	429e      	cmp	r6, r3
 80055d8:	4682      	mov	sl, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4691      	mov	r9, r2
 80055de:	4698      	mov	r8, r3
 80055e0:	d835      	bhi.n	800564e <__ssputs_r+0x7e>
 80055e2:	898a      	ldrh	r2, [r1, #12]
 80055e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e8:	d031      	beq.n	800564e <__ssputs_r+0x7e>
 80055ea:	6825      	ldr	r5, [r4, #0]
 80055ec:	6909      	ldr	r1, [r1, #16]
 80055ee:	1a6f      	subs	r7, r5, r1
 80055f0:	6965      	ldr	r5, [r4, #20]
 80055f2:	2302      	movs	r3, #2
 80055f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80055fc:	f108 0301 	add.w	r3, r8, #1
 8005600:	443b      	add	r3, r7
 8005602:	429d      	cmp	r5, r3
 8005604:	bf38      	it	cc
 8005606:	461d      	movcc	r5, r3
 8005608:	0553      	lsls	r3, r2, #21
 800560a:	d531      	bpl.n	8005670 <__ssputs_r+0xa0>
 800560c:	4629      	mov	r1, r5
 800560e:	f000 fb39 	bl	8005c84 <_malloc_r>
 8005612:	4606      	mov	r6, r0
 8005614:	b950      	cbnz	r0, 800562c <__ssputs_r+0x5c>
 8005616:	230c      	movs	r3, #12
 8005618:	f8ca 3000 	str.w	r3, [sl]
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562c:	463a      	mov	r2, r7
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	f000 fab4 	bl	8005b9c <memcpy>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	6126      	str	r6, [r4, #16]
 8005642:	6165      	str	r5, [r4, #20]
 8005644:	443e      	add	r6, r7
 8005646:	1bed      	subs	r5, r5, r7
 8005648:	6026      	str	r6, [r4, #0]
 800564a:	60a5      	str	r5, [r4, #8]
 800564c:	4646      	mov	r6, r8
 800564e:	4546      	cmp	r6, r8
 8005650:	bf28      	it	cs
 8005652:	4646      	movcs	r6, r8
 8005654:	4632      	mov	r2, r6
 8005656:	4649      	mov	r1, r9
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	f000 faaa 	bl	8005bb2 <memmove>
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	1b9b      	subs	r3, r3, r6
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	441e      	add	r6, r3
 8005668:	6026      	str	r6, [r4, #0]
 800566a:	2000      	movs	r0, #0
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	462a      	mov	r2, r5
 8005672:	f000 fb65 	bl	8005d40 <_realloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	2800      	cmp	r0, #0
 800567a:	d1e1      	bne.n	8005640 <__ssputs_r+0x70>
 800567c:	6921      	ldr	r1, [r4, #16]
 800567e:	4650      	mov	r0, sl
 8005680:	f000 fab2 	bl	8005be8 <_free_r>
 8005684:	e7c7      	b.n	8005616 <__ssputs_r+0x46>
	...

08005688 <_svfiprintf_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	b09d      	sub	sp, #116	; 0x74
 800568e:	4680      	mov	r8, r0
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	898b      	ldrh	r3, [r1, #12]
 8005694:	061c      	lsls	r4, r3, #24
 8005696:	460d      	mov	r5, r1
 8005698:	4616      	mov	r6, r2
 800569a:	d50f      	bpl.n	80056bc <_svfiprintf_r+0x34>
 800569c:	690b      	ldr	r3, [r1, #16]
 800569e:	b96b      	cbnz	r3, 80056bc <_svfiprintf_r+0x34>
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	f000 faef 	bl	8005c84 <_malloc_r>
 80056a6:	6028      	str	r0, [r5, #0]
 80056a8:	6128      	str	r0, [r5, #16]
 80056aa:	b928      	cbnz	r0, 80056b8 <_svfiprintf_r+0x30>
 80056ac:	230c      	movs	r3, #12
 80056ae:	f8c8 3000 	str.w	r3, [r8]
 80056b2:	f04f 30ff 	mov.w	r0, #4294967295
 80056b6:	e0c5      	b.n	8005844 <_svfiprintf_r+0x1bc>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	616b      	str	r3, [r5, #20]
 80056bc:	2300      	movs	r3, #0
 80056be:	9309      	str	r3, [sp, #36]	; 0x24
 80056c0:	2320      	movs	r3, #32
 80056c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056c6:	2330      	movs	r3, #48	; 0x30
 80056c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056cc:	f04f 0b01 	mov.w	fp, #1
 80056d0:	4637      	mov	r7, r6
 80056d2:	463c      	mov	r4, r7
 80056d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d13c      	bne.n	8005756 <_svfiprintf_r+0xce>
 80056dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80056e0:	d00b      	beq.n	80056fa <_svfiprintf_r+0x72>
 80056e2:	4653      	mov	r3, sl
 80056e4:	4632      	mov	r2, r6
 80056e6:	4629      	mov	r1, r5
 80056e8:	4640      	mov	r0, r8
 80056ea:	f7ff ff71 	bl	80055d0 <__ssputs_r>
 80056ee:	3001      	adds	r0, #1
 80056f0:	f000 80a3 	beq.w	800583a <_svfiprintf_r+0x1b2>
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	4453      	add	r3, sl
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	783b      	ldrb	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 809c 	beq.w	800583a <_svfiprintf_r+0x1b2>
 8005702:	2300      	movs	r3, #0
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	9205      	str	r2, [sp, #20]
 800570e:	9306      	str	r3, [sp, #24]
 8005710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005714:	931a      	str	r3, [sp, #104]	; 0x68
 8005716:	2205      	movs	r2, #5
 8005718:	7821      	ldrb	r1, [r4, #0]
 800571a:	4850      	ldr	r0, [pc, #320]	; (800585c <_svfiprintf_r+0x1d4>)
 800571c:	f7fa fd60 	bl	80001e0 <memchr>
 8005720:	1c67      	adds	r7, r4, #1
 8005722:	9b04      	ldr	r3, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xd6>
 8005726:	06d9      	lsls	r1, r3, #27
 8005728:	bf44      	itt	mi
 800572a:	2220      	movmi	r2, #32
 800572c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005730:	071a      	lsls	r2, r3, #28
 8005732:	bf44      	itt	mi
 8005734:	222b      	movmi	r2, #43	; 0x2b
 8005736:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800573a:	7822      	ldrb	r2, [r4, #0]
 800573c:	2a2a      	cmp	r2, #42	; 0x2a
 800573e:	d016      	beq.n	800576e <_svfiprintf_r+0xe6>
 8005740:	9a07      	ldr	r2, [sp, #28]
 8005742:	2100      	movs	r1, #0
 8005744:	200a      	movs	r0, #10
 8005746:	4627      	mov	r7, r4
 8005748:	3401      	adds	r4, #1
 800574a:	783b      	ldrb	r3, [r7, #0]
 800574c:	3b30      	subs	r3, #48	; 0x30
 800574e:	2b09      	cmp	r3, #9
 8005750:	d951      	bls.n	80057f6 <_svfiprintf_r+0x16e>
 8005752:	b1c9      	cbz	r1, 8005788 <_svfiprintf_r+0x100>
 8005754:	e011      	b.n	800577a <_svfiprintf_r+0xf2>
 8005756:	2b25      	cmp	r3, #37	; 0x25
 8005758:	d0c0      	beq.n	80056dc <_svfiprintf_r+0x54>
 800575a:	4627      	mov	r7, r4
 800575c:	e7b9      	b.n	80056d2 <_svfiprintf_r+0x4a>
 800575e:	4a3f      	ldr	r2, [pc, #252]	; (800585c <_svfiprintf_r+0x1d4>)
 8005760:	1a80      	subs	r0, r0, r2
 8005762:	fa0b f000 	lsl.w	r0, fp, r0
 8005766:	4318      	orrs	r0, r3
 8005768:	9004      	str	r0, [sp, #16]
 800576a:	463c      	mov	r4, r7
 800576c:	e7d3      	b.n	8005716 <_svfiprintf_r+0x8e>
 800576e:	9a03      	ldr	r2, [sp, #12]
 8005770:	1d11      	adds	r1, r2, #4
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2a00      	cmp	r2, #0
 8005778:	db01      	blt.n	800577e <_svfiprintf_r+0xf6>
 800577a:	9207      	str	r2, [sp, #28]
 800577c:	e004      	b.n	8005788 <_svfiprintf_r+0x100>
 800577e:	4252      	negs	r2, r2
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	9207      	str	r2, [sp, #28]
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	783b      	ldrb	r3, [r7, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d10e      	bne.n	80057ac <_svfiprintf_r+0x124>
 800578e:	787b      	ldrb	r3, [r7, #1]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	f107 0101 	add.w	r1, r7, #1
 8005796:	d132      	bne.n	80057fe <_svfiprintf_r+0x176>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	9203      	str	r2, [sp, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bfb8      	it	lt
 80057a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a8:	3702      	adds	r7, #2
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	4c2c      	ldr	r4, [pc, #176]	; (8005860 <_svfiprintf_r+0x1d8>)
 80057ae:	7839      	ldrb	r1, [r7, #0]
 80057b0:	2203      	movs	r2, #3
 80057b2:	4620      	mov	r0, r4
 80057b4:	f7fa fd14 	bl	80001e0 <memchr>
 80057b8:	b138      	cbz	r0, 80057ca <_svfiprintf_r+0x142>
 80057ba:	2340      	movs	r3, #64	; 0x40
 80057bc:	1b00      	subs	r0, r0, r4
 80057be:	fa03 f000 	lsl.w	r0, r3, r0
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	4303      	orrs	r3, r0
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	3701      	adds	r7, #1
 80057ca:	7839      	ldrb	r1, [r7, #0]
 80057cc:	4825      	ldr	r0, [pc, #148]	; (8005864 <_svfiprintf_r+0x1dc>)
 80057ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d2:	2206      	movs	r2, #6
 80057d4:	1c7e      	adds	r6, r7, #1
 80057d6:	f7fa fd03 	bl	80001e0 <memchr>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d035      	beq.n	800584a <_svfiprintf_r+0x1c2>
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <_svfiprintf_r+0x1e0>)
 80057e0:	b9fb      	cbnz	r3, 8005822 <_svfiprintf_r+0x19a>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	3307      	adds	r3, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	3308      	adds	r3, #8
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	444b      	add	r3, r9
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	e76c      	b.n	80056d0 <_svfiprintf_r+0x48>
 80057f6:	fb00 3202 	mla	r2, r0, r2, r3
 80057fa:	2101      	movs	r1, #1
 80057fc:	e7a3      	b.n	8005746 <_svfiprintf_r+0xbe>
 80057fe:	2300      	movs	r3, #0
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	4618      	mov	r0, r3
 8005804:	240a      	movs	r4, #10
 8005806:	460f      	mov	r7, r1
 8005808:	3101      	adds	r1, #1
 800580a:	783a      	ldrb	r2, [r7, #0]
 800580c:	3a30      	subs	r2, #48	; 0x30
 800580e:	2a09      	cmp	r2, #9
 8005810:	d903      	bls.n	800581a <_svfiprintf_r+0x192>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ca      	beq.n	80057ac <_svfiprintf_r+0x124>
 8005816:	9005      	str	r0, [sp, #20]
 8005818:	e7c8      	b.n	80057ac <_svfiprintf_r+0x124>
 800581a:	fb04 2000 	mla	r0, r4, r0, r2
 800581e:	2301      	movs	r3, #1
 8005820:	e7f1      	b.n	8005806 <_svfiprintf_r+0x17e>
 8005822:	ab03      	add	r3, sp, #12
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	462a      	mov	r2, r5
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <_svfiprintf_r+0x1e4>)
 800582a:	a904      	add	r1, sp, #16
 800582c:	4640      	mov	r0, r8
 800582e:	f3af 8000 	nop.w
 8005832:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005836:	4681      	mov	r9, r0
 8005838:	d1d9      	bne.n	80057ee <_svfiprintf_r+0x166>
 800583a:	89ab      	ldrh	r3, [r5, #12]
 800583c:	065b      	lsls	r3, r3, #25
 800583e:	f53f af38 	bmi.w	80056b2 <_svfiprintf_r+0x2a>
 8005842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005844:	b01d      	add	sp, #116	; 0x74
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	ab03      	add	r3, sp, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	462a      	mov	r2, r5
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <_svfiprintf_r+0x1e4>)
 8005852:	a904      	add	r1, sp, #16
 8005854:	4640      	mov	r0, r8
 8005856:	f000 f881 	bl	800595c <_printf_i>
 800585a:	e7ea      	b.n	8005832 <_svfiprintf_r+0x1aa>
 800585c:	08005e1c 	.word	0x08005e1c
 8005860:	08005e22 	.word	0x08005e22
 8005864:	08005e26 	.word	0x08005e26
 8005868:	00000000 	.word	0x00000000
 800586c:	080055d1 	.word	0x080055d1

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4691      	mov	r9, r2
 8005876:	461f      	mov	r7, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005880:	4293      	cmp	r3, r2
 8005882:	bfb8      	it	lt
 8005884:	4613      	movlt	r3, r2
 8005886:	f8c9 3000 	str.w	r3, [r9]
 800588a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800588e:	4606      	mov	r6, r0
 8005890:	460c      	mov	r4, r1
 8005892:	b112      	cbz	r2, 800589a <_printf_common+0x2a>
 8005894:	3301      	adds	r3, #1
 8005896:	f8c9 3000 	str.w	r3, [r9]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	0699      	lsls	r1, r3, #26
 800589e:	bf42      	ittt	mi
 80058a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058a4:	3302      	addmi	r3, #2
 80058a6:	f8c9 3000 	strmi.w	r3, [r9]
 80058aa:	6825      	ldr	r5, [r4, #0]
 80058ac:	f015 0506 	ands.w	r5, r5, #6
 80058b0:	d107      	bne.n	80058c2 <_printf_common+0x52>
 80058b2:	f104 0a19 	add.w	sl, r4, #25
 80058b6:	68e3      	ldr	r3, [r4, #12]
 80058b8:	f8d9 2000 	ldr.w	r2, [r9]
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	429d      	cmp	r5, r3
 80058c0:	db29      	blt.n	8005916 <_printf_common+0xa6>
 80058c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	3300      	adds	r3, #0
 80058ca:	bf18      	it	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	0692      	lsls	r2, r2, #26
 80058d0:	d42e      	bmi.n	8005930 <_printf_common+0xc0>
 80058d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d6:	4639      	mov	r1, r7
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	3001      	adds	r0, #1
 80058de:	d021      	beq.n	8005924 <_printf_common+0xb4>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	68e5      	ldr	r5, [r4, #12]
 80058e4:	f8d9 2000 	ldr.w	r2, [r9]
 80058e8:	f003 0306 	and.w	r3, r3, #6
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	bf08      	it	eq
 80058f0:	1aad      	subeq	r5, r5, r2
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	bf0c      	ite	eq
 80058f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058fc:	2500      	movne	r5, #0
 80058fe:	4293      	cmp	r3, r2
 8005900:	bfc4      	itt	gt
 8005902:	1a9b      	subgt	r3, r3, r2
 8005904:	18ed      	addgt	r5, r5, r3
 8005906:	f04f 0900 	mov.w	r9, #0
 800590a:	341a      	adds	r4, #26
 800590c:	454d      	cmp	r5, r9
 800590e:	d11b      	bne.n	8005948 <_printf_common+0xd8>
 8005910:	2000      	movs	r0, #0
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	2301      	movs	r3, #1
 8005918:	4652      	mov	r2, sl
 800591a:	4639      	mov	r1, r7
 800591c:	4630      	mov	r0, r6
 800591e:	47c0      	blx	r8
 8005920:	3001      	adds	r0, #1
 8005922:	d103      	bne.n	800592c <_printf_common+0xbc>
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	3501      	adds	r5, #1
 800592e:	e7c2      	b.n	80058b6 <_printf_common+0x46>
 8005930:	18e1      	adds	r1, r4, r3
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	2030      	movs	r0, #48	; 0x30
 8005936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800593a:	4422      	add	r2, r4
 800593c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005944:	3302      	adds	r3, #2
 8005946:	e7c4      	b.n	80058d2 <_printf_common+0x62>
 8005948:	2301      	movs	r3, #1
 800594a:	4622      	mov	r2, r4
 800594c:	4639      	mov	r1, r7
 800594e:	4630      	mov	r0, r6
 8005950:	47c0      	blx	r8
 8005952:	3001      	adds	r0, #1
 8005954:	d0e6      	beq.n	8005924 <_printf_common+0xb4>
 8005956:	f109 0901 	add.w	r9, r9, #1
 800595a:	e7d7      	b.n	800590c <_printf_common+0x9c>

0800595c <_printf_i>:
 800595c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005960:	4617      	mov	r7, r2
 8005962:	7e0a      	ldrb	r2, [r1, #24]
 8005964:	b085      	sub	sp, #20
 8005966:	2a6e      	cmp	r2, #110	; 0x6e
 8005968:	4698      	mov	r8, r3
 800596a:	4606      	mov	r6, r0
 800596c:	460c      	mov	r4, r1
 800596e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005970:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005974:	f000 80bc 	beq.w	8005af0 <_printf_i+0x194>
 8005978:	d81a      	bhi.n	80059b0 <_printf_i+0x54>
 800597a:	2a63      	cmp	r2, #99	; 0x63
 800597c:	d02e      	beq.n	80059dc <_printf_i+0x80>
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x3a>
 8005980:	2a00      	cmp	r2, #0
 8005982:	f000 80c8 	beq.w	8005b16 <_printf_i+0x1ba>
 8005986:	2a58      	cmp	r2, #88	; 0x58
 8005988:	f000 808a 	beq.w	8005aa0 <_printf_i+0x144>
 800598c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005990:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005994:	e02a      	b.n	80059ec <_printf_i+0x90>
 8005996:	2a64      	cmp	r2, #100	; 0x64
 8005998:	d001      	beq.n	800599e <_printf_i+0x42>
 800599a:	2a69      	cmp	r2, #105	; 0x69
 800599c:	d1f6      	bne.n	800598c <_printf_i+0x30>
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80059a6:	d023      	beq.n	80059f0 <_printf_i+0x94>
 80059a8:	1d11      	adds	r1, r2, #4
 80059aa:	6019      	str	r1, [r3, #0]
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	e027      	b.n	8005a00 <_printf_i+0xa4>
 80059b0:	2a73      	cmp	r2, #115	; 0x73
 80059b2:	f000 80b4 	beq.w	8005b1e <_printf_i+0x1c2>
 80059b6:	d808      	bhi.n	80059ca <_printf_i+0x6e>
 80059b8:	2a6f      	cmp	r2, #111	; 0x6f
 80059ba:	d02a      	beq.n	8005a12 <_printf_i+0xb6>
 80059bc:	2a70      	cmp	r2, #112	; 0x70
 80059be:	d1e5      	bne.n	800598c <_printf_i+0x30>
 80059c0:	680a      	ldr	r2, [r1, #0]
 80059c2:	f042 0220 	orr.w	r2, r2, #32
 80059c6:	600a      	str	r2, [r1, #0]
 80059c8:	e003      	b.n	80059d2 <_printf_i+0x76>
 80059ca:	2a75      	cmp	r2, #117	; 0x75
 80059cc:	d021      	beq.n	8005a12 <_printf_i+0xb6>
 80059ce:	2a78      	cmp	r2, #120	; 0x78
 80059d0:	d1dc      	bne.n	800598c <_printf_i+0x30>
 80059d2:	2278      	movs	r2, #120	; 0x78
 80059d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80059d8:	496e      	ldr	r1, [pc, #440]	; (8005b94 <_printf_i+0x238>)
 80059da:	e064      	b.n	8005aa6 <_printf_i+0x14a>
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80059e2:	1d11      	adds	r1, r2, #4
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0a3      	b.n	8005b38 <_printf_i+0x1dc>
 80059f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80059f4:	f102 0104 	add.w	r1, r2, #4
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	d0d7      	beq.n	80059ac <_printf_i+0x50>
 80059fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da03      	bge.n	8005a0c <_printf_i+0xb0>
 8005a04:	222d      	movs	r2, #45	; 0x2d
 8005a06:	425b      	negs	r3, r3
 8005a08:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a0c:	4962      	ldr	r1, [pc, #392]	; (8005b98 <_printf_i+0x23c>)
 8005a0e:	220a      	movs	r2, #10
 8005a10:	e017      	b.n	8005a42 <_printf_i+0xe6>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a1a:	d003      	beq.n	8005a24 <_printf_i+0xc8>
 8005a1c:	1d08      	adds	r0, r1, #4
 8005a1e:	6018      	str	r0, [r3, #0]
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	e006      	b.n	8005a32 <_printf_i+0xd6>
 8005a24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a28:	f101 0004 	add.w	r0, r1, #4
 8005a2c:	6018      	str	r0, [r3, #0]
 8005a2e:	d0f7      	beq.n	8005a20 <_printf_i+0xc4>
 8005a30:	880b      	ldrh	r3, [r1, #0]
 8005a32:	4959      	ldr	r1, [pc, #356]	; (8005b98 <_printf_i+0x23c>)
 8005a34:	2a6f      	cmp	r2, #111	; 0x6f
 8005a36:	bf14      	ite	ne
 8005a38:	220a      	movne	r2, #10
 8005a3a:	2208      	moveq	r2, #8
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005a42:	6865      	ldr	r5, [r4, #4]
 8005a44:	60a5      	str	r5, [r4, #8]
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	f2c0 809c 	blt.w	8005b84 <_printf_i+0x228>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	f020 0004 	bic.w	r0, r0, #4
 8005a52:	6020      	str	r0, [r4, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d13f      	bne.n	8005ad8 <_printf_i+0x17c>
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	f040 8095 	bne.w	8005b88 <_printf_i+0x22c>
 8005a5e:	4675      	mov	r5, lr
 8005a60:	2a08      	cmp	r2, #8
 8005a62:	d10b      	bne.n	8005a7c <_printf_i+0x120>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d508      	bpl.n	8005a7c <_printf_i+0x120>
 8005a6a:	6923      	ldr	r3, [r4, #16]
 8005a6c:	6862      	ldr	r2, [r4, #4]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bfde      	ittt	le
 8005a72:	2330      	movle	r3, #48	; 0x30
 8005a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a7c:	ebae 0305 	sub.w	r3, lr, r5
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	f8cd 8000 	str.w	r8, [sp]
 8005a86:	463b      	mov	r3, r7
 8005a88:	aa03      	add	r2, sp, #12
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff feef 	bl	8005870 <_printf_common>
 8005a92:	3001      	adds	r0, #1
 8005a94:	d155      	bne.n	8005b42 <_printf_i+0x1e6>
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	b005      	add	sp, #20
 8005a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aa0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005aa4:	493c      	ldr	r1, [pc, #240]	; (8005b98 <_printf_i+0x23c>)
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005aae:	f100 0504 	add.w	r5, r0, #4
 8005ab2:	601d      	str	r5, [r3, #0]
 8005ab4:	d001      	beq.n	8005aba <_printf_i+0x15e>
 8005ab6:	6803      	ldr	r3, [r0, #0]
 8005ab8:	e002      	b.n	8005ac0 <_printf_i+0x164>
 8005aba:	0655      	lsls	r5, r2, #25
 8005abc:	d5fb      	bpl.n	8005ab6 <_printf_i+0x15a>
 8005abe:	8803      	ldrh	r3, [r0, #0]
 8005ac0:	07d0      	lsls	r0, r2, #31
 8005ac2:	bf44      	itt	mi
 8005ac4:	f042 0220 	orrmi.w	r2, r2, #32
 8005ac8:	6022      	strmi	r2, [r4, #0]
 8005aca:	b91b      	cbnz	r3, 8005ad4 <_printf_i+0x178>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f022 0220 	bic.w	r2, r2, #32
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	e7b1      	b.n	8005a3c <_printf_i+0xe0>
 8005ad8:	4675      	mov	r5, lr
 8005ada:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ade:	fb02 3310 	mls	r3, r2, r0, r3
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1f5      	bne.n	8005ada <_printf_i+0x17e>
 8005aee:	e7b7      	b.n	8005a60 <_printf_i+0x104>
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	6949      	ldr	r1, [r1, #20]
 8005af6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005afa:	d004      	beq.n	8005b06 <_printf_i+0x1aa>
 8005afc:	1d10      	adds	r0, r2, #4
 8005afe:	6018      	str	r0, [r3, #0]
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	e007      	b.n	8005b16 <_printf_i+0x1ba>
 8005b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b0a:	f102 0004 	add.w	r0, r2, #4
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	6813      	ldr	r3, [r2, #0]
 8005b12:	d0f6      	beq.n	8005b02 <_printf_i+0x1a6>
 8005b14:	8019      	strh	r1, [r3, #0]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	4675      	mov	r5, lr
 8005b1c:	e7b1      	b.n	8005a82 <_printf_i+0x126>
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	1d11      	adds	r1, r2, #4
 8005b22:	6019      	str	r1, [r3, #0]
 8005b24:	6815      	ldr	r5, [r2, #0]
 8005b26:	6862      	ldr	r2, [r4, #4]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fa fb58 	bl	80001e0 <memchr>
 8005b30:	b108      	cbz	r0, 8005b36 <_printf_i+0x1da>
 8005b32:	1b40      	subs	r0, r0, r5
 8005b34:	6060      	str	r0, [r4, #4]
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	e79f      	b.n	8005a82 <_printf_i+0x126>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	462a      	mov	r2, r5
 8005b46:	4639      	mov	r1, r7
 8005b48:	4630      	mov	r0, r6
 8005b4a:	47c0      	blx	r8
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d0a2      	beq.n	8005a96 <_printf_i+0x13a>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	d507      	bpl.n	8005b66 <_printf_i+0x20a>
 8005b56:	2500      	movs	r5, #0
 8005b58:	f104 0919 	add.w	r9, r4, #25
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	9a03      	ldr	r2, [sp, #12]
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	429d      	cmp	r5, r3
 8005b64:	db05      	blt.n	8005b72 <_printf_i+0x216>
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	4298      	cmp	r0, r3
 8005b6c:	bfb8      	it	lt
 8005b6e:	4618      	movlt	r0, r3
 8005b70:	e793      	b.n	8005a9a <_printf_i+0x13e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	464a      	mov	r2, r9
 8005b76:	4639      	mov	r1, r7
 8005b78:	4630      	mov	r0, r6
 8005b7a:	47c0      	blx	r8
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d08a      	beq.n	8005a96 <_printf_i+0x13a>
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7eb      	b.n	8005b5c <_printf_i+0x200>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1a7      	bne.n	8005ad8 <_printf_i+0x17c>
 8005b88:	780b      	ldrb	r3, [r1, #0]
 8005b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b92:	e765      	b.n	8005a60 <_printf_i+0x104>
 8005b94:	08005e3e 	.word	0x08005e3e
 8005b98:	08005e2d 	.word	0x08005e2d

08005b9c <memcpy>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	1e43      	subs	r3, r0, #1
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	d100      	bne.n	8005ba8 <memcpy+0xc>
 8005ba6:	bd10      	pop	{r4, pc}
 8005ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb0:	e7f7      	b.n	8005ba2 <memcpy+0x6>

08005bb2 <memmove>:
 8005bb2:	4288      	cmp	r0, r1
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	eb01 0302 	add.w	r3, r1, r2
 8005bba:	d803      	bhi.n	8005bc4 <memmove+0x12>
 8005bbc:	1e42      	subs	r2, r0, #1
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	d10c      	bne.n	8005bdc <memmove+0x2a>
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	4298      	cmp	r0, r3
 8005bc6:	d2f9      	bcs.n	8005bbc <memmove+0xa>
 8005bc8:	1881      	adds	r1, r0, r2
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	42d3      	cmn	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memmove+0x20>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bd6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005bda:	e7f7      	b.n	8005bcc <memmove+0x1a>
 8005bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005be4:	e7eb      	b.n	8005bbe <memmove+0xc>
	...

08005be8 <_free_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4605      	mov	r5, r0
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d045      	beq.n	8005c7c <_free_r+0x94>
 8005bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf4:	1f0c      	subs	r4, r1, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bfb8      	it	lt
 8005bfa:	18e4      	addlt	r4, r4, r3
 8005bfc:	f000 f8d6 	bl	8005dac <__malloc_lock>
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <_free_r+0x98>)
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	4610      	mov	r0, r2
 8005c06:	b933      	cbnz	r3, 8005c16 <_free_r+0x2e>
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	6014      	str	r4, [r2, #0]
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c12:	f000 b8cc 	b.w	8005dae <__malloc_unlock>
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	d90c      	bls.n	8005c34 <_free_r+0x4c>
 8005c1a:	6821      	ldr	r1, [r4, #0]
 8005c1c:	1862      	adds	r2, r4, r1
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	bf04      	itt	eq
 8005c22:	681a      	ldreq	r2, [r3, #0]
 8005c24:	685b      	ldreq	r3, [r3, #4]
 8005c26:	6063      	str	r3, [r4, #4]
 8005c28:	bf04      	itt	eq
 8005c2a:	1852      	addeq	r2, r2, r1
 8005c2c:	6022      	streq	r2, [r4, #0]
 8005c2e:	6004      	str	r4, [r0, #0]
 8005c30:	e7ec      	b.n	8005c0c <_free_r+0x24>
 8005c32:	4613      	mov	r3, r2
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	b10a      	cbz	r2, 8005c3c <_free_r+0x54>
 8005c38:	42a2      	cmp	r2, r4
 8005c3a:	d9fa      	bls.n	8005c32 <_free_r+0x4a>
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	1858      	adds	r0, r3, r1
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d10b      	bne.n	8005c5c <_free_r+0x74>
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	4401      	add	r1, r0
 8005c48:	1858      	adds	r0, r3, r1
 8005c4a:	4282      	cmp	r2, r0
 8005c4c:	6019      	str	r1, [r3, #0]
 8005c4e:	d1dd      	bne.n	8005c0c <_free_r+0x24>
 8005c50:	6810      	ldr	r0, [r2, #0]
 8005c52:	6852      	ldr	r2, [r2, #4]
 8005c54:	605a      	str	r2, [r3, #4]
 8005c56:	4401      	add	r1, r0
 8005c58:	6019      	str	r1, [r3, #0]
 8005c5a:	e7d7      	b.n	8005c0c <_free_r+0x24>
 8005c5c:	d902      	bls.n	8005c64 <_free_r+0x7c>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	e7d3      	b.n	8005c0c <_free_r+0x24>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	1821      	adds	r1, r4, r0
 8005c68:	428a      	cmp	r2, r1
 8005c6a:	bf04      	itt	eq
 8005c6c:	6811      	ldreq	r1, [r2, #0]
 8005c6e:	6852      	ldreq	r2, [r2, #4]
 8005c70:	6062      	str	r2, [r4, #4]
 8005c72:	bf04      	itt	eq
 8005c74:	1809      	addeq	r1, r1, r0
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	605c      	str	r4, [r3, #4]
 8005c7a:	e7c7      	b.n	8005c0c <_free_r+0x24>
 8005c7c:	bd38      	pop	{r3, r4, r5, pc}
 8005c7e:	bf00      	nop
 8005c80:	200000a4 	.word	0x200000a4

08005c84 <_malloc_r>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	1ccd      	adds	r5, r1, #3
 8005c88:	f025 0503 	bic.w	r5, r5, #3
 8005c8c:	3508      	adds	r5, #8
 8005c8e:	2d0c      	cmp	r5, #12
 8005c90:	bf38      	it	cc
 8005c92:	250c      	movcc	r5, #12
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	4606      	mov	r6, r0
 8005c98:	db01      	blt.n	8005c9e <_malloc_r+0x1a>
 8005c9a:	42a9      	cmp	r1, r5
 8005c9c:	d903      	bls.n	8005ca6 <_malloc_r+0x22>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	6033      	str	r3, [r6, #0]
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
 8005ca6:	f000 f881 	bl	8005dac <__malloc_lock>
 8005caa:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <_malloc_r+0xb4>)
 8005cac:	6814      	ldr	r4, [r2, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	b991      	cbnz	r1, 8005cd8 <_malloc_r+0x54>
 8005cb2:	4c22      	ldr	r4, [pc, #136]	; (8005d3c <_malloc_r+0xb8>)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	b91b      	cbnz	r3, 8005cc0 <_malloc_r+0x3c>
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 f867 	bl	8005d8c <_sbrk_r>
 8005cbe:	6020      	str	r0, [r4, #0]
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f862 	bl	8005d8c <_sbrk_r>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d126      	bne.n	8005d1a <_malloc_r+0x96>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	6033      	str	r3, [r6, #0]
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f000 f86c 	bl	8005dae <__malloc_unlock>
 8005cd6:	e7e4      	b.n	8005ca2 <_malloc_r+0x1e>
 8005cd8:	680b      	ldr	r3, [r1, #0]
 8005cda:	1b5b      	subs	r3, r3, r5
 8005cdc:	d41a      	bmi.n	8005d14 <_malloc_r+0x90>
 8005cde:	2b0b      	cmp	r3, #11
 8005ce0:	d90f      	bls.n	8005d02 <_malloc_r+0x7e>
 8005ce2:	600b      	str	r3, [r1, #0]
 8005ce4:	50cd      	str	r5, [r1, r3]
 8005ce6:	18cc      	adds	r4, r1, r3
 8005ce8:	4630      	mov	r0, r6
 8005cea:	f000 f860 	bl	8005dae <__malloc_unlock>
 8005cee:	f104 000b 	add.w	r0, r4, #11
 8005cf2:	1d23      	adds	r3, r4, #4
 8005cf4:	f020 0007 	bic.w	r0, r0, #7
 8005cf8:	1ac3      	subs	r3, r0, r3
 8005cfa:	d01b      	beq.n	8005d34 <_malloc_r+0xb0>
 8005cfc:	425a      	negs	r2, r3
 8005cfe:	50e2      	str	r2, [r4, r3]
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
 8005d02:	428c      	cmp	r4, r1
 8005d04:	bf0d      	iteet	eq
 8005d06:	6863      	ldreq	r3, [r4, #4]
 8005d08:	684b      	ldrne	r3, [r1, #4]
 8005d0a:	6063      	strne	r3, [r4, #4]
 8005d0c:	6013      	streq	r3, [r2, #0]
 8005d0e:	bf18      	it	ne
 8005d10:	460c      	movne	r4, r1
 8005d12:	e7e9      	b.n	8005ce8 <_malloc_r+0x64>
 8005d14:	460c      	mov	r4, r1
 8005d16:	6849      	ldr	r1, [r1, #4]
 8005d18:	e7ca      	b.n	8005cb0 <_malloc_r+0x2c>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d005      	beq.n	8005d30 <_malloc_r+0xac>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f830 	bl	8005d8c <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d0cd      	beq.n	8005ccc <_malloc_r+0x48>
 8005d30:	6025      	str	r5, [r4, #0]
 8005d32:	e7d9      	b.n	8005ce8 <_malloc_r+0x64>
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	bf00      	nop
 8005d38:	200000a4 	.word	0x200000a4
 8005d3c:	200000a8 	.word	0x200000a8

08005d40 <_realloc_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	4607      	mov	r7, r0
 8005d44:	4614      	mov	r4, r2
 8005d46:	460e      	mov	r6, r1
 8005d48:	b921      	cbnz	r1, 8005d54 <_realloc_r+0x14>
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d50:	f7ff bf98 	b.w	8005c84 <_malloc_r>
 8005d54:	b922      	cbnz	r2, 8005d60 <_realloc_r+0x20>
 8005d56:	f7ff ff47 	bl	8005be8 <_free_r>
 8005d5a:	4625      	mov	r5, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d60:	f000 f826 	bl	8005db0 <_malloc_usable_size_r>
 8005d64:	4284      	cmp	r4, r0
 8005d66:	d90f      	bls.n	8005d88 <_realloc_r+0x48>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff ff8a 	bl	8005c84 <_malloc_r>
 8005d70:	4605      	mov	r5, r0
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0f2      	beq.n	8005d5c <_realloc_r+0x1c>
 8005d76:	4631      	mov	r1, r6
 8005d78:	4622      	mov	r2, r4
 8005d7a:	f7ff ff0f 	bl	8005b9c <memcpy>
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff ff31 	bl	8005be8 <_free_r>
 8005d86:	e7e9      	b.n	8005d5c <_realloc_r+0x1c>
 8005d88:	4635      	mov	r5, r6
 8005d8a:	e7e7      	b.n	8005d5c <_realloc_r+0x1c>

08005d8c <_sbrk_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4c06      	ldr	r4, [pc, #24]	; (8005da8 <_sbrk_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4605      	mov	r5, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	f7fb f8d6 	bl	8000f48 <_sbrk>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_sbrk_r+0x1a>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_sbrk_r+0x1a>
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	2000056c 	.word	0x2000056c

08005dac <__malloc_lock>:
 8005dac:	4770      	bx	lr

08005dae <__malloc_unlock>:
 8005dae:	4770      	bx	lr

08005db0 <_malloc_usable_size_r>:
 8005db0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f1a0 0004 	sub.w	r0, r0, #4
 8005dba:	bfbc      	itt	lt
 8005dbc:	580b      	ldrlt	r3, [r1, r0]
 8005dbe:	18c0      	addlt	r0, r0, r3
 8005dc0:	4770      	bx	lr
	...

08005dc4 <_init>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr

08005dd0 <_fini>:
 8005dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd2:	bf00      	nop
 8005dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	469e      	mov	lr, r3
 8005dda:	4770      	bx	lr
