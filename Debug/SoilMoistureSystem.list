
SoilMoistureSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005cac  08005cac  00015cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08005cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          000004f4  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000568  20000568  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d19  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002837  00000000  00000000  00036dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001510  00000000  00000000  000395f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001408  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bb80  00000000  00000000  0003bf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006670  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e100  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005e50  00000000  00000000  0004e17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c20 	.word	0x08005c20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c20 	.word	0x08005c20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fded 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f83b 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa35 	bl	80006fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000292:	f000 f89f 	bl	80003d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000296:	f000 f90d 	bl	80004b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800029a:	f000 f94b 	bl	8000534 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800029e:	f000 f9db 	bl	8000658 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80002a2:	f000 fa09 	bl	80006b8 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80002a6:	f000 f983 	bl	80005b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80002aa:	4812      	ldr	r0, [pc, #72]	; (80002f4 <main+0x74>)
 80002ac:	f003 ffaa 	bl	8004204 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  percentage = Read_From_Sensor();
 80002b0:	f000 faca 	bl	8000848 <Read_From_Sensor>
 80002b4:	4602      	mov	r2, r0
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <main+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]

	  sprintf(msg, "%hu%%\r\n", percentage);
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <main+0x78>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	490e      	ldr	r1, [pc, #56]	; (80002fc <main+0x7c>)
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 f88e 	bl	80053e4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 10); // comment debug info
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff80 	bl	80001d0 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	1d39      	adds	r1, r7, #4
 80002d6:	230a      	movs	r3, #10
 80002d8:	4809      	ldr	r0, [pc, #36]	; (8000300 <main+0x80>)
 80002da:	f004 fc1d 	bl	8004b18 <HAL_UART_Transmit>

	  if (percentage < 80) { //define and set border of dry moisture value (percentage > n)
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <main+0x78>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b4f      	cmp	r3, #79	; 0x4f
 80002e4:	dc01      	bgt.n	80002ea <main+0x6a>
		  Watering_Handler();
 80002e6:	f000 faed 	bl	80008c4 <Watering_Handler>
	  }

	  HAL_Delay(2000); //set proper delay (30m - 1,800,000)
 80002ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ee:	f000 fe1f 	bl	8000f30 <HAL_Delay>
	  percentage = Read_From_Sensor();
 80002f2:	e7dd      	b.n	80002b0 <main+0x30>
 80002f4:	200001c4 	.word	0x200001c4
 80002f8:	200000ec 	.word	0x200000ec
 80002fc:	08005c38 	.word	0x08005c38
 8000300:	20000140 	.word	0x20000140

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09e      	sub	sp, #120	; 0x78
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f005 f85e 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	223c      	movs	r2, #60	; 0x3c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f005 f850 	bl	80053d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000334:	2303      	movs	r3, #3
 8000336:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000338:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800033c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000358:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fb62 	bl	8002a28 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800036a:	f000 fb71 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2302      	movs	r3, #2
 8000374:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000384:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000388:	2101      	movs	r1, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f003 fa54 	bl	8003838 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000396:	f000 fb5b 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <SystemClock_Config+0xcc>)
 800039c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003b0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003b2:	2300      	movs	r3, #0
 80003b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	463b      	mov	r3, r7
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 fc73 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003c4:	f000 fb44 	bl	8000a50 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3778      	adds	r7, #120	; 0x78
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	000210a1 	.word	0x000210a1

080003d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003da:	f107 031c 	add.w	r3, r7, #28
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
 80003f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f6:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <MX_ADC1_Init+0xdc>)
 80003f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000404:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040a:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000426:	2201      	movs	r2, #1
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <MX_ADC1_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000432:	2201      	movs	r2, #1
 8000434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000440:	2204      	movs	r2, #4
 8000442:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000446:	2200      	movs	r2, #0
 8000448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000450:	4817      	ldr	r0, [pc, #92]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000452:	f000 fd8f 	bl	8000f74 <HAL_ADC_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800045c:	f000 faf8 	bl	8000a50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000464:	f107 031c 	add.w	r3, r7, #28
 8000468:	4619      	mov	r1, r3
 800046a:	4811      	ldr	r0, [pc, #68]	; (80004b0 <MX_ADC1_Init+0xdc>)
 800046c:	f001 fc6c 	bl	8001d48 <HAL_ADCEx_MultiModeConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000476:	f000 faeb 	bl	8000a50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800047a:	2302      	movs	r3, #2
 800047c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800047e:	2301      	movs	r3, #1
 8000480:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <MX_ADC1_Init+0xdc>)
 8000498:	f001 f96a 	bl	8001770 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004a2:	f000 fad5 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000f0 	.word	0x200000f0

080004b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_I2C1_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_I2C1_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_I2C1_Init+0x74>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <MX_I2C1_Init+0x7c>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_I2C1_Init+0x74>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_I2C1_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <MX_I2C1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <MX_I2C1_Init+0x74>)
 80004f0:	f002 f896 	bl	8002620 <HAL_I2C_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004fa:	f000 faa9 	bl	8000a50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <MX_I2C1_Init+0x74>)
 8000502:	f002 f91b 	bl	800273c <HAL_I2CEx_ConfigAnalogFilter>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800050c:	f000 faa0 	bl	8000a50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000510:	2100      	movs	r1, #0
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_I2C1_Init+0x74>)
 8000514:	f002 f95d 	bl	80027d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 fa97 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200000a0 	.word	0x200000a0
 800052c:	40005400 	.word	0x40005400
 8000530:	2000090e 	.word	0x2000090e

08000534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_SPI1_Init+0x74>)
 800053a:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <MX_SPI1_Init+0x78>)
 800053c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <MX_SPI1_Init+0x74>)
 800054e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000552:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_SPI1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000566:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_SPI1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000582:	2207      	movs	r2, #7
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_SPI1_Init+0x74>)
 800058e:	2208      	movs	r2, #8
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_SPI1_Init+0x74>)
 8000594:	f003 fd36 	bl	8004004 <HAL_SPI_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800059e:	f000 fa57 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000210 	.word	0x20000210
 80005ac:	40013000 	.word	0x40013000

080005b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005d0:	4a20      	ldr	r2, [pc, #128]	; (8000654 <MX_TIM1_Init+0xa4>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005d6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80005e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <MX_TIM1_Init+0xa0>)
 80005fe:	f003 fdaa 	bl	8004156 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000608:	f000 fa22 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_TIM1_Init+0xa0>)
 800061a:	f003 ff7c 	bl	8004516 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000624:	f000 fa14 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_TIM1_Init+0xa0>)
 800063a:	f004 f981 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000644:	f000 fa04 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001c4 	.word	0x200001c4
 8000654:	40012c00 	.word	0x40012c00

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f004 f9ee 	bl	8004a7c <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f9d3 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000140 	.word	0x20000140
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <MX_USB_PCD_Init+0x40>)
 80006c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006c4:	2208      	movs	r2, #8
 80006c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_USB_PCD_Init+0x3c>)
 80006e2:	f002 f8c2 	bl	800286a <HAL_PCD_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006ec:	f000 f9b0 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000274 	.word	0x20000274
 80006f8:	40005c00 	.word	0x40005c00

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	4a4a      	ldr	r2, [pc, #296]	; (800083c <MX_GPIO_Init+0x140>)
 8000714:	4b49      	ldr	r3, [pc, #292]	; (800083c <MX_GPIO_Init+0x140>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b47      	ldr	r3, [pc, #284]	; (800083c <MX_GPIO_Init+0x140>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4a44      	ldr	r2, [pc, #272]	; (800083c <MX_GPIO_Init+0x140>)
 800072c:	4b43      	ldr	r3, [pc, #268]	; (800083c <MX_GPIO_Init+0x140>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <MX_GPIO_Init+0x140>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	4a3e      	ldr	r2, [pc, #248]	; (800083c <MX_GPIO_Init+0x140>)
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MX_GPIO_Init+0x140>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b3b      	ldr	r3, [pc, #236]	; (800083c <MX_GPIO_Init+0x140>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4a38      	ldr	r2, [pc, #224]	; (800083c <MX_GPIO_Init+0x140>)
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_GPIO_Init+0x140>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <MX_GPIO_Init+0x140>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <MX_GPIO_Init+0x140>)
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_GPIO_Init+0x140>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_GPIO_Init+0x140>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800078a:	2200      	movs	r2, #0
 800078c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000790:	482b      	ldr	r0, [pc, #172]	; (8000840 <MX_GPIO_Init+0x144>)
 8000792:	f001 ff13 	bl	80025bc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f240 4104 	movw	r1, #1028	; 0x404
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 ff0c 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007a4:	2337      	movs	r3, #55	; 0x37
 80007a6:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x148>)
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x144>)
 80007b8:	f001 fd86 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007bc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007c0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x144>)
 80007d6:	f001 fd77 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f001 fd6a 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007f8:	2311      	movs	r3, #17
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f001 fd5b 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 fd4b 	bl	80022c8 <HAL_GPIO_Init>

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48001000 	.word	0x48001000
 8000844:	10120000 	.word	0x10120000

08000848 <Read_From_Sensor>:

/* USER CODE BEGIN 4 */
static int Read_From_Sensor(void){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af02      	add	r7, sp, #8
	uint16_t raw;
	int percentage;

	HAL_ADC_Start(&hadc1);
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <Read_From_Sensor+0x40>)
 8000850:	f000 fd70 	bl	8001334 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <Read_From_Sensor+0x40>)
 800085a:	f000 fe81 	bl	8001560 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <Read_From_Sensor+0x40>)
 8000860:	f000 ff78 	bl	8001754 <HAL_ADC_GetValue>
 8000864:	4603      	mov	r3, r0
 8000866:	80fb      	strh	r3, [r7, #6]

	percentage = MAP(raw, 1230, 3040, 0, 100);
 8000868:	88f8      	ldrh	r0, [r7, #6]
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	f44f 623e 	mov.w	r2, #3040	; 0xbe0
 8000874:	f240 41ce 	movw	r1, #1230	; 0x4ce
 8000878:	f000 f808 	bl	800088c <MAP>
 800087c:	6038      	str	r0, [r7, #0]

	return percentage;
 800087e:	683b      	ldr	r3, [r7, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000f0 	.word	0x200000f0

0800088c <MAP>:

static int MAP(int input, int input_min, int input_max, int output_min, int output_max)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
	return ((((input - input_min)*(output_max - output_min))/(input_max - input_min)) + output_min);
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	1a8a      	subs	r2, r1, r2
 80008a6:	fb02 f203 	mul.w	r2, r2, r3
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4413      	add	r3, r2
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <Watering_Handler>:

static void Watering_Handler(void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	Watering();
 80008c8:	f000 f822 	bl	8000910 <Watering>
	HAL_Delay(1500); //set 45s - 90s delay
 80008cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008d0:	f000 fb2e 	bl	8000f30 <HAL_Delay>

	percentage = Read_From_Sensor();
 80008d4:	f7ff ffb8 	bl	8000848 <Read_From_Sensor>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <Watering_Handler+0x48>)
 80008dc:	601a      	str	r2, [r3, #0]
	if (percentage < 80) { //define and set border of dry moisture value (percentage > n)
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Watering_Handler+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b4f      	cmp	r3, #79	; 0x4f
 80008e4:	dc10      	bgt.n	8000908 <Watering_Handler+0x44>
		Watering();
 80008e6:	f000 f813 	bl	8000910 <Watering>
		HAL_Delay(1500); //set 45s - 90s delay
 80008ea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008ee:	f000 fb1f 	bl	8000f30 <HAL_Delay>
		percentage = Read_From_Sensor();
 80008f2:	f7ff ffa9 	bl	8000848 <Read_From_Sensor>
 80008f6:	4602      	mov	r2, r0
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <Watering_Handler+0x48>)
 80008fa:	601a      	str	r2, [r3, #0]

		if (percentage < 80) { //define and set border of dry moisture value (percentage > n)
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <Watering_Handler+0x48>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b4f      	cmp	r3, #79	; 0x4f
 8000902:	dc01      	bgt.n	8000908 <Watering_Handler+0x44>
			Trouble_Watering();
 8000904:	f000 f82e 	bl	8000964 <Trouble_Watering>

		}
	}


}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000ec 	.word	0x200000ec

08000910 <Watering>:

static void Watering(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 fe4e 	bl	80025bc <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000924:	480e      	ldr	r0, [pc, #56]	; (8000960 <Watering+0x50>)
 8000926:	f001 fe61 	bl	80025ec <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 800092a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <Watering+0x50>)
 8000930:	f001 fe5c 	bl	80025ec <HAL_GPIO_TogglePin>

	HAL_Delay(1500); //define delay value
 8000934:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000938:	f000 fafa 	bl	8000f30 <HAL_Delay>

	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800093c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <Watering+0x50>)
 8000942:	f001 fe53 	bl	80025ec <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 8000946:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <Watering+0x50>)
 800094c:	f001 fe4e 	bl	80025ec <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2104      	movs	r1, #4
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f001 fe30 	bl	80025bc <HAL_GPIO_WritePin>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48001000 	.word	0x48001000

08000964 <Trouble_Watering>:

static void Trouble_Watering(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	current_state = FSM_table[current_state][current_signal];
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <Trouble_Watering+0x80>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <Trouble_Watering+0x84>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <Trouble_Watering+0x88>)
 8000976:	440b      	add	r3, r1
 8000978:	4413      	add	r3, r2
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <Trouble_Watering+0x80>)
 800097e:	701a      	strb	r2, [r3, #0]

	while(current_state == trouble) {
 8000980:	e02a      	b.n	80009d8 <Trouble_Watering+0x74>
		Alarm();
 8000982:	f000 f837 	bl	80009f4 <Alarm>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2104      	movs	r1, #4
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 fe15 	bl	80025bc <HAL_GPIO_WritePin>

		HAL_Delay(1500); //define delay value
 8000992:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000996:	f000 facb 	bl	8000f30 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2104      	movs	r1, #4
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f001 fe0b 	bl	80025bc <HAL_GPIO_WritePin>

		HAL_Delay(1500); //set 45s- 90s delay
 80009a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009aa:	f000 fac1 	bl	8000f30 <HAL_Delay>
		percentage = Read_From_Sensor();
 80009ae:	f7ff ff4b 	bl	8000848 <Read_From_Sensor>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <Trouble_Watering+0x8c>)
 80009b6:	601a      	str	r2, [r3, #0]
		if (percentage > 80) { //define and set border of wet moisture value (percentage < n)
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <Trouble_Watering+0x8c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b50      	cmp	r3, #80	; 0x50
 80009be:	dd0b      	ble.n	80009d8 <Trouble_Watering+0x74>
			current_state = FSM_table[current_state][current_signal];
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <Trouble_Watering+0x80>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <Trouble_Watering+0x84>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <Trouble_Watering+0x88>)
 80009ce:	440b      	add	r3, r1
 80009d0:	4413      	add	r3, r2
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <Trouble_Watering+0x80>)
 80009d6:	701a      	strb	r2, [r3, #0]
	while(current_state == trouble) {
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <Trouble_Watering+0x80>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d0d0      	beq.n	8000982 <Trouble_Watering+0x1e>

		}
	}
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000090 	.word	0x20000090
 80009e8:	20000091 	.word	0x20000091
 80009ec:	20000000 	.word	0x20000000
 80009f0:	200000ec 	.word	0x200000ec

080009f4 <Alarm>:

static void Alarm(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	int repeat = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]

	while(repeat < 5) { //set repeat <= 3600 (every hour)
 80009fe:	e01e      	b.n	8000a3e <Alarm+0x4a>
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <Alarm+0x58>)
 8000a06:	f001 fdf1 	bl	80025ec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <Alarm+0x58>)
 8000a10:	f001 fdec 	bl	80025ec <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a18:	f000 fa8a 	bl	8000f30 <HAL_Delay>
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <Alarm+0x58>)
 8000a22:	f001 fde3 	bl	80025ec <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <Alarm+0x58>)
 8000a2c:	f001 fdde 	bl	80025ec <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f000 fa7c 	bl	8000f30 <HAL_Delay>
		repeat++;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
	while(repeat < 5) { //set repeat <= 3600 (every hour)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	dddd      	ble.n	8000a00 <Alarm+0xc>
	}
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48001000 	.word	0x48001000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x6>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8e:	2007      	movs	r0, #7
 8000a90:	f001 fbd8 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ac0:	d124      	bne.n	8000b0c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	6153      	str	r3, [r2, #20]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_ADC_MspInit+0x74>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 fbde 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_I2C_MspInit+0x7c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d127      	bne.n	8000b8a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b52:	23c0      	movs	r3, #192	; 0xc0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b62:	2304      	movs	r3, #4
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <HAL_I2C_MspInit+0x84>)
 8000b6e:	f001 fbab 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b76:	69db      	ldr	r3, [r3, #28]
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_I2C_MspInit+0x80>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d128      	bne.n	8000c14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000bf2:	23e0      	movs	r3, #224	; 0xe0
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c02:	2305      	movs	r3, #5
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f001 fb5a 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40013000 	.word	0x40013000
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_TIM_Base_MspInit+0x44>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d113      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2019      	movs	r0, #25
 8000c54:	f001 fb01 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f001 fb1a 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x7c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d127      	bne.n	8000ce2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x80>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0x84>)
 8000cde:	f001 faf3 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40013800 	.word	0x40013800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000800 	.word	0x48000800

08000cf8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <HAL_PCD_MspInit+0x80>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d129      	bne.n	8000d6e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000d32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d44:	230e      	movs	r3, #14
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f001 fab9 	bl	80022c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_PCD_MspInit+0x84>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005c00 	.word	0x40005c00
 8000d7c:	40021000 	.word	0x40021000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f890 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dda:	f003 fa7d 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001c4 	.word	0x200001c4

08000de8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x50>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x16>
		heap_end = &end;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <_sbrk+0x50>)
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <_sbrk+0x54>)
 8000dfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <_sbrk+0x50>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <_sbrk+0x50>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	466a      	mov	r2, sp
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d907      	bls.n	8000e22 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e12:	f004 fab5 	bl	8005380 <__errno>
 8000e16:	4602      	mov	r2, r0
 8000e18:	230c      	movs	r3, #12
 8000e1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	e006      	b.n	8000e30 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <_sbrk+0x50>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <_sbrk+0x50>)
 8000e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000094 	.word	0x20000094
 8000e3c:	20000568 	.word	0x20000568

08000e40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f001 f9e5 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fdea 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 f9fd 	bl	80022ae <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f001 f9c5 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000560 	.word	0x20000560

08000f18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000560 	.word	0x20000560

08000f30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_Delay+0x40>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3f7      	bcc.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000000c 	.word	0x2000000c

08000f74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09a      	sub	sp, #104	; 0x68
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e1c9      	b.n	8001328 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d176      	bne.n	8001094 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d152      	bne.n	8001054 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fd69 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d13b      	bne.n	8001054 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 f803 	bl	8001fe8 <ADC_Disable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d12f      	bne.n	8001054 <HAL_ADC_Init+0xe0>
 8000ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d12b      	bne.n	8001054 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	f043 0202 	orr.w	r2, r3, #2
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	6892      	ldr	r2, [r2, #8]
 800101a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800101e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	6892      	ldr	r2, [r2, #8]
 800102a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001030:	4b86      	ldr	r3, [pc, #536]	; (800124c <HAL_ADC_Init+0x2d8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a86      	ldr	r2, [pc, #536]	; (8001250 <HAL_ADC_Init+0x2dc>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001046:	e002      	b.n	800104e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3b01      	subs	r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f9      	bne.n	8001048 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800106c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001070:	d110      	bne.n	8001094 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 0312 	bic.w	r3, r3, #18
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	f040 8136 	bne.w	800130e <HAL_ADC_Init+0x39a>
 80010a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 8131 	bne.w	800130e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 8129 	bne.w	800130e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010c4:	f043 0202 	orr.w	r2, r3, #2
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d4:	d004      	beq.n	80010e0 <HAL_ADC_Init+0x16c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a5e      	ldr	r2, [pc, #376]	; (8001254 <HAL_ADC_Init+0x2e0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_Init+0x170>
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_ADC_Init+0x2e4>)
 80010e2:	e000      	b.n	80010e6 <HAL_ADC_Init+0x172>
 80010e4:	4b5d      	ldr	r3, [pc, #372]	; (800125c <HAL_ADC_Init+0x2e8>)
 80010e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f0:	d102      	bne.n	80010f8 <HAL_ADC_Init+0x184>
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_ADC_Init+0x2e0>)
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e01a      	b.n	800112e <HAL_ADC_Init+0x1ba>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a55      	ldr	r2, [pc, #340]	; (8001254 <HAL_ADC_Init+0x2e0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d103      	bne.n	800110a <HAL_ADC_Init+0x196>
 8001102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e011      	b.n	800112e <HAL_ADC_Init+0x1ba>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a54      	ldr	r2, [pc, #336]	; (8001260 <HAL_ADC_Init+0x2ec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d102      	bne.n	800111a <HAL_ADC_Init+0x1a6>
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_ADC_Init+0x2f0>)
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e009      	b.n	800112e <HAL_ADC_Init+0x1ba>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a51      	ldr	r2, [pc, #324]	; (8001264 <HAL_ADC_Init+0x2f0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d102      	bne.n	800112a <HAL_ADC_Init+0x1b6>
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <HAL_ADC_Init+0x2ec>)
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e001      	b.n	800112e <HAL_ADC_Init+0x1ba>
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_ADC_Init+0x1da>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_ADC_Init+0x1da>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_ADC_Init+0x1dc>
 800114e:	2300      	movs	r3, #0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d11c      	bne.n	800118e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001154:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001156:	2b00      	cmp	r3, #0
 8001158:	d010      	beq.n	800117c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_ADC_Init+0x202>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x202>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_ADC_Init+0x204>
 8001176:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001178:	2b00      	cmp	r3, #0
 800117a:	d108      	bne.n	800118e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800117c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	431a      	orrs	r2, r3
 800118a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7e5b      	ldrb	r3, [r3, #25]
 8001192:	035a      	lsls	r2, r3, #13
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	2b01      	cmp	r3, #1
 800119a:	d002      	beq.n	80011a2 <HAL_ADC_Init+0x22e>
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	e000      	b.n	80011a4 <HAL_ADC_Init+0x230>
 80011a2:	2300      	movs	r3, #0
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b4:	4313      	orrs	r3, r2
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d11b      	bne.n	80011fa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e5b      	ldrb	r3, [r3, #25]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	3b01      	subs	r3, #1
 80011d0:	045a      	lsls	r2, r3, #17
 80011d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d4:	4313      	orrs	r3, r2
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	663b      	str	r3, [r7, #96]	; 0x60
 80011dc:	e00d      	b.n	80011fa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011e6:	f043 0220 	orr.w	r2, r3, #32
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d03a      	beq.n	8001278 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_ADC_Init+0x2ec>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d004      	beq.n	8001216 <HAL_ADC_Init+0x2a2>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_ADC_Init+0x2f0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d128      	bne.n	8001268 <HAL_ADC_Init+0x2f4>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800121e:	d012      	beq.n	8001246 <HAL_ADC_Init+0x2d2>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d00a      	beq.n	8001240 <HAL_ADC_Init+0x2cc>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001232:	d002      	beq.n	800123a <HAL_ADC_Init+0x2c6>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	e018      	b.n	800126c <HAL_ADC_Init+0x2f8>
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	e015      	b.n	800126c <HAL_ADC_Init+0x2f8>
 8001240:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001244:	e012      	b.n	800126c <HAL_ADC_Init+0x2f8>
 8001246:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800124a:	e00f      	b.n	800126c <HAL_ADC_Init+0x2f8>
 800124c:	20000004 	.word	0x20000004
 8001250:	431bde83 	.word	0x431bde83
 8001254:	50000100 	.word	0x50000100
 8001258:	50000300 	.word	0x50000300
 800125c:	50000700 	.word	0x50000700
 8001260:	50000400 	.word	0x50000400
 8001264:	50000500 	.word	0x50000500
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001270:	4313      	orrs	r3, r2
 8001272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001274:	4313      	orrs	r3, r2
 8001276:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d114      	bne.n	80012b0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001294:	f023 0302 	bic.w	r3, r3, #2
 8001298:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e1b      	ldrb	r3, [r3, #24]
 800129e:	039a      	lsls	r2, r3, #14
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4313      	orrs	r3, r2
 80012aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ac:	4313      	orrs	r3, r2
 80012ae:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_ADC_Init+0x3bc>)
 80012bc:	400b      	ands	r3, r1
 80012be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012c0:	430b      	orrs	r3, r1
 80012c2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10c      	bne.n	80012e6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012d6:	f022 010f 	bic.w	r1, r2, #15
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	69d2      	ldr	r2, [r2, #28]
 80012de:	3a01      	subs	r2, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
 80012e4:	e007      	b.n	80012f6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012f0:	f022 020f 	bic.w	r2, r2, #15
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
 800130c:	e00a      	b.n	8001324 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f023 0312 	bic.w	r3, r3, #18
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001324:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001328:	4618      	mov	r0, r3
 800132a:	3768      	adds	r7, #104	; 0x68
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	fff0c007 	.word	0xfff0c007

08001334 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 80f9 	bne.w	8001542 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_ADC_Start+0x2a>
 800135a:	2302      	movs	r3, #2
 800135c:	e0f4      	b.n	8001548 <HAL_ADC_Start+0x214>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fde0 	bl	8001f2c <ADC_Enable>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f040 80e0 	bne.w	8001538 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001394:	d004      	beq.n	80013a0 <HAL_ADC_Start+0x6c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6d      	ldr	r2, [pc, #436]	; (8001550 <HAL_ADC_Start+0x21c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d106      	bne.n	80013ae <HAL_ADC_Start+0x7a>
 80013a0:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_ADC_Start+0x220>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d010      	beq.n	80013ce <HAL_ADC_Start+0x9a>
 80013ac:	e005      	b.n	80013ba <HAL_ADC_Start+0x86>
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_ADC_Start+0x224>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_ADC_Start+0x9a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c2:	d004      	beq.n	80013ce <HAL_ADC_Start+0x9a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a64      	ldr	r2, [pc, #400]	; (800155c <HAL_ADC_Start+0x228>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d115      	bne.n	80013fa <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d036      	beq.n	8001456 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013f8:	e02d      	b.n	8001456 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800140e:	d004      	beq.n	800141a <HAL_ADC_Start+0xe6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_ADC_Start+0x21c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10a      	bne.n	8001430 <HAL_ADC_Start+0xfc>
 800141a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	e008      	b.n	8001442 <HAL_ADC_Start+0x10e>
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_ADC_Start+0x228>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800144e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001462:	d106      	bne.n	8001472 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f023 0206 	bic.w	r2, r3, #6
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
 8001470:	e002      	b.n	8001478 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	221c      	movs	r2, #28
 8001486:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d004      	beq.n	800149c <HAL_ADC_Start+0x168>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <HAL_ADC_Start+0x21c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d106      	bne.n	80014aa <HAL_ADC_Start+0x176>
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_ADC_Start+0x220>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d03e      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 80014a8:	e005      	b.n	80014b6 <HAL_ADC_Start+0x182>
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_ADC_Start+0x224>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d037      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014be:	d004      	beq.n	80014ca <HAL_ADC_Start+0x196>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_ADC_Start+0x21c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d106      	bne.n	80014d8 <HAL_ADC_Start+0x1a4>
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_ADC_Start+0x220>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d027      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 80014d6:	e005      	b.n	80014e4 <HAL_ADC_Start+0x1b0>
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_ADC_Start+0x224>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d020      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ec:	d004      	beq.n	80014f8 <HAL_ADC_Start+0x1c4>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_ADC_Start+0x21c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d106      	bne.n	8001506 <HAL_ADC_Start+0x1d2>
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_ADC_Start+0x220>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2b09      	cmp	r3, #9
 8001502:	d010      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 8001504:	e005      	b.n	8001512 <HAL_ADC_Start+0x1de>
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_ADC_Start+0x224>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	2b09      	cmp	r3, #9
 8001510:	d009      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Start+0x1f2>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_ADC_Start+0x228>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10f      	bne.n	8001546 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	6892      	ldr	r2, [r2, #8]
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e006      	b.n	8001546 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001540:	e001      	b.n	8001546 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001542:	2302      	movs	r3, #2
 8001544:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	50000100 	.word	0x50000100
 8001554:	50000300 	.word	0x50000300
 8001558:	50000700 	.word	0x50000700
 800155c:	50000400 	.word	0x50000400

08001560 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2b08      	cmp	r3, #8
 8001574:	d102      	bne.n	800157c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001576:	2308      	movs	r3, #8
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e03a      	b.n	80015f2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001584:	d004      	beq.n	8001590 <HAL_ADC_PollForConversion+0x30>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_ADC_PollForConversion+0x1e4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_ADC_PollForConversion+0x34>
 8001590:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_ADC_PollForConversion+0x1e8>)
 8001592:	e000      	b.n	8001596 <HAL_ADC_PollForConversion+0x36>
 8001594:	4b6d      	ldr	r3, [pc, #436]	; (800174c <HAL_ADC_PollForConversion+0x1ec>)
 8001596:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d112      	bne.n	80015ca <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d11d      	bne.n	80015ee <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f043 0220 	orr.w	r2, r3, #32
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0b8      	b.n	800173c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0a6      	b.n	800173c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fa:	d004      	beq.n	8001606 <HAL_ADC_PollForConversion+0xa6>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a50      	ldr	r2, [pc, #320]	; (8001744 <HAL_ADC_PollForConversion+0x1e4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d106      	bne.n	8001614 <HAL_ADC_PollForConversion+0xb4>
 8001606:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_ADC_PollForConversion+0x1e8>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	2b00      	cmp	r3, #0
 8001610:	d010      	beq.n	8001634 <HAL_ADC_PollForConversion+0xd4>
 8001612:	e005      	b.n	8001620 <HAL_ADC_PollForConversion+0xc0>
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_ADC_PollForConversion+0x1ec>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2b00      	cmp	r3, #0
 800161e:	d009      	beq.n	8001634 <HAL_ADC_PollForConversion+0xd4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001628:	d004      	beq.n	8001634 <HAL_ADC_PollForConversion+0xd4>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_ADC_PollForConversion+0x1f0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d104      	bne.n	800163e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	e00f      	b.n	800165e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001646:	d004      	beq.n	8001652 <HAL_ADC_PollForConversion+0xf2>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a3d      	ldr	r2, [pc, #244]	; (8001744 <HAL_ADC_PollForConversion+0x1e4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d102      	bne.n	8001658 <HAL_ADC_PollForConversion+0xf8>
 8001652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001656:	e000      	b.n	800165a <HAL_ADC_PollForConversion+0xfa>
 8001658:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_ADC_PollForConversion+0x1f0>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800165e:	f7ff fc5b 	bl	8000f18 <HAL_GetTick>
 8001662:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001664:	e01a      	b.n	800169c <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d016      	beq.n	800169c <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_ADC_PollForConversion+0x124>
 8001674:	f7ff fc50 	bl	8000f18 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d90b      	bls.n	800169c <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e04f      	b.n	800173c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0dd      	beq.n	8001666 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d131      	bne.n	8001728 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d12c      	bne.n	8001728 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d125      	bne.n	8001728 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d112      	bne.n	8001710 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d112      	bne.n	8001728 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
 800170e:	e00b      	b.n	8001728 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	50000100 	.word	0x50000100
 8001748:	50000300 	.word	0x50000300
 800174c:	50000700 	.word	0x50000700
 8001750:	50000400 	.word	0x50000400

08001754 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001770:	b490      	push	{r4, r7}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x22>
 800178e:	2302      	movs	r3, #2
 8001790:	e2cd      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x5be>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 82b1 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d81c      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	461a      	mov	r2, r3
 80017ca:	231f      	movs	r3, #31
 80017cc:	4093      	lsls	r3, r2
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4018      	ands	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681c      	ldr	r4, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa04 f303 	lsl.w	r3, r4, r3
 80017e6:	4303      	orrs	r3, r0
 80017e8:	630b      	str	r3, [r1, #48]	; 0x30
 80017ea:	e063      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d81e      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	3b1e      	subs	r3, #30
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4018      	ands	r0, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681c      	ldr	r4, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	3b1e      	subs	r3, #30
 8001828:	fa04 f303 	lsl.w	r3, r4, r3
 800182c:	4303      	orrs	r3, r0
 800182e:	634b      	str	r3, [r1, #52]	; 0x34
 8001830:	e040      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b0e      	cmp	r3, #14
 8001838:	d81e      	bhi.n	8001878 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	3b3c      	subs	r3, #60	; 0x3c
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4018      	ands	r0, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681c      	ldr	r4, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	3b3c      	subs	r3, #60	; 0x3c
 800186e:	fa04 f303 	lsl.w	r3, r4, r3
 8001872:	4303      	orrs	r3, r0
 8001874:	638b      	str	r3, [r1, #56]	; 0x38
 8001876:	e01d      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	3b5a      	subs	r3, #90	; 0x5a
 8001890:	221f      	movs	r2, #31
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	4018      	ands	r0, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	3b5a      	subs	r3, #90	; 0x5a
 80018ac:	fa04 f303 	lsl.w	r3, r4, r3
 80018b0:	4303      	orrs	r3, r0
 80018b2:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80e5 	bne.w	8001a8e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d91c      	bls.n	8001906 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6998      	ldr	r0, [r3, #24]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	3b1e      	subs	r3, #30
 80018e2:	2207      	movs	r2, #7
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4018      	ands	r0, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689c      	ldr	r4, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	fa04 f303 	lsl.w	r3, r4, r3
 8001900:	4303      	orrs	r3, r0
 8001902:	618b      	str	r3, [r1, #24]
 8001904:	e019      	b.n	800193a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6958      	ldr	r0, [r3, #20]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	2207      	movs	r2, #7
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4018      	ands	r0, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689c      	ldr	r4, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	fa04 f303 	lsl.w	r3, r4, r3
 8001936:	4303      	orrs	r3, r0
 8001938:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	3b01      	subs	r3, #1
 8001958:	2b03      	cmp	r3, #3
 800195a:	d84f      	bhi.n	80019fc <HAL_ADC_ConfigChannel+0x28c>
 800195c:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_ADC_ConfigChannel+0x1f4>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001975 	.word	0x08001975
 8001968:	08001997 	.word	0x08001997
 800196c:	080019b9 	.word	0x080019b9
 8001970:	080019db 	.word	0x080019db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800197e:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_ADC_ConfigChannel+0x494>)
 8001980:	400b      	ands	r3, r1
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	6809      	ldr	r1, [r1, #0]
 8001986:	0688      	lsls	r0, r1, #26
 8001988:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800198a:	4301      	orrs	r1, r0
 800198c:	430b      	orrs	r3, r1
 800198e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001992:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001994:	e07b      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80019a0:	4b98      	ldr	r3, [pc, #608]	; (8001c04 <HAL_ADC_ConfigChannel+0x494>)
 80019a2:	400b      	ands	r3, r1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	0688      	lsls	r0, r1, #26
 80019aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019ac:	4301      	orrs	r1, r0
 80019ae:	430b      	orrs	r3, r1
 80019b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019b6:	e06a      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80019c2:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <HAL_ADC_ConfigChannel+0x494>)
 80019c4:	400b      	ands	r3, r1
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	6809      	ldr	r1, [r1, #0]
 80019ca:	0688      	lsls	r0, r1, #26
 80019cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019ce:	4301      	orrs	r1, r0
 80019d0:	430b      	orrs	r3, r1
 80019d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019d6:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019d8:	e059      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80019e4:	4b87      	ldr	r3, [pc, #540]	; (8001c04 <HAL_ADC_ConfigChannel+0x494>)
 80019e6:	400b      	ands	r3, r1
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	0688      	lsls	r0, r1, #26
 80019ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019f0:	4301      	orrs	r1, r0
 80019f2:	430b      	orrs	r3, r1
 80019f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019f8:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019fa:	e048      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	069b      	lsls	r3, r3, #26
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d107      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a1e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	069b      	lsls	r3, r3, #26
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d107      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001a3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a42:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	069b      	lsls	r3, r3, #26
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a66:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001a86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a8c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d108      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x33e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x33e>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x340>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 8136 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d00f      	beq.n	8001ade <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	2001      	movs	r0, #1
 8001ad0:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad4:	43d2      	mvns	r2, r2
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001adc:	e04a      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	2001      	movs	r0, #1
 8001af0:	fa00 f202 	lsl.w	r2, r0, r2
 8001af4:	430a      	orrs	r2, r1
 8001af6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	d91c      	bls.n	8001b3c <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6998      	ldr	r0, [r3, #24]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	3b1b      	subs	r3, #27
 8001b18:	2207      	movs	r2, #7
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4018      	ands	r0, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689c      	ldr	r4, [r3, #8]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1b      	subs	r3, #27
 8001b32:	fa04 f303 	lsl.w	r3, r4, r3
 8001b36:	4303      	orrs	r3, r0
 8001b38:	618b      	str	r3, [r1, #24]
 8001b3a:	e01b      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6958      	ldr	r0, [r3, #20]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	2207      	movs	r2, #7
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4018      	ands	r0, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689c      	ldr	r4, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b70:	4303      	orrs	r3, r0
 8001b72:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x418>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <HAL_ADC_ConfigChannel+0x498>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x41c>
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_ADC_ConfigChannel+0x49c>)
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x41e>
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_ADC_ConfigChannel+0x4a0>)
 8001b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ba8:	2b11      	cmp	r3, #17
 8001baa:	d105      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	f040 80b0 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80a9 	bne.w	8001d22 <HAL_ADC_ConfigChannel+0x5b2>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd8:	d102      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x470>
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_ADC_ConfigChannel+0x498>)
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e027      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4c0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_ADC_ConfigChannel+0x498>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d103      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x482>
 8001bea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e01e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4c0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_ADC_ConfigChannel+0x4a4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d10f      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x4ac>
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_ADC_ConfigChannel+0x4a8>)
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e016      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4c0>
 8001c02:	bf00      	nop
 8001c04:	83fff000 	.word	0x83fff000
 8001c08:	50000100 	.word	0x50000100
 8001c0c:	50000300 	.word	0x50000300
 8001c10:	50000700 	.word	0x50000700
 8001c14:	50000400 	.word	0x50000400
 8001c18:	50000500 	.word	0x50000500
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_ADC_ConfigChannel+0x5c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x4bc>
 8001c26:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <HAL_ADC_ConfigChannel+0x5cc>)
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e001      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4c0>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d108      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x4e0>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x4e0>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x4e2>
 8001c50:	2300      	movs	r3, #0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d150      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x50e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x508>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x508>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x50a>
 8001c78:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d13c      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x588>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d11d      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x552>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8e:	d118      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_ADC_ConfigChannel+0x5d0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a28      	ldr	r2, [pc, #160]	; (8001d44 <HAL_ADC_ConfigChannel+0x5d4>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9a      	lsrs	r2, r3, #18
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x544>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cc0:	e02e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x5b0>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x572>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cde:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ce0:	e01e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d11a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cf6:	e013      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d0a:	e00a      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d1e:	e000      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x5b2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d20:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3768      	adds	r7, #104	; 0x68
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc90      	pop	{r4, r7}
 8001d36:	4770      	bx	lr
 8001d38:	50000500 	.word	0x50000500
 8001d3c:	50000400 	.word	0x50000400
 8001d40:	20000004 	.word	0x20000004
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b099      	sub	sp, #100	; 0x64
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d60:	d102      	bne.n	8001d68 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d62:	4b6d      	ldr	r3, [pc, #436]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	e01a      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d103      	bne.n	8001d7a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	e011      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d84:	4b66      	ldr	r3, [pc, #408]	; (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	e009      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a64      	ldr	r2, [pc, #400]	; (8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d102      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	e001      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b0      	b.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0a9      	b.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 808d 	bne.w	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8086 	bne.w	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de4:	d004      	beq.n	8001df0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d101      	bne.n	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001df2:	e000      	b.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001df6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d040      	beq.n	8001e82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e12:	035b      	lsls	r3, r3, #13
 8001e14:	430b      	orrs	r3, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e1a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d15c      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001e5e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d14b      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e6c:	f023 030f 	bic.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	6811      	ldr	r1, [r2, #0]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	6892      	ldr	r2, [r2, #8]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e80:	e03c      	b.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d123      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ed0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d112      	bne.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ede:	f023 030f 	bic.w	r3, r3, #15
 8001ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ee4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee6:	e009      	b.n	8001efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001efa:	e000      	b.n	8001efe <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001efc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3764      	adds	r7, #100	; 0x64
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	50000400 	.word	0x50000400
 8001f20:	50000500 	.word	0x50000500
 8001f24:	50000300 	.word	0x50000300
 8001f28:	50000700 	.word	0x50000700

08001f2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <ADC_Enable+0x2c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <ADC_Enable+0x2c>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <ADC_Enable+0x2e>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d13c      	bne.n	8001fd8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <ADC_Enable+0xb8>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e028      	b.n	8001fda <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	6892      	ldr	r2, [r2, #8]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f98:	f7fe ffbe 	bl	8000f18 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f9e:	e014      	b.n	8001fca <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fa0:	f7fe ffba 	bl	8000f18 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d90d      	bls.n	8001fca <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0210 	orr.w	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e007      	b.n	8001fda <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d1e3      	bne.n	8001fa0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	8000003f 	.word	0x8000003f

08001fe8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <ADC_Disable+0x2c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <ADC_Disable+0x2c>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <ADC_Disable+0x2e>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d040      	beq.n	800209c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030d 	and.w	r3, r3, #13
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10f      	bne.n	8002048 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	f042 0202 	orr.w	r2, r2, #2
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2203      	movs	r2, #3
 800203e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002040:	f7fe ff6a 	bl	8000f18 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002046:	e022      	b.n	800208e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e01c      	b.n	800209e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002064:	f7fe ff58 	bl	8000f18 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d90d      	bls.n	800208e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0e3      	beq.n	8002064 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	4909      	ldr	r1, [pc, #36]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	490d      	ldr	r1, [pc, #52]	; (8002194 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	4909      	ldr	r1, [pc, #36]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	2201      	movs	r2, #1
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	401a      	ands	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e2:	2101      	movs	r1, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	1e59      	subs	r1, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff90 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff2b 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff40 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff90 	bl	800219c <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5f 	bl	8002148 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff33 	bl	800210c <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e154      	b.n	8002582 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8146 	beq.w	800257c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d00b      	beq.n	8002310 <HAL_GPIO_Init+0x48>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002304:	2b11      	cmp	r3, #17
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d130      	bne.n	8002372 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002346:	2201      	movs	r2, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0201 	and.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0xea>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d123      	bne.n	80023fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	6939      	ldr	r1, [r7, #16]
 80023f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80a0 	beq.w	800257c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002454:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800247e:	d019      	beq.n	80024b4 <HAL_GPIO_Init+0x1ec>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1e8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2e4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1e4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1dc>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f aea3 	bne.w	80022d8 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43d9      	mvns	r1, r3
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	400b      	ands	r3, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e080      	b.n	8002734 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fa66 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002670:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6892      	ldr	r2, [r2, #8]
 8002692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	e006      	b.n	80026a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d104      	bne.n	80026ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	68d2      	ldr	r2, [r2, #12]
 80026d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6911      	ldr	r1, [r2, #16]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6952      	ldr	r2, [r2, #20]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6992      	ldr	r2, [r2, #24]
 80026f0:	0212      	lsls	r2, r2, #8
 80026f2:	430a      	orrs	r2, r1
 80026f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	69d1      	ldr	r1, [r2, #28]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6a12      	ldr	r2, [r2, #32]
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	d138      	bne.n	80027c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800275c:	2302      	movs	r3, #2
 800275e:	e032      	b.n	80027c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800278e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	6811      	ldr	r1, [r2, #0]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d139      	bne.n	800285c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e033      	b.n	800285e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	; 0x24
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800286a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286c:	b08b      	sub	sp, #44	; 0x2c
 800286e:	af06      	add	r7, sp, #24
 8002870:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d0      	b.n	8002a1e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe fa31 	bl	8000cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fd05 	bl	80052b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e04c      	b.n	8002948 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3301      	adds	r3, #1
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	b298      	uxth	r0, r3
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3336      	adds	r3, #54	; 0x36
 80028ec:	4602      	mov	r2, r0
 80028ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3303      	adds	r3, #3
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3338      	adds	r3, #56	; 0x38
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	333c      	adds	r3, #60	; 0x3c
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3340      	adds	r3, #64	; 0x40
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3301      	adds	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3ad      	bcc.n	80028ae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e044      	b.n	80029e2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	f203 1369 	addw	r3, r3, #361	; 0x169
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3b5      	bcc.n	8002958 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	687e      	ldr	r6, [r7, #4]
 80029f4:	466d      	mov	r5, sp
 80029f6:	f106 0410 	add.w	r4, r6, #16
 80029fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	602b      	str	r3, [r5, #0]
 8002a02:	1d33      	adds	r3, r6, #4
 8002a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f002 fc6e 	bl	80052e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	1d3b      	adds	r3, r7, #4
 8002a32:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f000 bef4 	b.w	800382a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 816a 	beq.w	8002d26 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a52:	4bb3      	ldr	r3, [pc, #716]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5e:	4bb0      	ldr	r3, [pc, #704]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d159      	bne.n	8002b1e <HAL_RCC_OscConfig+0xf6>
 8002a6a:	4bad      	ldr	r3, [pc, #692]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a76:	d152      	bne.n	8002b1e <HAL_RCC_OscConfig+0xf6>
 8002a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_OscConfig+0x82>
 8002aa4:	4b9e      	ldr	r3, [pc, #632]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0xae>
 8002aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ac6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ad2:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ada:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ade:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ae2:	fa92 f2a2 	rbit	r2, r2
 8002ae6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002aea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f042 0220 	orr.w	r2, r2, #32
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f002 021f 	and.w	r2, r2, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 810c 	beq.w	8002d24 <HAL_RCC_OscConfig+0x2fc>
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 8106 	bne.w	8002d24 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f000 be86 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x110>
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b2c:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e030      	b.n	8002b9a <HAL_RCC_OscConfig+0x172>
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x134>
 8002b42:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b44:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4a74      	ldr	r2, [pc, #464]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b50:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01e      	b.n	8002b9a <HAL_RCC_OscConfig+0x172>
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x15a>
 8002b68:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x172>
 8002b82:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b84:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b90:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b9a:	4961      	ldr	r1, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f023 020f 	bic.w	r2, r3, #15
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d059      	beq.n	8002c6c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe f9ae 	bl	8000f18 <HAL_GetTick>
 8002bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc2:	f7fe f9a9 	bl	8000f18 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d902      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	f000 be29 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
 8002bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bdc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d102      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1e2>
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e015      	b.n	8002c36 <HAL_RCC_OscConfig+0x20e>
 8002c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c22:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c3a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c4a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c4e:	fab2 f282 	clz	r2, r2
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	f002 021f 	and.w	r2, r2, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f202 	lsl.w	r2, r1, r2
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ab      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x19a>
 8002c6a:	e05c      	b.n	8002d26 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe f954 	bl	8000f18 <HAL_GetTick>
 8002c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c76:	f7fe f94f 	bl	8000f18 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d902      	bls.n	8002c8c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	f000 bdcf 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
 8002c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c90:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ca0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_OscConfig+0x296>
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x2c2>
 8002cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cda:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cf2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cf6:	fa92 f2a2 	rbit	r2, r2
 8002cfa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cfe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d02:	fab2 f282 	clz	r2, r2
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f042 0220 	orr.w	r2, r2, #32
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ab      	bne.n	8002c76 <HAL_RCC_OscConfig+0x24e>
 8002d1e:	e002      	b.n	8002d26 <HAL_RCC_OscConfig+0x2fe>
 8002d20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 816f 	beq.w	8003014 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d36:	4bd0      	ldr	r3, [pc, #832]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d42:	4bcd      	ldr	r3, [pc, #820]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d16c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x400>
 8002d4e:	4bca      	ldr	r3, [pc, #808]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d166      	bne.n	8002e28 <HAL_RCC_OscConfig+0x400>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d6c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x362>
 8002d84:	4bbc      	ldr	r3, [pc, #752]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	e013      	b.n	8002db2 <HAL_RCC_OscConfig+0x38a>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002da2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002dae:	4bb2      	ldr	r3, [pc, #712]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2202      	movs	r2, #2
 8002db4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002db8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dbc:	fa92 f2a2 	rbit	r2, r2
 8002dc0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dc4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f000 bd1b 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	48a0      	ldr	r0, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002df6:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	21f8      	movs	r1, #248	; 0xf8
 8002e06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e0e:	fa91 f1a1 	rbit	r1, r1
 8002e12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e1a:	fab1 f181 	clz	r1, r1
 8002e1e:	b2c9      	uxtb	r1, r1
 8002e20:	408b      	lsls	r3, r1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e0f5      	b.n	8003014 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8085 	beq.w	8002f3e <HAL_RCC_OscConfig+0x516>
 8002e34:	2301      	movs	r3, #1
 8002e36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe f85a 	bl	8000f18 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe f855 	bl	8000f18 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f000 bcd5 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x488>
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	e013      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4b0>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ec8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ede:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eee:	fab2 f282 	clz	r2, r2
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	f042 0220 	orr.w	r2, r2, #32
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f002 021f 	and.w	r2, r2, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f202 	lsl.w	r2, r1, r2
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0af      	beq.n	8002e6a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	485b      	ldr	r0, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002f0c:	4b5a      	ldr	r3, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	21f8      	movs	r1, #248	; 0xf8
 8002f1c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f24:	fa91 f1a1 	rbit	r1, r1
 8002f28:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f30:	fab1 f181 	clz	r1, r1
 8002f34:	b2c9      	uxtb	r1, r1
 8002f36:	408b      	lsls	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	6003      	str	r3, [r0, #0]
 8002f3c:	e06a      	b.n	8003014 <HAL_RCC_OscConfig+0x5ec>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	461a      	mov	r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fd ffd5 	bl	8000f18 <HAL_GetTick>
 8002f6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f74:	f7fd ffd0 	bl	8000f18 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d902      	bls.n	8002f8a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f000 bc50 	b.w	800382a <HAL_RCC_OscConfig+0xe02>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0x592>
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e013      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5ba>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002fd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x650>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fe8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ff4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f002 021f 	and.w	r2, r2, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1af      	bne.n	8002f74 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80da 	beq.w	80031d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d069      	beq.n	8003102 <HAL_RCC_OscConfig+0x6da>
 800302e:	2301      	movs	r3, #1
 8003030:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x654>)
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	461a      	mov	r2, r3
 8003054:	2301      	movs	r3, #1
 8003056:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7fd ff5e 	bl	8000f18 <HAL_GetTick>
 800305c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003062:	f7fd ff59 	bl	8000f18 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d906      	bls.n	8003080 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e3d9      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	10908120 	.word	0x10908120
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003092:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003096:	2202      	movs	r2, #2
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80030c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4ba5      	ldr	r3, [pc, #660]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80030ca:	2102      	movs	r1, #2
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f1a3 	rbit	r1, r3
 80030d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030dc:	6019      	str	r1, [r3, #0]
  return result;
 80030de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0b0      	beq.n	8003062 <HAL_RCC_OscConfig+0x63a>
 8003100:	e06a      	b.n	80031d8 <HAL_RCC_OscConfig+0x7b0>
 8003102:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003118:	601a      	str	r2, [r3, #0]
  return result;
 800311a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800311e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_OscConfig+0x934>)
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fd fef0 	bl	8000f18 <HAL_GetTick>
 8003138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e009      	b.n	8003152 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313e:	f7fd feeb 	bl	8000f18 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e36b      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 8003152:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003156:	2202      	movs	r2, #2
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fa93 f2a3 	rbit	r2, r3
 8003164:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003198:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80031a2:	2102      	movs	r1, #2
 80031a4:	6019      	str	r1, [r3, #0]
 80031a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f1a3 	rbit	r1, r3
 80031b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031b4:	6019      	str	r1, [r3, #0]
  return result;
 80031b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1b2      	bne.n	800313e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8158 	beq.w	8003498 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d112      	bne.n	8003220 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4a57      	ldr	r2, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_RCC_OscConfig+0x938>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11a      	bne.n	8003262 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_RCC_OscConfig+0x938>)
 800322e:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_RCC_OscConfig+0x938>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003238:	f7fd fe6e 	bl	8000f18 <HAL_GetTick>
 800323c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e009      	b.n	8003256 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fd fe69 	bl	8000f18 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e2e9      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <HAL_RCC_OscConfig+0x938>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x852>
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 800326e:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e02f      	b.n	80032da <HAL_RCC_OscConfig+0x8b2>
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x876>
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003286:	4b34      	ldr	r3, [pc, #208]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6213      	str	r3, [r2, #32]
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	e01d      	b.n	80032da <HAL_RCC_OscConfig+0x8b2>
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x89a>
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6213      	str	r3, [r2, #32]
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0x8b2>
 80032c2:	4a25      	ldr	r2, [pc, #148]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f023 0304 	bic.w	r3, r3, #4
 80032d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06b      	beq.n	80033bc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fd fe18 	bl	8000f18 <HAL_GetTick>
 80032e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd fe13 	bl	8000f18 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e291      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 8003306:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f2a3 	rbit	r2, r3
 8003330:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003334:	601a      	str	r2, [r3, #0]
  return result;
 8003336:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800333a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f043 0302 	orr.w	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d109      	bne.n	8003364 <HAL_RCC_OscConfig+0x93c>
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <HAL_RCC_OscConfig+0x930>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	e014      	b.n	8003380 <HAL_RCC_OscConfig+0x958>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	10908120 	.word	0x10908120
 8003360:	40007000 	.word	0x40007000
 8003364:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003368:	2202      	movs	r2, #2
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	4bbb      	ldr	r3, [pc, #748]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003384:	2102      	movs	r1, #2
 8003386:	6011      	str	r1, [r2, #0]
 8003388:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	fa92 f1a2 	rbit	r1, r2
 8003392:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003396:	6011      	str	r1, [r2, #0]
  return result;
 8003398:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f002 021f 	and.w	r2, r2, #31
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d099      	beq.n	80032ee <HAL_RCC_OscConfig+0x8c6>
 80033ba:	e063      	b.n	8003484 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fd fdac 	bl	8000f18 <HAL_GetTick>
 80033c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fd fda7 	bl	8000f18 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e225      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 80033de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033e2:	2202      	movs	r2, #2
 80033e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800340c:	601a      	str	r2, [r3, #0]
  return result;
 800340e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003412:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d102      	bne.n	800342e <HAL_RCC_OscConfig+0xa06>
 8003428:	4b90      	ldr	r3, [pc, #576]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	e00d      	b.n	800344a <HAL_RCC_OscConfig+0xa22>
 800342e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003432:	2202      	movs	r2, #2
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	4b89      	ldr	r3, [pc, #548]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800344e:	2102      	movs	r1, #2
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	fa92 f1a2 	rbit	r1, r2
 800345c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003460:	6011      	str	r1, [r2, #0]
  return result;
 8003462:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f002 021f 	and.w	r2, r2, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1a0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003484:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348c:	4a77      	ldr	r2, [pc, #476]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 800348e:	4b77      	ldr	r3, [pc, #476]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003496:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 81c2 	beq.w	8003828 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a4:	4b71      	ldr	r3, [pc, #452]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	f000 819c 	beq.w	80037ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f040 8114 	bne.w	80036e6 <HAL_RCC_OscConfig+0xcbe>
 80034be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034d6:	601a      	str	r2, [r3, #0]
  return result;
 80034d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fd fd10 	bl	8000f18 <HAL_GetTick>
 80034f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fd fd0b 	bl	8000f18 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e18b      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 8003512:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800352a:	601a      	str	r2, [r3, #0]
  return result;
 800352c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003530:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0xb24>
 8003546:	4b49      	ldr	r3, [pc, #292]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e01b      	b.n	8003584 <HAL_RCC_OscConfig+0xb5c>
 800354c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800356a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fa92 f1a2 	rbit	r1, r2
 8003598:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800359c:	6011      	str	r1, [r2, #0]
  return result;
 800359e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f002 021f 	and.w	r2, r2, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d19e      	bne.n	80034fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	482a      	ldr	r0, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	430b      	orrs	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	6043      	str	r3, [r0, #4]
 80035dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035f4:	601a      	str	r2, [r3, #0]
  return result;
 80035f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003606:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	461a      	mov	r2, r3
 800360e:	2301      	movs	r3, #1
 8003610:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd fc81 	bl	8000f18 <HAL_GetTick>
 8003616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361a:	e009      	b.n	8003630 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fc7c 	bl	8000f18 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0fc      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 8003630:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003648:	601a      	str	r2, [r3, #0]
  return result;
 800364a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800364e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0xc48>
 8003664:	4b01      	ldr	r3, [pc, #4]	; (800366c <HAL_RCC_OscConfig+0xc44>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	e01e      	b.n	80036a8 <HAL_RCC_OscConfig+0xc80>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800368e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_OscConfig+0xe0c>)
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b0:	6011      	str	r1, [r2, #0]
 80036b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	fa92 f1a2 	rbit	r1, r2
 80036bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80036c0:	6011      	str	r1, [r2, #0]
  return result;
 80036c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d09b      	beq.n	800361c <HAL_RCC_OscConfig+0xbf4>
 80036e4:	e0a0      	b.n	8003828 <HAL_RCC_OscConfig+0xe00>
 80036e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036fe:	601a      	str	r2, [r3, #0]
  return result;
 8003700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003704:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003710:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd fbfc 	bl	8000f18 <HAL_GetTick>
 8003720:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	e009      	b.n	800373a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fbf7 	bl	8000f18 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e077      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
 800373a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800373e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003752:	601a      	str	r2, [r3, #0]
  return result;
 8003754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003758:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0xd4c>
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCC_OscConfig+0xe0c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	e01b      	b.n	80037ac <HAL_RCC_OscConfig+0xd84>
 8003774:	f107 0320 	add.w	r3, r7, #32
 8003778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f107 0320 	add.w	r3, r7, #32
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	fa93 f2a3 	rbit	r2, r3
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCC_OscConfig+0xe0c>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f107 0210 	add.w	r2, r7, #16
 80037b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	f107 0210 	add.w	r2, r7, #16
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	fa92 f1a2 	rbit	r1, r2
 80037c0:	f107 020c 	add.w	r2, r7, #12
 80037c4:	6011      	str	r1, [r2, #0]
  return result;
 80037c6:	f107 020c 	add.w	r2, r7, #12
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d19e      	bne.n	8003726 <HAL_RCC_OscConfig+0xcfe>
 80037e8:	e01e      	b.n	8003828 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e018      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_RCC_OscConfig+0xe0c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003800:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	429a      	cmp	r2, r3
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003812:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09e      	sub	sp, #120	; 0x78
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e162      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b90      	ldr	r3, [pc, #576]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0207 	and.w	r2, r3, #7
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d210      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	498d      	ldr	r1, [pc, #564]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003860:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0207 	and.w	r2, r3, #7
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e14a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4982      	ldr	r1, [pc, #520]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 800388e:	4b82      	ldr	r3, [pc, #520]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80dc 	beq.w	8003a64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d13c      	bne.n	800392e <HAL_RCC_ClockConfig+0xf6>
 80038b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c4:	fab3 f383 	clz	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <HAL_RCC_ClockConfig+0xa6>
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	e00f      	b.n	80038fe <HAL_RCC_ClockConfig+0xc6>
 80038de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	667b      	str	r3, [r7, #100]	; 0x64
 80038ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f0:	663b      	str	r3, [r7, #96]	; 0x60
 80038f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003902:	65ba      	str	r2, [r7, #88]	; 0x58
 8003904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003906:	fa92 f2a2 	rbit	r2, r2
 800390a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800390c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f042 0220 	orr.w	r2, r2, #32
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f002 021f 	and.w	r2, r2, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d17b      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0f3      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d13c      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x178>
 8003936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_ClockConfig+0x128>
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e00f      	b.n	8003980 <HAL_RCC_ClockConfig+0x148>
 8003960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003964:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003984:	63ba      	str	r2, [r7, #56]	; 0x38
 8003986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003988:	fa92 f2a2 	rbit	r2, r2
 800398c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800398e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13a      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b2      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e00d      	b.n	80039f4 <HAL_RCC_ClockConfig+0x1bc>
 80039d8:	2302      	movs	r3, #2
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	2302      	movs	r3, #2
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	2202      	movs	r2, #2
 80039f6:	61ba      	str	r2, [r7, #24]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	fa92 f2a2 	rbit	r2, r2
 80039fe:	617a      	str	r2, [r7, #20]
  return result;
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f042 0220 	orr.w	r2, r2, #32
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f002 021f 	and.w	r2, r2, #31
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e079      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a22:	491d      	ldr	r1, [pc, #116]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 0203 	bic.w	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a34:	f7fd fa70 	bl	8000f18 <HAL_GetTick>
 8003a38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fd fa6c 	bl	8000f18 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e061      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 020c 	and.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1eb      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0207 	and.w	r2, r3, #7
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d914      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 0207 	bic.w	r2, r3, #7
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <HAL_RCC_ClockConfig+0x25c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0207 	and.w	r2, r3, #7
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e040      	b.n	8003b16 <HAL_RCC_ClockConfig+0x2de>
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	491d      	ldr	r1, [pc, #116]	; (8003b20 <HAL_RCC_ClockConfig+0x2e8>)
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCC_ClockConfig+0x2e8>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x2e8>)
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_RCC_ClockConfig+0x2e8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ada:	f000 f829 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_ClockConfig+0x2e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	22f0      	movs	r2, #240	; 0xf0
 8003aea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	fa92 f2a2 	rbit	r2, r2
 8003af2:	60fa      	str	r2, [r7, #12]
  return result;
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	fab2 f282 	clz	r2, r2
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	40d3      	lsrs	r3, r2
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x2ec>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	fa21 f303 	lsr.w	r3, r1, r3
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_RCC_ClockConfig+0x2f0>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCC_ClockConfig+0x2f4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd f9be 	bl	8000e90 <HAL_InitTick>
  
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3778      	adds	r7, #120	; 0x78
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08005c40 	.word	0x08005c40
 8003b28:	20000004 	.word	0x20000004
 8003b2c:	20000008 	.word	0x20000008

08003b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b08b      	sub	sp, #44	; 0x2c
 8003b34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b4a:	4b29      	ldr	r3, [pc, #164]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x30>
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x36>
 8003b5e:	e03c      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b62:	623b      	str	r3, [r7, #32]
      break;
 8003b64:	e03c      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	fa92 f2a2 	rbit	r2, r2
 8003b78:	607a      	str	r2, [r7, #4]
  return result;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	fab2 f282 	clz	r2, r2
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	40d3      	lsrs	r3, r2
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b8a:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	220f      	movs	r2, #15
 8003b94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	fa92 f2a2 	rbit	r2, r2
 8003b9c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	40d3      	lsrs	r3, r2
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bb8:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	623b      	str	r3, [r7, #32]
      break;
 8003bd8:	e002      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bdc:	623b      	str	r3, [r7, #32]
      break;
 8003bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	372c      	adds	r7, #44	; 0x2c
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	007a1200 	.word	0x007a1200
 8003bf8:	08005c58 	.word	0x08005c58
 8003bfc:	08005c68 	.word	0x08005c68
 8003c00:	003d0900 	.word	0x003d0900

08003c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c22:	f7ff ffef 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c26:	4601      	mov	r1, r0
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	fa92 f2a2 	rbit	r2, r2
 8003c3c:	603a      	str	r2, [r7, #0]
  return result;
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	fab2 f282 	clz	r2, r2
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	40d3      	lsrs	r3, r2
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08005c50 	.word	0x08005c50

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c66:	f7ff ffcd 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	fa92 f2a2 	rbit	r2, r2
 8003c80:	603a      	str	r2, [r7, #0]
  return result;
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	fab2 f282 	clz	r2, r2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	40d3      	lsrs	r3, r2
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08005c50 	.word	0x08005c50

08003ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b092      	sub	sp, #72	; 0x48
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80d4 	beq.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc8:	4b4e      	ldr	r3, [pc, #312]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4a4b      	ldr	r2, [pc, #300]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d118      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfe:	4a42      	ldr	r2, [pc, #264]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d00:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd f905 	bl	8000f18 <HAL_GetTick>
 8003d0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	e008      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7fd f901 	bl	8000f18 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	; 0x64
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e169      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d30:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8084 	beq.w	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d07c      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d50:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d04b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd f8b1 	bl	8000f18 <HAL_GetTick>
 8003db6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fd f8ad 	bl	8000f18 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e113      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	2302      	movs	r3, #2
 8003dde:	623b      	str	r3, [r7, #32]
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	61fb      	str	r3, [r7, #28]
  return result;
 8003de8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dfe:	4b01      	ldr	r3, [pc, #4]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	e00d      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	10908100 	.word	0x10908100
 8003e10:	2302      	movs	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	4b78      	ldr	r3, [pc, #480]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	613a      	str	r2, [r7, #16]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	fa92 f2a2 	rbit	r2, r2
 8003e2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	fab2 f282 	clz	r2, r2
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f002 021f 	and.w	r2, r2, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0b7      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e4a:	496d      	ldr	r1, [pc, #436]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4c:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e64:	4a66      	ldr	r2, [pc, #408]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e66:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7c:	4960      	ldr	r1, [pc, #384]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7e:	4b60      	ldr	r3, [pc, #384]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f023 0203 	bic.w	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9a:	4959      	ldr	r1, [pc, #356]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb8:	4951      	ldr	r1, [pc, #324]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ed6:	494a      	ldr	r1, [pc, #296]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	f023 0210 	bic.w	r2, r3, #16
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ef4:	4942      	ldr	r1, [pc, #264]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef6:	4b42      	ldr	r3, [pc, #264]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f12:	493b      	ldr	r1, [pc, #236]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f14:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f023 0220 	bic.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f30:	4933      	ldr	r1, [pc, #204]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f4e:	492c      	ldr	r1, [pc, #176]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f6c:	4924      	ldr	r1, [pc, #144]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6e:	4b24      	ldr	r3, [pc, #144]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f8a:	491d      	ldr	r1, [pc, #116]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fa8:	4915      	ldr	r1, [pc, #84]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fc6:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fe4:	4906      	ldr	r1, [pc, #24]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3748      	adds	r7, #72	; 0x48
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e09b      	b.n	800414e <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fda2 	bl	8000ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800407c:	d902      	bls.n	8004084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004092:	d007      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6852      	ldr	r2, [r2, #4]
 80040ac:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6912      	ldr	r2, [r2, #16]
 80040be:	f002 0202 	and.w	r2, r2, #2
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6952      	ldr	r2, [r2, #20]
 80040c8:	f002 0201 	and.w	r2, r2, #1
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6992      	ldr	r2, [r2, #24]
 80040d2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	69d2      	ldr	r2, [r2, #28]
 80040dc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a12      	ldr	r2, [r2, #32]
 80040e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6992      	ldr	r2, [r2, #24]
 8004100:	0c12      	lsrs	r2, r2, #16
 8004102:	f002 0104 	and.w	r1, r2, #4
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410a:	f002 0210 	and.w	r2, r2, #16
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004114:	f002 0208 	and.w	r2, r2, #8
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004122:	4311      	orrs	r1, r2
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	69d2      	ldr	r2, [r2, #28]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e049      	b.n	80041fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fc fd51 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f000 faa9 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d001      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e04a      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <HAL_TIM_Base_Start_IT+0xbc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x6c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d013      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x6c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x6c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x6c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1a      	ldr	r2, [pc, #104]	; (80042cc <HAL_TIM_Base_Start_IT+0xc8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x6c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d115      	bne.n	800429c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d015      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0xaa>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d011      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	e008      	b.n	80042ae <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40013400 	.word	0x40013400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	00010007 	.word	0x00010007

080042d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0202 	mvn.w	r2, #2
 8004304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9c8 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9ba 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f9cb 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0204 	mvn.w	r2, #4
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f99e 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f990 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f9a1 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0208 	mvn.w	r2, #8
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f974 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f966 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f977 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2208      	movs	r2, #8
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f94a 	bl	80046b0 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f93c 	bl	800469c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f94d 	bl	80046c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0201 	mvn.w	r2, #1
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f916 	bl	8004688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fae6 	bl	8004a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004496:	d10e      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d107      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fad9 	bl	8004a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8fb 	bl	80046d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0220 	mvn.w	r2, #32
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa99 	bl	8004a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_TIM_ConfigClockSource+0x18>
 800452a:	2302      	movs	r3, #2
 800452c:	e0a8      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x16a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004550:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004558:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d067      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x124>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d80b      	bhi.n	8004586 <HAL_TIM_ConfigClockSource+0x70>
 800456e:	2b10      	cmp	r3, #16
 8004570:	d073      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x144>
 8004572:	2b10      	cmp	r3, #16
 8004574:	d802      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x66>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d06f      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800457a:	e078      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800457c:	2b20      	cmp	r3, #32
 800457e:	d06c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x144>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d06a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004584:	e073      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004586:	2b70      	cmp	r3, #112	; 0x70
 8004588:	d00d      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x90>
 800458a:	2b70      	cmp	r3, #112	; 0x70
 800458c:	d804      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x82>
 800458e:	2b50      	cmp	r3, #80	; 0x50
 8004590:	d033      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xe4>
 8004592:	2b60      	cmp	r3, #96	; 0x60
 8004594:	d041      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004596:	e06a      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d066      	beq.n	800466c <HAL_TIM_ConfigClockSource+0x156>
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a2:	d017      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80045a4:	e063      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 f9a3 	bl	8004900 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04c      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 f98c 	bl	8004900 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e039      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f900 	bl	800480c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	; 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f959 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 8004618:	e029      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f91f 	bl	800486a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	; 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f949 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 8004638:	e019      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 f8e0 	bl	800480c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	; 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f939 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 8004658:	e009      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 f930 	bl	80048ca <TIM_ITRx_SetConfig>
        break;
 800466a:	e000      	b.n	800466e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800466c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <TIM_Base_SetConfig+0x104>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a39      	ldr	r2, [pc, #228]	; (80047f4 <TIM_Base_SetConfig+0x108>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <TIM_Base_SetConfig+0x10c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <TIM_Base_SetConfig+0x110>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <TIM_Base_SetConfig+0x104>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2a      	ldr	r2, [pc, #168]	; (80047f4 <TIM_Base_SetConfig+0x108>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <TIM_Base_SetConfig+0x10c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a28      	ldr	r2, [pc, #160]	; (80047fc <TIM_Base_SetConfig+0x110>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a27      	ldr	r2, [pc, #156]	; (8004800 <TIM_Base_SetConfig+0x114>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a26      	ldr	r2, [pc, #152]	; (8004804 <TIM_Base_SetConfig+0x118>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a25      	ldr	r2, [pc, #148]	; (8004808 <TIM_Base_SetConfig+0x11c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <TIM_Base_SetConfig+0x104>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0xe8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <TIM_Base_SetConfig+0x110>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0xe8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <TIM_Base_SetConfig+0x114>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0xe8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <TIM_Base_SetConfig+0x118>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0xe8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <TIM_Base_SetConfig+0x11c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40013400 	.word	0x40013400
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800

0800480c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0201 	bic.w	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 030a 	bic.w	r3, r3, #10
 8004848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486a:	b480      	push	{r7}
 800486c:	b087      	sub	sp, #28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0210 	bic.w	r2, r3, #16
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	031b      	lsls	r3, r3, #12
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f043 0307 	orr.w	r3, r3, #7
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	021a      	lsls	r2, r3, #8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	431a      	orrs	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4313      	orrs	r3, r2
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e063      	b.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2b      	ldr	r2, [pc, #172]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d108      	bne.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004992:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ca:	d013      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10c      	bne.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40014000 	.word	0x40014000

08004a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e040      	b.n	8004b10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc f8e6 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8c0 	bl	8004c40 <UART_SetConfig>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e022      	b.n	8004b10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa86 	bl	8004fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	6852      	ldr	r2, [r2, #4]
 8004ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	6892      	ldr	r2, [r2, #8]
 8004af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb0d 	bl	8005128 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	f040 8082 	bne.w	8004c36 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_Transmit+0x26>
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07a      	b.n	8004c38 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Transmit+0x38>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e073      	b.n	8004c38 <HAL_UART_Transmit+0x120>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b66:	f7fc f9d7 	bl	8000f18 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x80>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ba8:	e02d      	b.n	8004c06 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2180      	movs	r1, #128	; 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fb00 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e039      	b.n	8004c38 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e008      	b.n	8004bf4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	b292      	uxth	r2, r2
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1cb      	bne.n	8004baa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2140      	movs	r1, #64	; 0x40
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 facc 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e005      	b.n	8004c38 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c72:	f023 030c 	bic.w	r3, r3, #12
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6892      	ldr	r2, [r2, #8]
 8004cac:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4aad      	ldr	r2, [pc, #692]	; (8004f70 <UART_SetConfig+0x330>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d121      	bne.n	8004d04 <UART_SetConfig+0xc4>
 8004cc0:	4bac      	ldr	r3, [pc, #688]	; (8004f74 <UART_SetConfig+0x334>)
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d817      	bhi.n	8004cfc <UART_SetConfig+0xbc>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0x94>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004ce5 	.word	0x08004ce5
 8004cd8:	08004cf1 	.word	0x08004cf1
 8004cdc:	08004cf7 	.word	0x08004cf7
 8004ce0:	08004ceb 	.word	0x08004ceb
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e0b2      	b.n	8004e50 <UART_SetConfig+0x210>
 8004cea:	2302      	movs	r3, #2
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e0af      	b.n	8004e50 <UART_SetConfig+0x210>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e0ac      	b.n	8004e50 <UART_SetConfig+0x210>
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0a9      	b.n	8004e50 <UART_SetConfig+0x210>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	bf00      	nop
 8004d02:	e0a5      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a9b      	ldr	r2, [pc, #620]	; (8004f78 <UART_SetConfig+0x338>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d123      	bne.n	8004d56 <UART_SetConfig+0x116>
 8004d0e:	4b99      	ldr	r3, [pc, #612]	; (8004f74 <UART_SetConfig+0x334>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d012      	beq.n	8004d42 <UART_SetConfig+0x102>
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d802      	bhi.n	8004d28 <UART_SetConfig+0xe8>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <UART_SetConfig+0xf6>
 8004d26:	e012      	b.n	8004d4e <UART_SetConfig+0x10e>
 8004d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2c:	d00c      	beq.n	8004d48 <UART_SetConfig+0x108>
 8004d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d32:	d003      	beq.n	8004d3c <UART_SetConfig+0xfc>
 8004d34:	e00b      	b.n	8004d4e <UART_SetConfig+0x10e>
 8004d36:	2300      	movs	r3, #0
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e089      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e086      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d42:	2304      	movs	r3, #4
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e083      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e080      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d4e:	2310      	movs	r3, #16
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	bf00      	nop
 8004d54:	e07c      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a88      	ldr	r2, [pc, #544]	; (8004f7c <UART_SetConfig+0x33c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d123      	bne.n	8004da8 <UART_SetConfig+0x168>
 8004d60:	4b84      	ldr	r3, [pc, #528]	; (8004f74 <UART_SetConfig+0x334>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d6c:	d012      	beq.n	8004d94 <UART_SetConfig+0x154>
 8004d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d72:	d802      	bhi.n	8004d7a <UART_SetConfig+0x13a>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <UART_SetConfig+0x148>
 8004d78:	e012      	b.n	8004da0 <UART_SetConfig+0x160>
 8004d7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d7e:	d00c      	beq.n	8004d9a <UART_SetConfig+0x15a>
 8004d80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d84:	d003      	beq.n	8004d8e <UART_SetConfig+0x14e>
 8004d86:	e00b      	b.n	8004da0 <UART_SetConfig+0x160>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e060      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e05d      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d94:	2304      	movs	r3, #4
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e05a      	b.n	8004e50 <UART_SetConfig+0x210>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e057      	b.n	8004e50 <UART_SetConfig+0x210>
 8004da0:	2310      	movs	r3, #16
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	bf00      	nop
 8004da6:	e053      	b.n	8004e50 <UART_SetConfig+0x210>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a74      	ldr	r2, [pc, #464]	; (8004f80 <UART_SetConfig+0x340>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d123      	bne.n	8004dfa <UART_SetConfig+0x1ba>
 8004db2:	4b70      	ldr	r3, [pc, #448]	; (8004f74 <UART_SetConfig+0x334>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dbe:	d012      	beq.n	8004de6 <UART_SetConfig+0x1a6>
 8004dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc4:	d802      	bhi.n	8004dcc <UART_SetConfig+0x18c>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <UART_SetConfig+0x19a>
 8004dca:	e012      	b.n	8004df2 <UART_SetConfig+0x1b2>
 8004dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dd0:	d00c      	beq.n	8004dec <UART_SetConfig+0x1ac>
 8004dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dd6:	d003      	beq.n	8004de0 <UART_SetConfig+0x1a0>
 8004dd8:	e00b      	b.n	8004df2 <UART_SetConfig+0x1b2>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e037      	b.n	8004e50 <UART_SetConfig+0x210>
 8004de0:	2302      	movs	r3, #2
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e034      	b.n	8004e50 <UART_SetConfig+0x210>
 8004de6:	2304      	movs	r3, #4
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e031      	b.n	8004e50 <UART_SetConfig+0x210>
 8004dec:	2308      	movs	r3, #8
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e02e      	b.n	8004e50 <UART_SetConfig+0x210>
 8004df2:	2310      	movs	r3, #16
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	bf00      	nop
 8004df8:	e02a      	b.n	8004e50 <UART_SetConfig+0x210>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a61      	ldr	r2, [pc, #388]	; (8004f84 <UART_SetConfig+0x344>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d123      	bne.n	8004e4c <UART_SetConfig+0x20c>
 8004e04:	4b5b      	ldr	r3, [pc, #364]	; (8004f74 <UART_SetConfig+0x334>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e10:	d012      	beq.n	8004e38 <UART_SetConfig+0x1f8>
 8004e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e16:	d802      	bhi.n	8004e1e <UART_SetConfig+0x1de>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <UART_SetConfig+0x1ec>
 8004e1c:	e012      	b.n	8004e44 <UART_SetConfig+0x204>
 8004e1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e22:	d00c      	beq.n	8004e3e <UART_SetConfig+0x1fe>
 8004e24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e28:	d003      	beq.n	8004e32 <UART_SetConfig+0x1f2>
 8004e2a:	e00b      	b.n	8004e44 <UART_SetConfig+0x204>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e00e      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e32:	2302      	movs	r3, #2
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e00b      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e008      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e005      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e44:	2310      	movs	r3, #16
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	bf00      	nop
 8004e4a:	e001      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e58:	d15d      	bne.n	8004f16 <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8004e5a:	7ffb      	ldrb	r3, [r7, #31]
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d828      	bhi.n	8004eb2 <UART_SetConfig+0x272>
 8004e60:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <UART_SetConfig+0x228>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004eb3 	.word	0x08004eb3
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004eb3 	.word	0x08004eb3
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004eb3 	.word	0x08004eb3
 8004e88:	08004eab 	.word	0x08004eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7fe fec6 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8004e90:	61b8      	str	r0, [r7, #24]
        break;
 8004e92:	e013      	b.n	8004ebc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7fe fee4 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8004e98:	61b8      	str	r0, [r7, #24]
        break;
 8004e9a:	e00f      	b.n	8004ebc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b3a      	ldr	r3, [pc, #232]	; (8004f88 <UART_SetConfig+0x348>)
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e00c      	b.n	8004ebc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7fe fe45 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004ea6:	61b8      	str	r0, [r7, #24]
        break;
 8004ea8:	e008      	b.n	8004ebc <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e004      	b.n	8004ebc <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8085 	beq.w	8004fce <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	005a      	lsls	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	441a      	add	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0f      	cmp	r3, #15
 8004ee0:	d916      	bls.n	8004f10 <UART_SetConfig+0x2d0>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d212      	bcs.n	8004f10 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f023 030f 	bic.w	r3, r3, #15
 8004ef2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	89fa      	ldrh	r2, [r7, #14]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e05e      	b.n	8004fce <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	77bb      	strb	r3, [r7, #30]
 8004f14:	e05b      	b.n	8004fce <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d837      	bhi.n	8004f8c <UART_SetConfig+0x34c>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x2e4>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f59 	.word	0x08004f59
 8004f30:	08004f8d 	.word	0x08004f8d
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f48:	f7fe fe68 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8004f4c:	61b8      	str	r0, [r7, #24]
        break;
 8004f4e:	e022      	b.n	8004f96 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fe86 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8004f54:	61b8      	str	r0, [r7, #24]
        break;
 8004f56:	e01e      	b.n	8004f96 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <UART_SetConfig+0x348>)
 8004f5a:	61bb      	str	r3, [r7, #24]
        break;
 8004f5c:	e01b      	b.n	8004f96 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fde7 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8004f62:	61b8      	str	r0, [r7, #24]
        break;
 8004f64:	e017      	b.n	8004f96 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	61bb      	str	r3, [r7, #24]
        break;
 8004f6c:	e013      	b.n	8004f96 <UART_SetConfig+0x356>
 8004f6e:	bf00      	nop
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40004400 	.word	0x40004400
 8004f7c:	40004800 	.word	0x40004800
 8004f80:	40004c00 	.word	0x40004c00
 8004f84:	40005000 	.word	0x40005000
 8004f88:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	77bb      	strb	r3, [r7, #30]
        break;
 8004f94:	bf00      	nop
    }

    if (pclk != 0U)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d018      	beq.n	8004fce <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	085a      	lsrs	r2, r3, #1
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b0f      	cmp	r3, #15
 8004fb6:	d908      	bls.n	8004fca <UART_SetConfig+0x38a>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d204      	bcs.n	8004fca <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	e001      	b.n	8004fce <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fda:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	6852      	ldr	r2, [r2, #4]
 8005002:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	6852      	ldr	r2, [r2, #4]
 8005024:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	6852      	ldr	r2, [r2, #4]
 8005046:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6852      	ldr	r2, [r2, #4]
 8005068:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	6892      	ldr	r2, [r2, #8]
 800508a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	6892      	ldr	r2, [r2, #8]
 80050ac:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01a      	beq.n	80050fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	6852      	ldr	r2, [r2, #4]
 80050ce:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e2:	d10a      	bne.n	80050fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	6852      	ldr	r2, [r2, #4]
 80050ee:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6852      	ldr	r2, [r2, #4]
 8005110:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005138:	f7fb feee 	bl	8000f18 <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10e      	bne.n	800516a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f82d 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e023      	b.n	80051b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d10e      	bne.n	8005196 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f817 	bl	80051ba <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00d      	b.n	80051b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	e05e      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d05a      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d4:	f7fb fea0 	bl	8000f18 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d802      	bhi.n	80051ea <UART_WaitOnFlagUntilTimeout+0x30>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11b      	bne.n	8005222 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6892      	ldr	r2, [r2, #8]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e043      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02c      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523e:	d124      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	6892      	ldr	r2, [r2, #8]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	401a      	ands	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d091      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052ba:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4013      	ands	r3, r2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052e8:	b084      	sub	sp, #16
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	f107 0014 	add.w	r0, r7, #20
 80052f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	b004      	add	sp, #16
 8005328:	4770      	bx	lr
	...

0800532c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800532c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005364 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005330:	480d      	ldr	r0, [pc, #52]	; (8005368 <LoopForever+0x6>)
  ldr r1, =_edata
 8005332:	490e      	ldr	r1, [pc, #56]	; (800536c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005334:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <LoopForever+0xe>)
  movs r3, #0
 8005336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005338:	e002      	b.n	8005340 <LoopCopyDataInit>

0800533a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800533a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800533c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800533e:	3304      	adds	r3, #4

08005340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005344:	d3f9      	bcc.n	800533a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005346:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005348:	4c0b      	ldr	r4, [pc, #44]	; (8005378 <LoopForever+0x16>)
  movs r3, #0
 800534a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800534c:	e001      	b.n	8005352 <LoopFillZerobss>

0800534e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800534e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005350:	3204      	adds	r2, #4

08005352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005354:	d3fb      	bcc.n	800534e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005356:	f7fb fd73 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800535a:	f000 f817 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800535e:	f7fa ff8f 	bl	8000280 <main>

08005362 <LoopForever>:

LoopForever:
    b LoopForever
 8005362:	e7fe      	b.n	8005362 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005364:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800536c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005370:	08005cb4 	.word	0x08005cb4
  ldr r2, =_sbss
 8005374:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8005378:	20000568 	.word	0x20000568

0800537c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800537c:	e7fe      	b.n	800537c <ADC1_2_IRQHandler>
	...

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0d      	ldr	r6, [pc, #52]	; (80053c4 <__libc_init_array+0x38>)
 8005390:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005392:	1ba4      	subs	r4, r4, r6
 8005394:	10a4      	asrs	r4, r4, #2
 8005396:	2500      	movs	r5, #0
 8005398:	42a5      	cmp	r5, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	4e0b      	ldr	r6, [pc, #44]	; (80053cc <__libc_init_array+0x40>)
 800539e:	4c0c      	ldr	r4, [pc, #48]	; (80053d0 <__libc_init_array+0x44>)
 80053a0:	f000 fc3e 	bl	8005c20 <_init>
 80053a4:	1ba4      	subs	r4, r4, r6
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	2500      	movs	r5, #0
 80053aa:	42a5      	cmp	r5, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b4:	4798      	blx	r3
 80053b6:	3501      	adds	r5, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053be:	4798      	blx	r3
 80053c0:	3501      	adds	r5, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08005cac 	.word	0x08005cac
 80053c8:	08005cac 	.word	0x08005cac
 80053cc:	08005cac 	.word	0x08005cac
 80053d0:	08005cb0 	.word	0x08005cb0

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <siprintf>:
 80053e4:	b40e      	push	{r1, r2, r3}
 80053e6:	b500      	push	{lr}
 80053e8:	b09c      	sub	sp, #112	; 0x70
 80053ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 80053ee:	ab1d      	add	r3, sp, #116	; 0x74
 80053f0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80053f4:	9002      	str	r0, [sp, #8]
 80053f6:	9006      	str	r0, [sp, #24]
 80053f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053fc:	480a      	ldr	r0, [pc, #40]	; (8005428 <siprintf+0x44>)
 80053fe:	9104      	str	r1, [sp, #16]
 8005400:	9107      	str	r1, [sp, #28]
 8005402:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005406:	f853 2b04 	ldr.w	r2, [r3], #4
 800540a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	a902      	add	r1, sp, #8
 8005414:	f000 f866 	bl	80054e4 <_svfiprintf_r>
 8005418:	9b02      	ldr	r3, [sp, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	b01c      	add	sp, #112	; 0x70
 8005420:	f85d eb04 	ldr.w	lr, [sp], #4
 8005424:	b003      	add	sp, #12
 8005426:	4770      	bx	lr
 8005428:	20000010 	.word	0x20000010

0800542c <__ssputs_r>:
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	688e      	ldr	r6, [r1, #8]
 8005432:	429e      	cmp	r6, r3
 8005434:	4682      	mov	sl, r0
 8005436:	460c      	mov	r4, r1
 8005438:	4691      	mov	r9, r2
 800543a:	4698      	mov	r8, r3
 800543c:	d835      	bhi.n	80054aa <__ssputs_r+0x7e>
 800543e:	898a      	ldrh	r2, [r1, #12]
 8005440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005444:	d031      	beq.n	80054aa <__ssputs_r+0x7e>
 8005446:	6825      	ldr	r5, [r4, #0]
 8005448:	6909      	ldr	r1, [r1, #16]
 800544a:	1a6f      	subs	r7, r5, r1
 800544c:	6965      	ldr	r5, [r4, #20]
 800544e:	2302      	movs	r3, #2
 8005450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005454:	fb95 f5f3 	sdiv	r5, r5, r3
 8005458:	f108 0301 	add.w	r3, r8, #1
 800545c:	443b      	add	r3, r7
 800545e:	429d      	cmp	r5, r3
 8005460:	bf38      	it	cc
 8005462:	461d      	movcc	r5, r3
 8005464:	0553      	lsls	r3, r2, #21
 8005466:	d531      	bpl.n	80054cc <__ssputs_r+0xa0>
 8005468:	4629      	mov	r1, r5
 800546a:	f000 fb39 	bl	8005ae0 <_malloc_r>
 800546e:	4606      	mov	r6, r0
 8005470:	b950      	cbnz	r0, 8005488 <__ssputs_r+0x5c>
 8005472:	230c      	movs	r3, #12
 8005474:	f8ca 3000 	str.w	r3, [sl]
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	463a      	mov	r2, r7
 800548a:	6921      	ldr	r1, [r4, #16]
 800548c:	f000 fab4 	bl	80059f8 <memcpy>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	6126      	str	r6, [r4, #16]
 800549e:	6165      	str	r5, [r4, #20]
 80054a0:	443e      	add	r6, r7
 80054a2:	1bed      	subs	r5, r5, r7
 80054a4:	6026      	str	r6, [r4, #0]
 80054a6:	60a5      	str	r5, [r4, #8]
 80054a8:	4646      	mov	r6, r8
 80054aa:	4546      	cmp	r6, r8
 80054ac:	bf28      	it	cs
 80054ae:	4646      	movcs	r6, r8
 80054b0:	4632      	mov	r2, r6
 80054b2:	4649      	mov	r1, r9
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	f000 faaa 	bl	8005a0e <memmove>
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	1b9b      	subs	r3, r3, r6
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	441e      	add	r6, r3
 80054c4:	6026      	str	r6, [r4, #0]
 80054c6:	2000      	movs	r0, #0
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	462a      	mov	r2, r5
 80054ce:	f000 fb65 	bl	8005b9c <_realloc_r>
 80054d2:	4606      	mov	r6, r0
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d1e1      	bne.n	800549c <__ssputs_r+0x70>
 80054d8:	6921      	ldr	r1, [r4, #16]
 80054da:	4650      	mov	r0, sl
 80054dc:	f000 fab2 	bl	8005a44 <_free_r>
 80054e0:	e7c7      	b.n	8005472 <__ssputs_r+0x46>
	...

080054e4 <_svfiprintf_r>:
 80054e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e8:	b09d      	sub	sp, #116	; 0x74
 80054ea:	4680      	mov	r8, r0
 80054ec:	9303      	str	r3, [sp, #12]
 80054ee:	898b      	ldrh	r3, [r1, #12]
 80054f0:	061c      	lsls	r4, r3, #24
 80054f2:	460d      	mov	r5, r1
 80054f4:	4616      	mov	r6, r2
 80054f6:	d50f      	bpl.n	8005518 <_svfiprintf_r+0x34>
 80054f8:	690b      	ldr	r3, [r1, #16]
 80054fa:	b96b      	cbnz	r3, 8005518 <_svfiprintf_r+0x34>
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	f000 faef 	bl	8005ae0 <_malloc_r>
 8005502:	6028      	str	r0, [r5, #0]
 8005504:	6128      	str	r0, [r5, #16]
 8005506:	b928      	cbnz	r0, 8005514 <_svfiprintf_r+0x30>
 8005508:	230c      	movs	r3, #12
 800550a:	f8c8 3000 	str.w	r3, [r8]
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	e0c5      	b.n	80056a0 <_svfiprintf_r+0x1bc>
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	616b      	str	r3, [r5, #20]
 8005518:	2300      	movs	r3, #0
 800551a:	9309      	str	r3, [sp, #36]	; 0x24
 800551c:	2320      	movs	r3, #32
 800551e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005522:	2330      	movs	r3, #48	; 0x30
 8005524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005528:	f04f 0b01 	mov.w	fp, #1
 800552c:	4637      	mov	r7, r6
 800552e:	463c      	mov	r4, r7
 8005530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d13c      	bne.n	80055b2 <_svfiprintf_r+0xce>
 8005538:	ebb7 0a06 	subs.w	sl, r7, r6
 800553c:	d00b      	beq.n	8005556 <_svfiprintf_r+0x72>
 800553e:	4653      	mov	r3, sl
 8005540:	4632      	mov	r2, r6
 8005542:	4629      	mov	r1, r5
 8005544:	4640      	mov	r0, r8
 8005546:	f7ff ff71 	bl	800542c <__ssputs_r>
 800554a:	3001      	adds	r0, #1
 800554c:	f000 80a3 	beq.w	8005696 <_svfiprintf_r+0x1b2>
 8005550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005552:	4453      	add	r3, sl
 8005554:	9309      	str	r3, [sp, #36]	; 0x24
 8005556:	783b      	ldrb	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 809c 	beq.w	8005696 <_svfiprintf_r+0x1b2>
 800555e:	2300      	movs	r3, #0
 8005560:	f04f 32ff 	mov.w	r2, #4294967295
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	9205      	str	r2, [sp, #20]
 800556a:	9306      	str	r3, [sp, #24]
 800556c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005570:	931a      	str	r3, [sp, #104]	; 0x68
 8005572:	2205      	movs	r2, #5
 8005574:	7821      	ldrb	r1, [r4, #0]
 8005576:	4850      	ldr	r0, [pc, #320]	; (80056b8 <_svfiprintf_r+0x1d4>)
 8005578:	f7fa fe32 	bl	80001e0 <memchr>
 800557c:	1c67      	adds	r7, r4, #1
 800557e:	9b04      	ldr	r3, [sp, #16]
 8005580:	b9d8      	cbnz	r0, 80055ba <_svfiprintf_r+0xd6>
 8005582:	06d9      	lsls	r1, r3, #27
 8005584:	bf44      	itt	mi
 8005586:	2220      	movmi	r2, #32
 8005588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800558c:	071a      	lsls	r2, r3, #28
 800558e:	bf44      	itt	mi
 8005590:	222b      	movmi	r2, #43	; 0x2b
 8005592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005596:	7822      	ldrb	r2, [r4, #0]
 8005598:	2a2a      	cmp	r2, #42	; 0x2a
 800559a:	d016      	beq.n	80055ca <_svfiprintf_r+0xe6>
 800559c:	9a07      	ldr	r2, [sp, #28]
 800559e:	2100      	movs	r1, #0
 80055a0:	200a      	movs	r0, #10
 80055a2:	4627      	mov	r7, r4
 80055a4:	3401      	adds	r4, #1
 80055a6:	783b      	ldrb	r3, [r7, #0]
 80055a8:	3b30      	subs	r3, #48	; 0x30
 80055aa:	2b09      	cmp	r3, #9
 80055ac:	d951      	bls.n	8005652 <_svfiprintf_r+0x16e>
 80055ae:	b1c9      	cbz	r1, 80055e4 <_svfiprintf_r+0x100>
 80055b0:	e011      	b.n	80055d6 <_svfiprintf_r+0xf2>
 80055b2:	2b25      	cmp	r3, #37	; 0x25
 80055b4:	d0c0      	beq.n	8005538 <_svfiprintf_r+0x54>
 80055b6:	4627      	mov	r7, r4
 80055b8:	e7b9      	b.n	800552e <_svfiprintf_r+0x4a>
 80055ba:	4a3f      	ldr	r2, [pc, #252]	; (80056b8 <_svfiprintf_r+0x1d4>)
 80055bc:	1a80      	subs	r0, r0, r2
 80055be:	fa0b f000 	lsl.w	r0, fp, r0
 80055c2:	4318      	orrs	r0, r3
 80055c4:	9004      	str	r0, [sp, #16]
 80055c6:	463c      	mov	r4, r7
 80055c8:	e7d3      	b.n	8005572 <_svfiprintf_r+0x8e>
 80055ca:	9a03      	ldr	r2, [sp, #12]
 80055cc:	1d11      	adds	r1, r2, #4
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	9103      	str	r1, [sp, #12]
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	db01      	blt.n	80055da <_svfiprintf_r+0xf6>
 80055d6:	9207      	str	r2, [sp, #28]
 80055d8:	e004      	b.n	80055e4 <_svfiprintf_r+0x100>
 80055da:	4252      	negs	r2, r2
 80055dc:	f043 0302 	orr.w	r3, r3, #2
 80055e0:	9207      	str	r2, [sp, #28]
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	783b      	ldrb	r3, [r7, #0]
 80055e6:	2b2e      	cmp	r3, #46	; 0x2e
 80055e8:	d10e      	bne.n	8005608 <_svfiprintf_r+0x124>
 80055ea:	787b      	ldrb	r3, [r7, #1]
 80055ec:	2b2a      	cmp	r3, #42	; 0x2a
 80055ee:	f107 0101 	add.w	r1, r7, #1
 80055f2:	d132      	bne.n	800565a <_svfiprintf_r+0x176>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	1d1a      	adds	r2, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	9203      	str	r2, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfb8      	it	lt
 8005600:	f04f 33ff 	movlt.w	r3, #4294967295
 8005604:	3702      	adds	r7, #2
 8005606:	9305      	str	r3, [sp, #20]
 8005608:	4c2c      	ldr	r4, [pc, #176]	; (80056bc <_svfiprintf_r+0x1d8>)
 800560a:	7839      	ldrb	r1, [r7, #0]
 800560c:	2203      	movs	r2, #3
 800560e:	4620      	mov	r0, r4
 8005610:	f7fa fde6 	bl	80001e0 <memchr>
 8005614:	b138      	cbz	r0, 8005626 <_svfiprintf_r+0x142>
 8005616:	2340      	movs	r3, #64	; 0x40
 8005618:	1b00      	subs	r0, r0, r4
 800561a:	fa03 f000 	lsl.w	r0, r3, r0
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	4303      	orrs	r3, r0
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	3701      	adds	r7, #1
 8005626:	7839      	ldrb	r1, [r7, #0]
 8005628:	4825      	ldr	r0, [pc, #148]	; (80056c0 <_svfiprintf_r+0x1dc>)
 800562a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800562e:	2206      	movs	r2, #6
 8005630:	1c7e      	adds	r6, r7, #1
 8005632:	f7fa fdd5 	bl	80001e0 <memchr>
 8005636:	2800      	cmp	r0, #0
 8005638:	d035      	beq.n	80056a6 <_svfiprintf_r+0x1c2>
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <_svfiprintf_r+0x1e0>)
 800563c:	b9fb      	cbnz	r3, 800567e <_svfiprintf_r+0x19a>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	3307      	adds	r3, #7
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	3308      	adds	r3, #8
 8005648:	9303      	str	r3, [sp, #12]
 800564a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564c:	444b      	add	r3, r9
 800564e:	9309      	str	r3, [sp, #36]	; 0x24
 8005650:	e76c      	b.n	800552c <_svfiprintf_r+0x48>
 8005652:	fb00 3202 	mla	r2, r0, r2, r3
 8005656:	2101      	movs	r1, #1
 8005658:	e7a3      	b.n	80055a2 <_svfiprintf_r+0xbe>
 800565a:	2300      	movs	r3, #0
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	4618      	mov	r0, r3
 8005660:	240a      	movs	r4, #10
 8005662:	460f      	mov	r7, r1
 8005664:	3101      	adds	r1, #1
 8005666:	783a      	ldrb	r2, [r7, #0]
 8005668:	3a30      	subs	r2, #48	; 0x30
 800566a:	2a09      	cmp	r2, #9
 800566c:	d903      	bls.n	8005676 <_svfiprintf_r+0x192>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ca      	beq.n	8005608 <_svfiprintf_r+0x124>
 8005672:	9005      	str	r0, [sp, #20]
 8005674:	e7c8      	b.n	8005608 <_svfiprintf_r+0x124>
 8005676:	fb04 2000 	mla	r0, r4, r0, r2
 800567a:	2301      	movs	r3, #1
 800567c:	e7f1      	b.n	8005662 <_svfiprintf_r+0x17e>
 800567e:	ab03      	add	r3, sp, #12
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	462a      	mov	r2, r5
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <_svfiprintf_r+0x1e4>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	4640      	mov	r0, r8
 800568a:	f3af 8000 	nop.w
 800568e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005692:	4681      	mov	r9, r0
 8005694:	d1d9      	bne.n	800564a <_svfiprintf_r+0x166>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	065b      	lsls	r3, r3, #25
 800569a:	f53f af38 	bmi.w	800550e <_svfiprintf_r+0x2a>
 800569e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a0:	b01d      	add	sp, #116	; 0x74
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	ab03      	add	r3, sp, #12
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	462a      	mov	r2, r5
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_svfiprintf_r+0x1e4>)
 80056ae:	a904      	add	r1, sp, #16
 80056b0:	4640      	mov	r0, r8
 80056b2:	f000 f881 	bl	80057b8 <_printf_i>
 80056b6:	e7ea      	b.n	800568e <_svfiprintf_r+0x1aa>
 80056b8:	08005c78 	.word	0x08005c78
 80056bc:	08005c7e 	.word	0x08005c7e
 80056c0:	08005c82 	.word	0x08005c82
 80056c4:	00000000 	.word	0x00000000
 80056c8:	0800542d 	.word	0x0800542d

080056cc <_printf_common>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	4691      	mov	r9, r2
 80056d2:	461f      	mov	r7, r3
 80056d4:	688a      	ldr	r2, [r1, #8]
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056dc:	4293      	cmp	r3, r2
 80056de:	bfb8      	it	lt
 80056e0:	4613      	movlt	r3, r2
 80056e2:	f8c9 3000 	str.w	r3, [r9]
 80056e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ea:	4606      	mov	r6, r0
 80056ec:	460c      	mov	r4, r1
 80056ee:	b112      	cbz	r2, 80056f6 <_printf_common+0x2a>
 80056f0:	3301      	adds	r3, #1
 80056f2:	f8c9 3000 	str.w	r3, [r9]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	0699      	lsls	r1, r3, #26
 80056fa:	bf42      	ittt	mi
 80056fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005700:	3302      	addmi	r3, #2
 8005702:	f8c9 3000 	strmi.w	r3, [r9]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d107      	bne.n	800571e <_printf_common+0x52>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	f8d9 2000 	ldr.w	r2, [r9]
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	429d      	cmp	r5, r3
 800571c:	db29      	blt.n	8005772 <_printf_common+0xa6>
 800571e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	3300      	adds	r3, #0
 8005726:	bf18      	it	ne
 8005728:	2301      	movne	r3, #1
 800572a:	0692      	lsls	r2, r2, #26
 800572c:	d42e      	bmi.n	800578c <_printf_common+0xc0>
 800572e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005732:	4639      	mov	r1, r7
 8005734:	4630      	mov	r0, r6
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d021      	beq.n	8005780 <_printf_common+0xb4>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	68e5      	ldr	r5, [r4, #12]
 8005740:	f8d9 2000 	ldr.w	r2, [r9]
 8005744:	f003 0306 	and.w	r3, r3, #6
 8005748:	2b04      	cmp	r3, #4
 800574a:	bf08      	it	eq
 800574c:	1aad      	subeq	r5, r5, r2
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	bf0c      	ite	eq
 8005754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005758:	2500      	movne	r5, #0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfc4      	itt	gt
 800575e:	1a9b      	subgt	r3, r3, r2
 8005760:	18ed      	addgt	r5, r5, r3
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	341a      	adds	r4, #26
 8005768:	454d      	cmp	r5, r9
 800576a:	d11b      	bne.n	80057a4 <_printf_common+0xd8>
 800576c:	2000      	movs	r0, #0
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005772:	2301      	movs	r3, #1
 8005774:	4652      	mov	r2, sl
 8005776:	4639      	mov	r1, r7
 8005778:	4630      	mov	r0, r6
 800577a:	47c0      	blx	r8
 800577c:	3001      	adds	r0, #1
 800577e:	d103      	bne.n	8005788 <_printf_common+0xbc>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	3501      	adds	r5, #1
 800578a:	e7c2      	b.n	8005712 <_printf_common+0x46>
 800578c:	18e1      	adds	r1, r4, r3
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	2030      	movs	r0, #48	; 0x30
 8005792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005796:	4422      	add	r2, r4
 8005798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800579c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057a0:	3302      	adds	r3, #2
 80057a2:	e7c4      	b.n	800572e <_printf_common+0x62>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4622      	mov	r2, r4
 80057a8:	4639      	mov	r1, r7
 80057aa:	4630      	mov	r0, r6
 80057ac:	47c0      	blx	r8
 80057ae:	3001      	adds	r0, #1
 80057b0:	d0e6      	beq.n	8005780 <_printf_common+0xb4>
 80057b2:	f109 0901 	add.w	r9, r9, #1
 80057b6:	e7d7      	b.n	8005768 <_printf_common+0x9c>

080057b8 <_printf_i>:
 80057b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057bc:	4617      	mov	r7, r2
 80057be:	7e0a      	ldrb	r2, [r1, #24]
 80057c0:	b085      	sub	sp, #20
 80057c2:	2a6e      	cmp	r2, #110	; 0x6e
 80057c4:	4698      	mov	r8, r3
 80057c6:	4606      	mov	r6, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80057d0:	f000 80bc 	beq.w	800594c <_printf_i+0x194>
 80057d4:	d81a      	bhi.n	800580c <_printf_i+0x54>
 80057d6:	2a63      	cmp	r2, #99	; 0x63
 80057d8:	d02e      	beq.n	8005838 <_printf_i+0x80>
 80057da:	d80a      	bhi.n	80057f2 <_printf_i+0x3a>
 80057dc:	2a00      	cmp	r2, #0
 80057de:	f000 80c8 	beq.w	8005972 <_printf_i+0x1ba>
 80057e2:	2a58      	cmp	r2, #88	; 0x58
 80057e4:	f000 808a 	beq.w	80058fc <_printf_i+0x144>
 80057e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80057f0:	e02a      	b.n	8005848 <_printf_i+0x90>
 80057f2:	2a64      	cmp	r2, #100	; 0x64
 80057f4:	d001      	beq.n	80057fa <_printf_i+0x42>
 80057f6:	2a69      	cmp	r2, #105	; 0x69
 80057f8:	d1f6      	bne.n	80057e8 <_printf_i+0x30>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005802:	d023      	beq.n	800584c <_printf_i+0x94>
 8005804:	1d11      	adds	r1, r2, #4
 8005806:	6019      	str	r1, [r3, #0]
 8005808:	6813      	ldr	r3, [r2, #0]
 800580a:	e027      	b.n	800585c <_printf_i+0xa4>
 800580c:	2a73      	cmp	r2, #115	; 0x73
 800580e:	f000 80b4 	beq.w	800597a <_printf_i+0x1c2>
 8005812:	d808      	bhi.n	8005826 <_printf_i+0x6e>
 8005814:	2a6f      	cmp	r2, #111	; 0x6f
 8005816:	d02a      	beq.n	800586e <_printf_i+0xb6>
 8005818:	2a70      	cmp	r2, #112	; 0x70
 800581a:	d1e5      	bne.n	80057e8 <_printf_i+0x30>
 800581c:	680a      	ldr	r2, [r1, #0]
 800581e:	f042 0220 	orr.w	r2, r2, #32
 8005822:	600a      	str	r2, [r1, #0]
 8005824:	e003      	b.n	800582e <_printf_i+0x76>
 8005826:	2a75      	cmp	r2, #117	; 0x75
 8005828:	d021      	beq.n	800586e <_printf_i+0xb6>
 800582a:	2a78      	cmp	r2, #120	; 0x78
 800582c:	d1dc      	bne.n	80057e8 <_printf_i+0x30>
 800582e:	2278      	movs	r2, #120	; 0x78
 8005830:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005834:	496e      	ldr	r1, [pc, #440]	; (80059f0 <_printf_i+0x238>)
 8005836:	e064      	b.n	8005902 <_printf_i+0x14a>
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800583e:	1d11      	adds	r1, r2, #4
 8005840:	6019      	str	r1, [r3, #0]
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e0a3      	b.n	8005994 <_printf_i+0x1dc>
 800584c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005850:	f102 0104 	add.w	r1, r2, #4
 8005854:	6019      	str	r1, [r3, #0]
 8005856:	d0d7      	beq.n	8005808 <_printf_i+0x50>
 8005858:	f9b2 3000 	ldrsh.w	r3, [r2]
 800585c:	2b00      	cmp	r3, #0
 800585e:	da03      	bge.n	8005868 <_printf_i+0xb0>
 8005860:	222d      	movs	r2, #45	; 0x2d
 8005862:	425b      	negs	r3, r3
 8005864:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005868:	4962      	ldr	r1, [pc, #392]	; (80059f4 <_printf_i+0x23c>)
 800586a:	220a      	movs	r2, #10
 800586c:	e017      	b.n	800589e <_printf_i+0xe6>
 800586e:	6820      	ldr	r0, [r4, #0]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005876:	d003      	beq.n	8005880 <_printf_i+0xc8>
 8005878:	1d08      	adds	r0, r1, #4
 800587a:	6018      	str	r0, [r3, #0]
 800587c:	680b      	ldr	r3, [r1, #0]
 800587e:	e006      	b.n	800588e <_printf_i+0xd6>
 8005880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005884:	f101 0004 	add.w	r0, r1, #4
 8005888:	6018      	str	r0, [r3, #0]
 800588a:	d0f7      	beq.n	800587c <_printf_i+0xc4>
 800588c:	880b      	ldrh	r3, [r1, #0]
 800588e:	4959      	ldr	r1, [pc, #356]	; (80059f4 <_printf_i+0x23c>)
 8005890:	2a6f      	cmp	r2, #111	; 0x6f
 8005892:	bf14      	ite	ne
 8005894:	220a      	movne	r2, #10
 8005896:	2208      	moveq	r2, #8
 8005898:	2000      	movs	r0, #0
 800589a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800589e:	6865      	ldr	r5, [r4, #4]
 80058a0:	60a5      	str	r5, [r4, #8]
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	f2c0 809c 	blt.w	80059e0 <_printf_i+0x228>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	f020 0004 	bic.w	r0, r0, #4
 80058ae:	6020      	str	r0, [r4, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13f      	bne.n	8005934 <_printf_i+0x17c>
 80058b4:	2d00      	cmp	r5, #0
 80058b6:	f040 8095 	bne.w	80059e4 <_printf_i+0x22c>
 80058ba:	4675      	mov	r5, lr
 80058bc:	2a08      	cmp	r2, #8
 80058be:	d10b      	bne.n	80058d8 <_printf_i+0x120>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	07da      	lsls	r2, r3, #31
 80058c4:	d508      	bpl.n	80058d8 <_printf_i+0x120>
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	bfde      	ittt	le
 80058ce:	2330      	movle	r3, #48	; 0x30
 80058d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058d8:	ebae 0305 	sub.w	r3, lr, r5
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	f8cd 8000 	str.w	r8, [sp]
 80058e2:	463b      	mov	r3, r7
 80058e4:	aa03      	add	r2, sp, #12
 80058e6:	4621      	mov	r1, r4
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7ff feef 	bl	80056cc <_printf_common>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d155      	bne.n	800599e <_printf_i+0x1e6>
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	b005      	add	sp, #20
 80058f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058fc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005900:	493c      	ldr	r1, [pc, #240]	; (80059f4 <_printf_i+0x23c>)
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	f012 0f80 	tst.w	r2, #128	; 0x80
 800590a:	f100 0504 	add.w	r5, r0, #4
 800590e:	601d      	str	r5, [r3, #0]
 8005910:	d001      	beq.n	8005916 <_printf_i+0x15e>
 8005912:	6803      	ldr	r3, [r0, #0]
 8005914:	e002      	b.n	800591c <_printf_i+0x164>
 8005916:	0655      	lsls	r5, r2, #25
 8005918:	d5fb      	bpl.n	8005912 <_printf_i+0x15a>
 800591a:	8803      	ldrh	r3, [r0, #0]
 800591c:	07d0      	lsls	r0, r2, #31
 800591e:	bf44      	itt	mi
 8005920:	f042 0220 	orrmi.w	r2, r2, #32
 8005924:	6022      	strmi	r2, [r4, #0]
 8005926:	b91b      	cbnz	r3, 8005930 <_printf_i+0x178>
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	f022 0220 	bic.w	r2, r2, #32
 800592e:	6022      	str	r2, [r4, #0]
 8005930:	2210      	movs	r2, #16
 8005932:	e7b1      	b.n	8005898 <_printf_i+0xe0>
 8005934:	4675      	mov	r5, lr
 8005936:	fbb3 f0f2 	udiv	r0, r3, r2
 800593a:	fb02 3310 	mls	r3, r2, r0, r3
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005944:	4603      	mov	r3, r0
 8005946:	2800      	cmp	r0, #0
 8005948:	d1f5      	bne.n	8005936 <_printf_i+0x17e>
 800594a:	e7b7      	b.n	80058bc <_printf_i+0x104>
 800594c:	6808      	ldr	r0, [r1, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	6949      	ldr	r1, [r1, #20]
 8005952:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005956:	d004      	beq.n	8005962 <_printf_i+0x1aa>
 8005958:	1d10      	adds	r0, r2, #4
 800595a:	6018      	str	r0, [r3, #0]
 800595c:	6813      	ldr	r3, [r2, #0]
 800595e:	6019      	str	r1, [r3, #0]
 8005960:	e007      	b.n	8005972 <_printf_i+0x1ba>
 8005962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005966:	f102 0004 	add.w	r0, r2, #4
 800596a:	6018      	str	r0, [r3, #0]
 800596c:	6813      	ldr	r3, [r2, #0]
 800596e:	d0f6      	beq.n	800595e <_printf_i+0x1a6>
 8005970:	8019      	strh	r1, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	4675      	mov	r5, lr
 8005978:	e7b1      	b.n	80058de <_printf_i+0x126>
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	1d11      	adds	r1, r2, #4
 800597e:	6019      	str	r1, [r3, #0]
 8005980:	6815      	ldr	r5, [r2, #0]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	2100      	movs	r1, #0
 8005986:	4628      	mov	r0, r5
 8005988:	f7fa fc2a 	bl	80001e0 <memchr>
 800598c:	b108      	cbz	r0, 8005992 <_printf_i+0x1da>
 800598e:	1b40      	subs	r0, r0, r5
 8005990:	6060      	str	r0, [r4, #4]
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	2300      	movs	r3, #0
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599c:	e79f      	b.n	80058de <_printf_i+0x126>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4639      	mov	r1, r7
 80059a4:	4630      	mov	r0, r6
 80059a6:	47c0      	blx	r8
 80059a8:	3001      	adds	r0, #1
 80059aa:	d0a2      	beq.n	80058f2 <_printf_i+0x13a>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	d507      	bpl.n	80059c2 <_printf_i+0x20a>
 80059b2:	2500      	movs	r5, #0
 80059b4:	f104 0919 	add.w	r9, r4, #25
 80059b8:	68e3      	ldr	r3, [r4, #12]
 80059ba:	9a03      	ldr	r2, [sp, #12]
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	429d      	cmp	r5, r3
 80059c0:	db05      	blt.n	80059ce <_printf_i+0x216>
 80059c2:	68e0      	ldr	r0, [r4, #12]
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	4298      	cmp	r0, r3
 80059c8:	bfb8      	it	lt
 80059ca:	4618      	movlt	r0, r3
 80059cc:	e793      	b.n	80058f6 <_printf_i+0x13e>
 80059ce:	2301      	movs	r3, #1
 80059d0:	464a      	mov	r2, r9
 80059d2:	4639      	mov	r1, r7
 80059d4:	4630      	mov	r0, r6
 80059d6:	47c0      	blx	r8
 80059d8:	3001      	adds	r0, #1
 80059da:	d08a      	beq.n	80058f2 <_printf_i+0x13a>
 80059dc:	3501      	adds	r5, #1
 80059de:	e7eb      	b.n	80059b8 <_printf_i+0x200>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1a7      	bne.n	8005934 <_printf_i+0x17c>
 80059e4:	780b      	ldrb	r3, [r1, #0]
 80059e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059ee:	e765      	b.n	80058bc <_printf_i+0x104>
 80059f0:	08005c9a 	.word	0x08005c9a
 80059f4:	08005c89 	.word	0x08005c89

080059f8 <memcpy>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	1e43      	subs	r3, r0, #1
 80059fc:	440a      	add	r2, r1
 80059fe:	4291      	cmp	r1, r2
 8005a00:	d100      	bne.n	8005a04 <memcpy+0xc>
 8005a02:	bd10      	pop	{r4, pc}
 8005a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0c:	e7f7      	b.n	80059fe <memcpy+0x6>

08005a0e <memmove>:
 8005a0e:	4288      	cmp	r0, r1
 8005a10:	b510      	push	{r4, lr}
 8005a12:	eb01 0302 	add.w	r3, r1, r2
 8005a16:	d803      	bhi.n	8005a20 <memmove+0x12>
 8005a18:	1e42      	subs	r2, r0, #1
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d10c      	bne.n	8005a38 <memmove+0x2a>
 8005a1e:	bd10      	pop	{r4, pc}
 8005a20:	4298      	cmp	r0, r3
 8005a22:	d2f9      	bcs.n	8005a18 <memmove+0xa>
 8005a24:	1881      	adds	r1, r0, r2
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	42d3      	cmn	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memmove+0x20>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a36:	e7f7      	b.n	8005a28 <memmove+0x1a>
 8005a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a40:	e7eb      	b.n	8005a1a <memmove+0xc>
	...

08005a44 <_free_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4605      	mov	r5, r0
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	d045      	beq.n	8005ad8 <_free_r+0x94>
 8005a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a50:	1f0c      	subs	r4, r1, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfb8      	it	lt
 8005a56:	18e4      	addlt	r4, r4, r3
 8005a58:	f000 f8d6 	bl	8005c08 <__malloc_lock>
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <_free_r+0x98>)
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	4610      	mov	r0, r2
 8005a62:	b933      	cbnz	r3, 8005a72 <_free_r+0x2e>
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	6014      	str	r4, [r2, #0]
 8005a68:	4628      	mov	r0, r5
 8005a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a6e:	f000 b8cc 	b.w	8005c0a <__malloc_unlock>
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	d90c      	bls.n	8005a90 <_free_r+0x4c>
 8005a76:	6821      	ldr	r1, [r4, #0]
 8005a78:	1862      	adds	r2, r4, r1
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf04      	itt	eq
 8005a7e:	681a      	ldreq	r2, [r3, #0]
 8005a80:	685b      	ldreq	r3, [r3, #4]
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	bf04      	itt	eq
 8005a86:	1852      	addeq	r2, r2, r1
 8005a88:	6022      	streq	r2, [r4, #0]
 8005a8a:	6004      	str	r4, [r0, #0]
 8005a8c:	e7ec      	b.n	8005a68 <_free_r+0x24>
 8005a8e:	4613      	mov	r3, r2
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	b10a      	cbz	r2, 8005a98 <_free_r+0x54>
 8005a94:	42a2      	cmp	r2, r4
 8005a96:	d9fa      	bls.n	8005a8e <_free_r+0x4a>
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	1858      	adds	r0, r3, r1
 8005a9c:	42a0      	cmp	r0, r4
 8005a9e:	d10b      	bne.n	8005ab8 <_free_r+0x74>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	1858      	adds	r0, r3, r1
 8005aa6:	4282      	cmp	r2, r0
 8005aa8:	6019      	str	r1, [r3, #0]
 8005aaa:	d1dd      	bne.n	8005a68 <_free_r+0x24>
 8005aac:	6810      	ldr	r0, [r2, #0]
 8005aae:	6852      	ldr	r2, [r2, #4]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	4401      	add	r1, r0
 8005ab4:	6019      	str	r1, [r3, #0]
 8005ab6:	e7d7      	b.n	8005a68 <_free_r+0x24>
 8005ab8:	d902      	bls.n	8005ac0 <_free_r+0x7c>
 8005aba:	230c      	movs	r3, #12
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	e7d3      	b.n	8005a68 <_free_r+0x24>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	1821      	adds	r1, r4, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	bf04      	itt	eq
 8005ac8:	6811      	ldreq	r1, [r2, #0]
 8005aca:	6852      	ldreq	r2, [r2, #4]
 8005acc:	6062      	str	r2, [r4, #4]
 8005ace:	bf04      	itt	eq
 8005ad0:	1809      	addeq	r1, r1, r0
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	605c      	str	r4, [r3, #4]
 8005ad6:	e7c7      	b.n	8005a68 <_free_r+0x24>
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
 8005ada:	bf00      	nop
 8005adc:	20000098 	.word	0x20000098

08005ae0 <_malloc_r>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	1ccd      	adds	r5, r1, #3
 8005ae4:	f025 0503 	bic.w	r5, r5, #3
 8005ae8:	3508      	adds	r5, #8
 8005aea:	2d0c      	cmp	r5, #12
 8005aec:	bf38      	it	cc
 8005aee:	250c      	movcc	r5, #12
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	4606      	mov	r6, r0
 8005af4:	db01      	blt.n	8005afa <_malloc_r+0x1a>
 8005af6:	42a9      	cmp	r1, r5
 8005af8:	d903      	bls.n	8005b02 <_malloc_r+0x22>
 8005afa:	230c      	movs	r3, #12
 8005afc:	6033      	str	r3, [r6, #0]
 8005afe:	2000      	movs	r0, #0
 8005b00:	bd70      	pop	{r4, r5, r6, pc}
 8005b02:	f000 f881 	bl	8005c08 <__malloc_lock>
 8005b06:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <_malloc_r+0xb4>)
 8005b08:	6814      	ldr	r4, [r2, #0]
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	b991      	cbnz	r1, 8005b34 <_malloc_r+0x54>
 8005b0e:	4c22      	ldr	r4, [pc, #136]	; (8005b98 <_malloc_r+0xb8>)
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	b91b      	cbnz	r3, 8005b1c <_malloc_r+0x3c>
 8005b14:	4630      	mov	r0, r6
 8005b16:	f000 f867 	bl	8005be8 <_sbrk_r>
 8005b1a:	6020      	str	r0, [r4, #0]
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f000 f862 	bl	8005be8 <_sbrk_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d126      	bne.n	8005b76 <_malloc_r+0x96>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 f86c 	bl	8005c0a <__malloc_unlock>
 8005b32:	e7e4      	b.n	8005afe <_malloc_r+0x1e>
 8005b34:	680b      	ldr	r3, [r1, #0]
 8005b36:	1b5b      	subs	r3, r3, r5
 8005b38:	d41a      	bmi.n	8005b70 <_malloc_r+0x90>
 8005b3a:	2b0b      	cmp	r3, #11
 8005b3c:	d90f      	bls.n	8005b5e <_malloc_r+0x7e>
 8005b3e:	600b      	str	r3, [r1, #0]
 8005b40:	50cd      	str	r5, [r1, r3]
 8005b42:	18cc      	adds	r4, r1, r3
 8005b44:	4630      	mov	r0, r6
 8005b46:	f000 f860 	bl	8005c0a <__malloc_unlock>
 8005b4a:	f104 000b 	add.w	r0, r4, #11
 8005b4e:	1d23      	adds	r3, r4, #4
 8005b50:	f020 0007 	bic.w	r0, r0, #7
 8005b54:	1ac3      	subs	r3, r0, r3
 8005b56:	d01b      	beq.n	8005b90 <_malloc_r+0xb0>
 8005b58:	425a      	negs	r2, r3
 8005b5a:	50e2      	str	r2, [r4, r3]
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	428c      	cmp	r4, r1
 8005b60:	bf0d      	iteet	eq
 8005b62:	6863      	ldreq	r3, [r4, #4]
 8005b64:	684b      	ldrne	r3, [r1, #4]
 8005b66:	6063      	strne	r3, [r4, #4]
 8005b68:	6013      	streq	r3, [r2, #0]
 8005b6a:	bf18      	it	ne
 8005b6c:	460c      	movne	r4, r1
 8005b6e:	e7e9      	b.n	8005b44 <_malloc_r+0x64>
 8005b70:	460c      	mov	r4, r1
 8005b72:	6849      	ldr	r1, [r1, #4]
 8005b74:	e7ca      	b.n	8005b0c <_malloc_r+0x2c>
 8005b76:	1cc4      	adds	r4, r0, #3
 8005b78:	f024 0403 	bic.w	r4, r4, #3
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d005      	beq.n	8005b8c <_malloc_r+0xac>
 8005b80:	1a21      	subs	r1, r4, r0
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 f830 	bl	8005be8 <_sbrk_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d0cd      	beq.n	8005b28 <_malloc_r+0x48>
 8005b8c:	6025      	str	r5, [r4, #0]
 8005b8e:	e7d9      	b.n	8005b44 <_malloc_r+0x64>
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	bf00      	nop
 8005b94:	20000098 	.word	0x20000098
 8005b98:	2000009c 	.word	0x2000009c

08005b9c <_realloc_r>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	4607      	mov	r7, r0
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	460e      	mov	r6, r1
 8005ba4:	b921      	cbnz	r1, 8005bb0 <_realloc_r+0x14>
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bac:	f7ff bf98 	b.w	8005ae0 <_malloc_r>
 8005bb0:	b922      	cbnz	r2, 8005bbc <_realloc_r+0x20>
 8005bb2:	f7ff ff47 	bl	8005a44 <_free_r>
 8005bb6:	4625      	mov	r5, r4
 8005bb8:	4628      	mov	r0, r5
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbc:	f000 f826 	bl	8005c0c <_malloc_usable_size_r>
 8005bc0:	4284      	cmp	r4, r0
 8005bc2:	d90f      	bls.n	8005be4 <_realloc_r+0x48>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ff8a 	bl	8005ae0 <_malloc_r>
 8005bcc:	4605      	mov	r5, r0
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d0f2      	beq.n	8005bb8 <_realloc_r+0x1c>
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	f7ff ff0f 	bl	80059f8 <memcpy>
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ff31 	bl	8005a44 <_free_r>
 8005be2:	e7e9      	b.n	8005bb8 <_realloc_r+0x1c>
 8005be4:	4635      	mov	r5, r6
 8005be6:	e7e7      	b.n	8005bb8 <_realloc_r+0x1c>

08005be8 <_sbrk_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4c06      	ldr	r4, [pc, #24]	; (8005c04 <_sbrk_r+0x1c>)
 8005bec:	2300      	movs	r3, #0
 8005bee:	4605      	mov	r5, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	f7fb f8f8 	bl	8000de8 <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_sbrk_r+0x1a>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_sbrk_r+0x1a>
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	20000564 	.word	0x20000564

08005c08 <__malloc_lock>:
 8005c08:	4770      	bx	lr

08005c0a <__malloc_unlock>:
 8005c0a:	4770      	bx	lr

08005c0c <_malloc_usable_size_r>:
 8005c0c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f1a0 0004 	sub.w	r0, r0, #4
 8005c16:	bfbc      	itt	lt
 8005c18:	580b      	ldrlt	r3, [r1, r0]
 8005c1a:	18c0      	addlt	r0, r0, r3
 8005c1c:	4770      	bx	lr
	...

08005c20 <_init>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr

08005c2c <_fini>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr
