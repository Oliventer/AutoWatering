
SoilMoistureSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08005bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          000004ec  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000055c  2000055c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016ce9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002837  00000000  00000000  00036d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001500  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013f8  00000000  00000000  0003aac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bb43  00000000  00000000  0003beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000665b  00000000  00000000  000479fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e056  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005e18  00000000  00000000  0004e0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b2c 	.word	0x08005b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005b2c 	.word	0x08005b2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
	enum signals
	{
	    sign0,
	};

	enum states FSM_table[2][1] = {
 8000286:	2301      	movs	r3, #1
 8000288:	703b      	strb	r3, [r7, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	707b      	strb	r3, [r7, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028e:	f000 fd6f 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f843 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f000 fa3d 	bl	8000714 <MX_GPIO_Init>
  MX_ADC1_Init();
 800029a:	f000 f8a7 	bl	80003ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800029e:	f000 f915 	bl	80004cc <MX_I2C1_Init>
  MX_SPI1_Init();
 80002a2:	f000 f953 	bl	800054c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 f9e3 	bl	8000670 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80002aa:	f000 fa11 	bl	80006d0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80002ae:	f000 f98b 	bl	80005c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80002b2:	4817      	ldr	r0, [pc, #92]	; (8000310 <main+0x90>)
 80002b4:	f003 ff2c 	bl	8004110 <HAL_TIM_Base_Start_IT>
  enum states current_state = standard;
 80002b8:	2300      	movs	r3, #0
 80002ba:	75fb      	strb	r3, [r7, #23]
  enum signals current_signal = sign0;
 80002bc:	2300      	movs	r3, #0
 80002be:	75bb      	strb	r3, [r7, #22]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  percentage = Read_From_Sensor();
 80002c0:	f000 face 	bl	8000860 <Read_From_Sensor>
 80002c4:	6138      	str	r0, [r7, #16]

	  sprintf(msg, "%hu%%\r\n", percentage);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	693a      	ldr	r2, [r7, #16]
 80002ca:	4912      	ldr	r1, [pc, #72]	; (8000314 <main+0x94>)
 80002cc:	4618      	mov	r0, r3
 80002ce:	f005 f80f 	bl	80052f0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 10);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff7b 	bl	80001d0 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	1d39      	adds	r1, r7, #4
 80002e0:	230a      	movs	r3, #10
 80002e2:	480d      	ldr	r0, [pc, #52]	; (8000318 <main+0x98>)
 80002e4:	f004 fb9e 	bl	8004a24 <HAL_UART_Transmit>

	  current_state = FSM_table[current_state][current_signal];
 80002e8:	7dfa      	ldrb	r2, [r7, #23]
 80002ea:	7dbb      	ldrb	r3, [r7, #22]
 80002ec:	f107 0118 	add.w	r1, r7, #24
 80002f0:	440a      	add	r2, r1
 80002f2:	4413      	add	r3, r2
 80002f4:	3b18      	subs	r3, #24
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	75fb      	strb	r3, [r7, #23]

	  if (percentage < 80) {
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	2b4f      	cmp	r3, #79	; 0x4f
 80002fe:	dc01      	bgt.n	8000304 <main+0x84>
		  Watering_Handler();
 8000300:	f000 faec 	bl	80008dc <Watering_Handler>
	  }

	  HAL_Delay(2000);
 8000304:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000308:	f000 fd98 	bl	8000e3c <HAL_Delay>
	  percentage = Read_From_Sensor();
 800030c:	e7d8      	b.n	80002c0 <main+0x40>
 800030e:	bf00      	nop
 8000310:	200001b8 	.word	0x200001b8
 8000314:	08005b44 	.word	0x08005b44
 8000318:	20000134 	.word	0x20000134

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b09e      	sub	sp, #120	; 0x78
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 ffd8 	bl	80052e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	223c      	movs	r2, #60	; 0x3c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 ffca 	bl	80052e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800034c:	2303      	movs	r3, #3
 800034e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000350:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000354:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035e:	2310      	movs	r3, #16
 8000360:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800036c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000370:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fadc 	bl	8002934 <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000382:	f000 faeb 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	2302      	movs	r3, #2
 800038c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a0:	2101      	movs	r1, #1
 80003a2:	4618      	mov	r0, r3
 80003a4:	f003 f9ce 	bl	8003744 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ae:	f000 fad5 	bl	800095c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <SystemClock_Config+0xcc>)
 80003b4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 fbed 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003dc:	f000 fabe 	bl	800095c <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3778      	adds	r7, #120	; 0x78
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	000210a1 	.word	0x000210a1

080003ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f2:	f107 031c 	add.w	r3, r7, #28
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
 800040c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000410:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000416:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800041c:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800042a:	2200      	movs	r2, #0
 800042c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000436:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800043e:	2201      	movs	r2, #1
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000448:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800044a:	2201      	movs	r2, #1
 800044c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000458:	2204      	movs	r2, #4
 800045a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800045e:	2200      	movs	r2, #0
 8000460:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000464:	2200      	movs	r2, #0
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000468:	4817      	ldr	r0, [pc, #92]	; (80004c8 <MX_ADC1_Init+0xdc>)
 800046a:	f000 fd09 	bl	8000e80 <HAL_ADC_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000474:	f000 fa72 	bl	800095c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800047c:	f107 031c 	add.w	r3, r7, #28
 8000480:	4619      	mov	r1, r3
 8000482:	4811      	ldr	r0, [pc, #68]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000484:	f001 fbe6 	bl	8001c54 <HAL_ADCEx_MultiModeConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800048e:	f000 fa65 	bl	800095c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000492:	2302      	movs	r3, #2
 8000494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000496:	2301      	movs	r3, #1
 8000498:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <MX_ADC1_Init+0xdc>)
 80004b0:	f001 f8e4 	bl	800167c <HAL_ADC_ConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004ba:	f000 fa4f 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	3728      	adds	r7, #40	; 0x28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000e4 	.word	0x200000e4

080004cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_I2C1_Init+0x74>)
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <MX_I2C1_Init+0x78>)
 80004d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <MX_I2C1_Init+0x74>)
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <MX_I2C1_Init+0x7c>)
 80004da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004dc:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_I2C1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e2:	4b17      	ldr	r3, [pc, #92]	; (8000540 <MX_I2C1_Init+0x74>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_I2C1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_I2C1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <MX_I2C1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_I2C1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_I2C1_Init+0x74>)
 8000508:	f002 f810 	bl	800252c <HAL_I2C_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000512:	f000 fa23 	bl	800095c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <MX_I2C1_Init+0x74>)
 800051a:	f002 f895 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000524:	f000 fa1a 	bl	800095c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000528:	2100      	movs	r1, #0
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_I2C1_Init+0x74>)
 800052c:	f002 f8d7 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000536:	f000 fa11 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000098 	.word	0x20000098
 8000544:	40005400 	.word	0x40005400
 8000548:	2000090e 	.word	0x2000090e

0800054c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <MX_SPI1_Init+0x78>)
 8000554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800055c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000566:	f44f 7240 	mov.w	r2, #768	; 0x300
 800056a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_SPI1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_SPI1_Init+0x74>)
 800057a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000582:	2208      	movs	r2, #8
 8000584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_SPI1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_SPI1_Init+0x74>)
 800059a:	2207      	movs	r2, #7
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_SPI1_Init+0x74>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_SPI1_Init+0x74>)
 80005ac:	f003 fcb0 	bl	8003f10 <HAL_SPI_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f9d1 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000204 	.word	0x20000204
 80005c4:	40013000 	.word	0x40013000

080005c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_TIM1_Init+0xa0>)
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <MX_TIM1_Init+0xa4>)
 80005ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_TIM1_Init+0xa0>)
 80005ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_TIM1_Init+0xa0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_TIM1_Init+0xa0>)
 80005fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_TIM1_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_TIM1_Init+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_TIM1_Init+0xa0>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000614:	4814      	ldr	r0, [pc, #80]	; (8000668 <MX_TIM1_Init+0xa0>)
 8000616:	f003 fd24 	bl	8004062 <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f99c 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	4619      	mov	r1, r3
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_TIM1_Init+0xa0>)
 8000632:	f003 fef6 	bl	8004422 <HAL_TIM_ConfigClockSource>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800063c:	f000 f98e 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_TIM1_Init+0xa0>)
 8000652:	f004 f8fb 	bl	800484c <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800065c:	f000 f97e 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001b8 	.word	0x200001b8
 800066c:	40012c00 	.word	0x40012c00

08000670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_USART1_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x58>)
 80006b4:	f004 f968 	bl	8004988 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f94d 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000134 	.word	0x20000134
 80006cc:	40013800 	.word	0x40013800

080006d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <MX_USB_PCD_Init+0x40>)
 80006d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006dc:	2208      	movs	r2, #8
 80006de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006fa:	f002 f83c 	bl	8002776 <HAL_PCD_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000704:	f000 f92a 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000268 	.word	0x20000268
 8000710:	40005c00 	.word	0x40005c00

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4a4a      	ldr	r2, [pc, #296]	; (8000854 <MX_GPIO_Init+0x140>)
 800072c:	4b49      	ldr	r3, [pc, #292]	; (8000854 <MX_GPIO_Init+0x140>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <MX_GPIO_Init+0x140>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4a44      	ldr	r2, [pc, #272]	; (8000854 <MX_GPIO_Init+0x140>)
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <MX_GPIO_Init+0x140>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <MX_GPIO_Init+0x140>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <MX_GPIO_Init+0x140>)
 800075c:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <MX_GPIO_Init+0x140>)
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <MX_GPIO_Init+0x140>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4a38      	ldr	r2, [pc, #224]	; (8000854 <MX_GPIO_Init+0x140>)
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <MX_GPIO_Init+0x140>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MX_GPIO_Init+0x140>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4a32      	ldr	r2, [pc, #200]	; (8000854 <MX_GPIO_Init+0x140>)
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_GPIO_Init+0x140>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0x140>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007a2:	2200      	movs	r2, #0
 80007a4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <MX_GPIO_Init+0x144>)
 80007aa:	f001 fe8d 	bl	80024c8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f240 4104 	movw	r1, #1028	; 0x404
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f001 fe86 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007bc:	2337      	movs	r3, #55	; 0x37
 80007be:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_GPIO_Init+0x148>)
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4822      	ldr	r0, [pc, #136]	; (8000858 <MX_GPIO_Init+0x144>)
 80007d0:	f001 fd00 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007d4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007d8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_GPIO_Init+0x144>)
 80007ee:	f001 fcf1 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f001 fce4 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800080c:	2304      	movs	r3, #4
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000810:	2311      	movs	r3, #17
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f001 fcd5 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f001 fcc5 	bl	80021d4 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	48001000 	.word	0x48001000
 800085c:	10120000 	.word	0x10120000

08000860 <Read_From_Sensor>:

/* USER CODE BEGIN 4 */
static int Read_From_Sensor(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af02      	add	r7, sp, #8
	uint16_t raw;
	int percentage;

	HAL_ADC_Start(&hadc1);
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <Read_From_Sensor+0x40>)
 8000868:	f000 fcea 	bl	8001240 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <Read_From_Sensor+0x40>)
 8000872:	f000 fdfb 	bl	800146c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8000876:	480a      	ldr	r0, [pc, #40]	; (80008a0 <Read_From_Sensor+0x40>)
 8000878:	f000 fef2 	bl	8001660 <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	80fb      	strh	r3, [r7, #6]

	percentage = MAP(raw, 1230, 3040, 0, 100);
 8000880:	88f8      	ldrh	r0, [r7, #6]
 8000882:	2364      	movs	r3, #100	; 0x64
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	f44f 623e 	mov.w	r2, #3040	; 0xbe0
 800088c:	f240 41ce 	movw	r1, #1230	; 0x4ce
 8000890:	f000 f808 	bl	80008a4 <MAP>
 8000894:	6038      	str	r0, [r7, #0]

	return percentage;
 8000896:	683b      	ldr	r3, [r7, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000e4 	.word	0x200000e4

080008a4 <MAP>:

static int MAP(int input, int input_min, int input_max, int output_min, int output_max)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
	return ((((input - input_min)*(output_max - output_min))/(input_max - input_min)) + output_min);
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	1a8a      	subs	r2, r1, r2
 80008be:	fb02 f203 	mul.w	r2, r2, r3
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1acb      	subs	r3, r1, r3
 80008c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4413      	add	r3, r2
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <Watering_Handler>:

static void Watering_Handler(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	int percentage;

	Watering();
 80008e2:	f000 f811 	bl	8000908 <Watering>
	HAL_Delay(1500);
 80008e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008ea:	f000 faa7 	bl	8000e3c <HAL_Delay>

	percentage = Read_From_Sensor();
 80008ee:	f7ff ffb7 	bl	8000860 <Read_From_Sensor>
 80008f2:	6078      	str	r0, [r7, #4]
	if (percentage < 80) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b4f      	cmp	r3, #79	; 0x4f
 80008f8:	dc01      	bgt.n	80008fe <Watering_Handler+0x22>
		Watering();
 80008fa:	f000 f805 	bl	8000908 <Watering>
	}


}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <Watering>:

static void Watering(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f001 fdd8 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091c:	480e      	ldr	r0, [pc, #56]	; (8000958 <Watering+0x50>)
 800091e:	f001 fdeb 	bl	80024f8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 8000922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <Watering+0x50>)
 8000928:	f001 fde6 	bl	80024f8 <HAL_GPIO_TogglePin>

	HAL_Delay(1500);
 800092c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000930:	f000 fa84 	bl	8000e3c <HAL_Delay>

	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <Watering+0x50>)
 800093a:	f001 fddd 	bl	80024f8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <Watering+0x50>)
 8000944:	f001 fdd8 	bl	80024f8 <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2104      	movs	r1, #4
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fdba 	bl	80024c8 <HAL_GPIO_WritePin>

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	48001000 	.word	0x48001000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000962:	e7fe      	b.n	8000962 <Error_Handler+0x6>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f001 fbd8 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009cc:	d124      	bne.n	8000a18 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_ADC_MspInit+0x74>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f001 fbde 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_I2C_MspInit+0x7c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d127      	bne.n	8000a96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a5e:	23c0      	movs	r3, #192	; 0xc0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <HAL_I2C_MspInit+0x84>)
 8000a7a:	f001 fbab 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a82:	69db      	ldr	r3, [r3, #28]
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_I2C_MspInit+0x80>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000400 	.word	0x48000400

08000aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_SPI_MspInit+0x7c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d128      	bne.n	8000b20 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	6153      	str	r3, [r2, #20]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_SPI_MspInit+0x80>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000afe:	23e0      	movs	r3, #224	; 0xe0
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0e:	2305      	movs	r3, #5
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 fb5a 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_TIM_Base_MspInit+0x44>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d113      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_TIM_Base_MspInit+0x48>)
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_TIM_Base_MspInit+0x48>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_TIM_Base_MspInit+0x48>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2019      	movs	r0, #25
 8000b60:	f001 fb01 	bl	8002166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b64:	2019      	movs	r0, #25
 8000b66:	f001 fb1a 	bl	800219e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40012c00 	.word	0x40012c00
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x7c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d127      	bne.n	8000bee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_UART_MspInit+0x80>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bce:	2330      	movs	r3, #48	; 0x30
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bde:	2307      	movs	r3, #7
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_UART_MspInit+0x84>)
 8000bea:	f001 faf3 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800

08000c04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_PCD_MspInit+0x80>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d129      	bne.n	8000c7a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000c3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000c50:	230e      	movs	r3, #14
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 fab9 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_PCD_MspInit+0x84>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005c00 	.word	0x40005c00
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f890 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ce6:	f003 fa7d 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001b8 	.word	0x200001b8

08000cf4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x50>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x16>
		heap_end = &end;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <_sbrk+0x50>)
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <_sbrk+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <_sbrk+0x50>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <_sbrk+0x50>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	466a      	mov	r2, sp
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d907      	bls.n	8000d2e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000d1e:	f004 fab5 	bl	800528c <__errno>
 8000d22:	4602      	mov	r2, r0
 8000d24:	230c      	movs	r3, #12
 8000d26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	e006      	b.n	8000d3c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <_sbrk+0x50>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <_sbrk+0x50>)
 8000d38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	2000055c 	.word	0x2000055c

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_Init+0x28>)
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x28>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f001 f9e5 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fdea 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f9fd 	bl	80021ba <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f001 f9c5 	bl	8002166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000554 	.word	0x20000554

08000e24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000554 	.word	0x20000554

08000e3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_Delay+0x40>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad2      	subs	r2, r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3f7      	bcc.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e1c9      	b.n	8001234 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d176      	bne.n	8000fa0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d152      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fd69 	bl	80009ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d13b      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f001 f803 	bl	8001ef4 <ADC_Disable>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d12f      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
 8000f00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d12b      	bne.n	8000f60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f10:	f023 0302 	bic.w	r3, r3, #2
 8000f14:	f043 0202 	orr.w	r2, r3, #2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	6892      	ldr	r2, [r2, #8]
 8000f26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	6892      	ldr	r2, [r2, #8]
 8000f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3c:	4b86      	ldr	r3, [pc, #536]	; (8001158 <HAL_ADC_Init+0x2d8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a86      	ldr	r2, [pc, #536]	; (800115c <HAL_ADC_Init+0x2dc>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9a      	lsrs	r2, r3, #18
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f52:	e002      	b.n	8000f5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f9      	bne.n	8000f54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f7c:	d110      	bne.n	8000fa0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f023 0312 	bic.w	r3, r3, #18
 8000f86:	f043 0210 	orr.w	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 8136 	bne.w	800121a <HAL_ADC_Init+0x39a>
 8000fae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 8131 	bne.w	800121a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f040 8129 	bne.w	800121a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fd0:	f043 0202 	orr.w	r2, r3, #2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe0:	d004      	beq.n	8000fec <HAL_ADC_Init+0x16c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	; (8001160 <HAL_ADC_Init+0x2e0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_Init+0x170>
 8000fec:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_ADC_Init+0x2e4>)
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_Init+0x172>
 8000ff0:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <HAL_ADC_Init+0x2e8>)
 8000ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffc:	d102      	bne.n	8001004 <HAL_ADC_Init+0x184>
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_ADC_Init+0x2e0>)
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e01a      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a55      	ldr	r2, [pc, #340]	; (8001160 <HAL_ADC_Init+0x2e0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d103      	bne.n	8001016 <HAL_ADC_Init+0x196>
 800100e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e011      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a54      	ldr	r2, [pc, #336]	; (800116c <HAL_ADC_Init+0x2ec>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_ADC_Init+0x1a6>
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_ADC_Init+0x2f0>)
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e009      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_ADC_Init+0x2f0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <HAL_ADC_Init+0x1b6>
 8001030:	4b4e      	ldr	r3, [pc, #312]	; (800116c <HAL_ADC_Init+0x2ec>)
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e001      	b.n	800103a <HAL_ADC_Init+0x1ba>
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d108      	bne.n	800105a <HAL_ADC_Init+0x1da>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_Init+0x1da>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_ADC_Init+0x1dc>
 800105a:	2300      	movs	r3, #0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d11c      	bne.n	800109a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001060:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d010      	beq.n	8001088 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_ADC_Init+0x202>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Init+0x202>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_ADC_Init+0x204>
 8001082:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001084:	2b00      	cmp	r3, #0
 8001086:	d108      	bne.n	800109a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	431a      	orrs	r2, r3
 8001096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001098:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7e5b      	ldrb	r3, [r3, #25]
 800109e:	035a      	lsls	r2, r3, #13
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_Init+0x22e>
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x230>
 80010ae:	2300      	movs	r3, #0
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4313      	orrs	r3, r2
 80010be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010c0:	4313      	orrs	r3, r2
 80010c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d11b      	bne.n	8001106 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	3b01      	subs	r3, #1
 80010dc:	045a      	lsls	r2, r3, #17
 80010de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010e0:	4313      	orrs	r3, r2
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	663b      	str	r3, [r7, #96]	; 0x60
 80010e8:	e00d      	b.n	8001106 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010f2:	f043 0220 	orr.w	r2, r3, #32
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	2b01      	cmp	r3, #1
 800110c:	d03a      	beq.n	8001184 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <HAL_ADC_Init+0x2ec>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d004      	beq.n	8001122 <HAL_ADC_Init+0x2a2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_ADC_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_ADC_Init+0x2f4>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800112a:	d012      	beq.n	8001152 <HAL_ADC_Init+0x2d2>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001134:	d00a      	beq.n	800114c <HAL_ADC_Init+0x2cc>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800113e:	d002      	beq.n	8001146 <HAL_ADC_Init+0x2c6>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	e018      	b.n	8001178 <HAL_ADC_Init+0x2f8>
 8001146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114a:	e015      	b.n	8001178 <HAL_ADC_Init+0x2f8>
 800114c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001150:	e012      	b.n	8001178 <HAL_ADC_Init+0x2f8>
 8001152:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001156:	e00f      	b.n	8001178 <HAL_ADC_Init+0x2f8>
 8001158:	20000000 	.word	0x20000000
 800115c:	431bde83 	.word	0x431bde83
 8001160:	50000100 	.word	0x50000100
 8001164:	50000300 	.word	0x50000300
 8001168:	50000700 	.word	0x50000700
 800116c:	50000400 	.word	0x50000400
 8001170:	50000500 	.word	0x50000500
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800117c:	4313      	orrs	r3, r2
 800117e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001180:	4313      	orrs	r3, r2
 8001182:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d114      	bne.n	80011bc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011a0:	f023 0302 	bic.w	r3, r3, #2
 80011a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7e1b      	ldrb	r3, [r3, #24]
 80011aa:	039a      	lsls	r2, r3, #14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4313      	orrs	r3, r2
 80011b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b8:	4313      	orrs	r3, r2
 80011ba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68d9      	ldr	r1, [r3, #12]
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_ADC_Init+0x3bc>)
 80011c8:	400b      	ands	r3, r1
 80011ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80011cc:	430b      	orrs	r3, r1
 80011ce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10c      	bne.n	80011f2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011e2:	f022 010f 	bic.w	r1, r2, #15
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	69d2      	ldr	r2, [r2, #28]
 80011ea:	3a01      	subs	r2, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
 80011f0:	e007      	b.n	8001202 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011fc:	f022 020f 	bic.w	r2, r2, #15
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f023 0303 	bic.w	r3, r3, #3
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	641a      	str	r2, [r3, #64]	; 0x40
 8001218:	e00a      	b.n	8001230 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f023 0312 	bic.w	r3, r3, #18
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001230:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001234:	4618      	mov	r0, r3
 8001236:	3768      	adds	r7, #104	; 0x68
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	fff0c007 	.word	0xfff0c007

08001240 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 80f9 	bne.w	800144e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_ADC_Start+0x2a>
 8001266:	2302      	movs	r3, #2
 8001268:	e0f4      	b.n	8001454 <HAL_ADC_Start+0x214>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fde0 	bl	8001e38 <ADC_Enable>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80e0 	bne.w	8001444 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a0:	d004      	beq.n	80012ac <HAL_ADC_Start+0x6c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6d      	ldr	r2, [pc, #436]	; (800145c <HAL_ADC_Start+0x21c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d106      	bne.n	80012ba <HAL_ADC_Start+0x7a>
 80012ac:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <HAL_ADC_Start+0x220>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d010      	beq.n	80012da <HAL_ADC_Start+0x9a>
 80012b8:	e005      	b.n	80012c6 <HAL_ADC_Start+0x86>
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_ADC_Start+0x224>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_ADC_Start+0x9a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ce:	d004      	beq.n	80012da <HAL_ADC_Start+0x9a>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a64      	ldr	r2, [pc, #400]	; (8001468 <HAL_ADC_Start+0x228>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d115      	bne.n	8001306 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d036      	beq.n	8001362 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001304:	e02d      	b.n	8001362 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800131a:	d004      	beq.n	8001326 <HAL_ADC_Start+0xe6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_ADC_Start+0x21c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10a      	bne.n	800133c <HAL_ADC_Start+0xfc>
 8001326:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	bf14      	ite	ne
 8001334:	2301      	movne	r3, #1
 8001336:	2300      	moveq	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	e008      	b.n	800134e <HAL_ADC_Start+0x10e>
 800133c:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_ADC_Start+0x228>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800135a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136e:	d106      	bne.n	800137e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f023 0206 	bic.w	r2, r3, #6
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
 800137c:	e002      	b.n	8001384 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	221c      	movs	r2, #28
 8001392:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139c:	d004      	beq.n	80013a8 <HAL_ADC_Start+0x168>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_ADC_Start+0x21c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d106      	bne.n	80013b6 <HAL_ADC_Start+0x176>
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_ADC_Start+0x220>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d03e      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 80013b4:	e005      	b.n	80013c2 <HAL_ADC_Start+0x182>
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_ADC_Start+0x224>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d037      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ca:	d004      	beq.n	80013d6 <HAL_ADC_Start+0x196>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a22      	ldr	r2, [pc, #136]	; (800145c <HAL_ADC_Start+0x21c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d106      	bne.n	80013e4 <HAL_ADC_Start+0x1a4>
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_ADC_Start+0x220>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d027      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 80013e2:	e005      	b.n	80013f0 <HAL_ADC_Start+0x1b0>
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_ADC_Start+0x224>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d020      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f8:	d004      	beq.n	8001404 <HAL_ADC_Start+0x1c4>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_ADC_Start+0x21c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d106      	bne.n	8001412 <HAL_ADC_Start+0x1d2>
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_ADC_Start+0x220>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2b09      	cmp	r3, #9
 800140e:	d010      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 8001410:	e005      	b.n	800141e <HAL_ADC_Start+0x1de>
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_ADC_Start+0x224>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	2b09      	cmp	r3, #9
 800141c:	d009      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001426:	d004      	beq.n	8001432 <HAL_ADC_Start+0x1f2>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_ADC_Start+0x228>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10f      	bne.n	8001452 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	6892      	ldr	r2, [r2, #8]
 800143c:	f042 0204 	orr.w	r2, r2, #4
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	e006      	b.n	8001452 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800144c:	e001      	b.n	8001452 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800144e:	2302      	movs	r3, #2
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	50000100 	.word	0x50000100
 8001460:	50000300 	.word	0x50000300
 8001464:	50000700 	.word	0x50000700
 8001468:	50000400 	.word	0x50000400

0800146c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b08      	cmp	r3, #8
 8001480:	d102      	bne.n	8001488 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001482:	2308      	movs	r3, #8
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e03a      	b.n	80014fe <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d004      	beq.n	800149c <HAL_ADC_PollForConversion+0x30>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <HAL_ADC_PollForConversion+0x1e4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_PollForConversion+0x34>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <HAL_ADC_PollForConversion+0x1e8>)
 800149e:	e000      	b.n	80014a2 <HAL_ADC_PollForConversion+0x36>
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_ADC_PollForConversion+0x1ec>)
 80014a2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d112      	bne.n	80014d6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d11d      	bne.n	80014fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f043 0220 	orr.w	r2, r3, #32
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0b8      	b.n	8001648 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f043 0220 	orr.w	r2, r3, #32
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0a6      	b.n	8001648 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001506:	d004      	beq.n	8001512 <HAL_ADC_PollForConversion+0xa6>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_ADC_PollForConversion+0x1e4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d106      	bne.n	8001520 <HAL_ADC_PollForConversion+0xb4>
 8001512:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_ADC_PollForConversion+0x1e8>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	d010      	beq.n	8001540 <HAL_ADC_PollForConversion+0xd4>
 800151e:	e005      	b.n	800152c <HAL_ADC_PollForConversion+0xc0>
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <HAL_ADC_PollForConversion+0x1ec>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <HAL_ADC_PollForConversion+0xd4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001534:	d004      	beq.n	8001540 <HAL_ADC_PollForConversion+0xd4>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_ADC_PollForConversion+0x1f0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d104      	bne.n	800154a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	e00f      	b.n	800156a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001552:	d004      	beq.n	800155e <HAL_ADC_PollForConversion+0xf2>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <HAL_ADC_PollForConversion+0x1e4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d102      	bne.n	8001564 <HAL_ADC_PollForConversion+0xf8>
 800155e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001562:	e000      	b.n	8001566 <HAL_ADC_PollForConversion+0xfa>
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <HAL_ADC_PollForConversion+0x1f0>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800156a:	f7ff fc5b 	bl	8000e24 <HAL_GetTick>
 800156e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001570:	e01a      	b.n	80015a8 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d016      	beq.n	80015a8 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_ADC_PollForConversion+0x124>
 8001580:	f7ff fc50 	bl	8000e24 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d90b      	bls.n	80015a8 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f043 0204 	orr.w	r2, r3, #4
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e04f      	b.n	8001648 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0dd      	beq.n	8001572 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d131      	bne.n	8001634 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d12c      	bne.n	8001634 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d125      	bne.n	8001634 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d112      	bne.n	800161c <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d112      	bne.n	8001634 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
 800161a:	e00b      	b.n	8001634 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f043 0220 	orr.w	r2, r3, #32
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	50000100 	.word	0x50000100
 8001654:	50000300 	.word	0x50000300
 8001658:	50000700 	.word	0x50000700
 800165c:	50000400 	.word	0x50000400

08001660 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b490      	push	{r4, r7}
 800167e:	b09a      	sub	sp, #104	; 0x68
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x22>
 800169a:	2302      	movs	r3, #2
 800169c:	e2cd      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x5be>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 82b1 	bne.w	8001c18 <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d81c      	bhi.n	80016f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	231f      	movs	r3, #31
 80016d8:	4093      	lsls	r3, r2
 80016da:	43db      	mvns	r3, r3
 80016dc:	4018      	ands	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681c      	ldr	r4, [r3, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa04 f303 	lsl.w	r3, r4, r3
 80016f2:	4303      	orrs	r3, r0
 80016f4:	630b      	str	r3, [r1, #48]	; 0x30
 80016f6:	e063      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d81e      	bhi.n	800173e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3b1e      	subs	r3, #30
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	4018      	ands	r0, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681c      	ldr	r4, [r3, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	3b1e      	subs	r3, #30
 8001734:	fa04 f303 	lsl.w	r3, r4, r3
 8001738:	4303      	orrs	r3, r0
 800173a:	634b      	str	r3, [r1, #52]	; 0x34
 800173c:	e040      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b0e      	cmp	r3, #14
 8001744:	d81e      	bhi.n	8001784 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	3b3c      	subs	r3, #60	; 0x3c
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	4018      	ands	r0, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681c      	ldr	r4, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	3b3c      	subs	r3, #60	; 0x3c
 800177a:	fa04 f303 	lsl.w	r3, r4, r3
 800177e:	4303      	orrs	r3, r0
 8001780:	638b      	str	r3, [r1, #56]	; 0x38
 8001782:	e01d      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6819      	ldr	r1, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	3b5a      	subs	r3, #90	; 0x5a
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4018      	ands	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	3b5a      	subs	r3, #90	; 0x5a
 80017b8:	fa04 f303 	lsl.w	r3, r4, r3
 80017bc:	4303      	orrs	r3, r0
 80017be:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80e5 	bne.w	800199a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d91c      	bls.n	8001812 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6998      	ldr	r0, [r3, #24]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3b1e      	subs	r3, #30
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4018      	ands	r0, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689c      	ldr	r4, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	3b1e      	subs	r3, #30
 8001808:	fa04 f303 	lsl.w	r3, r4, r3
 800180c:	4303      	orrs	r3, r0
 800180e:	618b      	str	r3, [r1, #24]
 8001810:	e019      	b.n	8001846 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6819      	ldr	r1, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6958      	ldr	r0, [r3, #20]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	2207      	movs	r2, #7
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	4018      	ands	r0, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689c      	ldr	r4, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	fa04 f303 	lsl.w	r3, r4, r3
 8001842:	4303      	orrs	r3, r0
 8001844:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	3b01      	subs	r3, #1
 8001864:	2b03      	cmp	r3, #3
 8001866:	d84f      	bhi.n	8001908 <HAL_ADC_ConfigChannel+0x28c>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_ADC_ConfigChannel+0x1f4>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001881 	.word	0x08001881
 8001874:	080018a3 	.word	0x080018a3
 8001878:	080018c5 	.word	0x080018c5
 800187c:	080018e7 	.word	0x080018e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800188a:	4ba1      	ldr	r3, [pc, #644]	; (8001b10 <HAL_ADC_ConfigChannel+0x494>)
 800188c:	400b      	ands	r3, r1
 800188e:	6839      	ldr	r1, [r7, #0]
 8001890:	6809      	ldr	r1, [r1, #0]
 8001892:	0688      	lsls	r0, r1, #26
 8001894:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001896:	4301      	orrs	r1, r0
 8001898:	430b      	orrs	r3, r1
 800189a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800189e:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018a0:	e07b      	b.n	800199a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80018ac:	4b98      	ldr	r3, [pc, #608]	; (8001b10 <HAL_ADC_ConfigChannel+0x494>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	6809      	ldr	r1, [r1, #0]
 80018b4:	0688      	lsls	r0, r1, #26
 80018b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018b8:	4301      	orrs	r1, r0
 80018ba:	430b      	orrs	r3, r1
 80018bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c2:	e06a      	b.n	800199a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80018ce:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <HAL_ADC_ConfigChannel+0x494>)
 80018d0:	400b      	ands	r3, r1
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	6809      	ldr	r1, [r1, #0]
 80018d6:	0688      	lsls	r0, r1, #26
 80018d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018da:	4301      	orrs	r1, r0
 80018dc:	430b      	orrs	r3, r1
 80018de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e2:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018e4:	e059      	b.n	800199a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80018f0:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <HAL_ADC_ConfigChannel+0x494>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6809      	ldr	r1, [r1, #0]
 80018f8:	0688      	lsls	r0, r1, #26
 80018fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018fc:	4301      	orrs	r1, r0
 80018fe:	430b      	orrs	r3, r1
 8001900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001904:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001906:	e048      	b.n	800199a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	069b      	lsls	r3, r3, #26
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800194a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	069b      	lsls	r3, r3, #26
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800196e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001972:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800197a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	069b      	lsls	r3, r3, #26
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001992:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001996:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001998:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x33e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x33e>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_ADC_ConfigChannel+0x340>
 80019ba:	2300      	movs	r3, #0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 8136 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d00f      	beq.n	80019ea <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	2001      	movs	r0, #1
 80019dc:	fa00 f202 	lsl.w	r2, r0, r2
 80019e0:	43d2      	mvns	r2, r2
 80019e2:	400a      	ands	r2, r1
 80019e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019e8:	e04a      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	2001      	movs	r0, #1
 80019fc:	fa00 f202 	lsl.w	r2, r0, r2
 8001a00:	430a      	orrs	r2, r1
 8001a02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d91c      	bls.n	8001a48 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6998      	ldr	r0, [r3, #24]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	3b1b      	subs	r3, #27
 8001a24:	2207      	movs	r2, #7
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4018      	ands	r0, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689c      	ldr	r4, [r3, #8]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1b      	subs	r3, #27
 8001a3e:	fa04 f303 	lsl.w	r3, r4, r3
 8001a42:	4303      	orrs	r3, r0
 8001a44:	618b      	str	r3, [r1, #24]
 8001a46:	e01b      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6958      	ldr	r0, [r3, #20]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4018      	ands	r0, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689c      	ldr	r4, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	fa04 f303 	lsl.w	r3, r4, r3
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x418>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_ADC_ConfigChannel+0x498>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x41c>
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_ADC_ConfigChannel+0x49c>)
 8001a96:	e000      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x41e>
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_ADC_ConfigChannel+0x4a0>)
 8001a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	f040 80b0 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 80a9 	bne.w	8001c2e <HAL_ADC_ConfigChannel+0x5b2>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae4:	d102      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x470>
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_ADC_ConfigChannel+0x498>)
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e027      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4c0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_ADC_ConfigChannel+0x498>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d103      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x482>
 8001af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e01e      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4c0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_ADC_ConfigChannel+0x4a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x4ac>
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_ADC_ConfigChannel+0x4a8>)
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e016      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4c0>
 8001b0e:	bf00      	nop
 8001b10:	83fff000 	.word	0x83fff000
 8001b14:	50000100 	.word	0x50000100
 8001b18:	50000300 	.word	0x50000300
 8001b1c:	50000700 	.word	0x50000700
 8001b20:	50000400 	.word	0x50000400
 8001b24:	50000500 	.word	0x50000500
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a45      	ldr	r2, [pc, #276]	; (8001c44 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d102      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x4bc>
 8001b32:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x4c0>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x4e0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x4e0>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x4e2>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d150      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x50e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x508>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x508>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x50a>
 8001b84:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13c      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x588>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d11d      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x552>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b9a:	d118      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_ADC_ConfigChannel+0x5d0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9a      	lsrs	r2, r3, #18
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bbe:	e002      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f9      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x544>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bcc:	e02e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x5b0>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d10b      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x572>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bec:	e01e      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d11a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c02:	e013      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c16:	e00a      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x5b2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3768      	adds	r7, #104	; 0x68
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc90      	pop	{r4, r7}
 8001c42:	4770      	bx	lr
 8001c44:	50000500 	.word	0x50000500
 8001c48:	50000400 	.word	0x50000400
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b099      	sub	sp, #100	; 0x64
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6c:	d102      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	e01a      	b.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6a      	ldr	r2, [pc, #424]	; (8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d103      	bne.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	e011      	b.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d102      	bne.n	8001c96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c90:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	e009      	b.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	e001      	b.n	8001caa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b0      	b.n	8001e16 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e0a9      	b.n	8001e16 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 808d 	bne.w	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8086 	bne.w	8001df4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001cfe:	e000      	b.n	8001d02 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d00:	4b4c      	ldr	r3, [pc, #304]	; (8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d02:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d040      	beq.n	8001d8e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1e:	035b      	lsls	r3, r3, #13
 8001d20:	430b      	orrs	r3, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d15c      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d6a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d14b      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d78:	f023 030f 	bic.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	6811      	ldr	r1, [r2, #0]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6892      	ldr	r2, [r2, #8]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d8a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d8c:	e03c      	b.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d98:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d123      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ddc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d112      	bne.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dea:	f023 030f 	bic.w	r3, r3, #15
 8001dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001df0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001df2:	e009      	b.n	8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e06:	e000      	b.n	8001e0a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e08:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e16:	4618      	mov	r0, r3
 8001e18:	3764      	adds	r7, #100	; 0x64
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	50000100 	.word	0x50000100
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	50000500 	.word	0x50000500
 8001e30:	50000300 	.word	0x50000300
 8001e34:	50000700 	.word	0x50000700

08001e38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <ADC_Enable+0x2c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <ADC_Enable+0x2c>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <ADC_Enable+0x2e>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d13c      	bne.n	8001ee4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <ADC_Enable+0xb8>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0210 	orr.w	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e028      	b.n	8001ee6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	6892      	ldr	r2, [r2, #8]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ea4:	f7fe ffbe 	bl	8000e24 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001eaa:	e014      	b.n	8001ed6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eac:	f7fe ffba 	bl	8000e24 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d90d      	bls.n	8001ed6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e007      	b.n	8001ee6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d1e3      	bne.n	8001eac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	8000003f 	.word	0x8000003f

08001ef4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d108      	bne.n	8001f20 <ADC_Disable+0x2c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <ADC_Disable+0x2c>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <ADC_Disable+0x2e>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030d 	and.w	r3, r3, #13
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10f      	bne.n	8001f54 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6892      	ldr	r2, [r2, #8]
 8001f3e:	f042 0202 	orr.w	r2, r2, #2
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe ff6a 	bl	8000e24 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f52:	e022      	b.n	8001f9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e01c      	b.n	8001faa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f70:	f7fe ff58 	bl	8000e24 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d90d      	bls.n	8001f9a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e007      	b.n	8001faa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d0e3      	beq.n	8001f70 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	4909      	ldr	r1, [pc, #36]	; (8002050 <__NVIC_EnableIRQ+0x38>)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	79fa      	ldrb	r2, [r7, #7]
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	490d      	ldr	r1, [pc, #52]	; (80020a0 <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	4909      	ldr	r1, [pc, #36]	; (80020a4 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	2201      	movs	r2, #1
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	401a      	ands	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ee:	2101      	movs	r1, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	1e59      	subs	r1, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f7ff ff90 	bl	8002054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff2b 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff40 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff90 	bl	80020a8 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5f 	bl	8002054 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff33 	bl	8002018 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	e154      	b.n	800248e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8146 	beq.w	8002488 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d00b      	beq.n	800221c <HAL_GPIO_Init+0x48>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d007      	beq.n	800221c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002210:	2b11      	cmp	r3, #17
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d130      	bne.n	800227e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002252:	2201      	movs	r2, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0201 	and.w	r2, r3, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0xea>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d123      	bne.n	8002306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	6939      	ldr	r1, [r7, #16]
 8002302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80a0 	beq.w	8002488 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_GPIO_Init+0x2d8>)
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_GPIO_Init+0x2d8>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_GPIO_Init+0x2d8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002360:	4a53      	ldr	r2, [pc, #332]	; (80024b0 <HAL_GPIO_Init+0x2dc>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800238a:	d019      	beq.n	80023c0 <HAL_GPIO_Init+0x1ec>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x2e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1e8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <HAL_GPIO_Init+0x2e4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1e4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a47      	ldr	r2, [pc, #284]	; (80024bc <HAL_GPIO_Init+0x2e8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1e0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a46      	ldr	r2, [pc, #280]	; (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1dc>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e008      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b0:	2305      	movs	r3, #5
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e004      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023c0:	2300      	movs	r3, #0
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	f002 0203 	and.w	r2, r2, #3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4093      	lsls	r3, r2
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d2:	4937      	ldr	r1, [pc, #220]	; (80024b0 <HAL_GPIO_Init+0x2dc>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002404:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002458:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f aea3 	bne.w	80021e4 <HAL_GPIO_Init+0x10>
  }
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000
 80024b4:	48000400 	.word	0x48000400
 80024b8:	48000800 	.word	0x48000800
 80024bc:	48000c00 	.word	0x48000c00
 80024c0:	48001000 	.word	0x48001000
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43d9      	mvns	r1, r3
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	400b      	ands	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e080      	b.n	8002640 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fa66 	bl	8000a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6852      	ldr	r2, [r2, #4]
 8002578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800257c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800258c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e006      	b.n	80025b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d104      	bne.n	80025c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	68d2      	ldr	r2, [r2, #12]
 80025e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6911      	ldr	r1, [r2, #16]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6952      	ldr	r2, [r2, #20]
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6992      	ldr	r2, [r2, #24]
 80025fc:	0212      	lsls	r2, r2, #8
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	69d1      	ldr	r1, [r2, #28]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6a12      	ldr	r2, [r2, #32]
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002778:	b08b      	sub	sp, #44	; 0x2c
 800277a:	af06      	add	r7, sp, #24
 800277c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0d0      	b.n	800292a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe fa31 	bl	8000c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fd05 	bl	80051be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e04c      	b.n	8002854 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3301      	adds	r3, #1
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	b298      	uxth	r0, r3
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	3336      	adds	r3, #54	; 0x36
 80027f8:	4602      	mov	r2, r0
 80027fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	3303      	adds	r3, #3
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3338      	adds	r3, #56	; 0x38
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	; 0x3c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3340      	adds	r3, #64	; 0x40
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	3301      	adds	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3ad      	bcc.n	80027ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e044      	b.n	80028ee <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3301      	adds	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3b5      	bcc.n	8002864 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	687e      	ldr	r6, [r7, #4]
 8002900:	466d      	mov	r5, sp
 8002902:	f106 0410 	add.w	r4, r6, #16
 8002906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	602b      	str	r3, [r5, #0]
 800290e:	1d33      	adds	r3, r6, #4
 8002910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	f002 fc6e 	bl	80051f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800293a:	af00      	add	r7, sp, #0
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f000 bef4 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 816a 	beq.w	8002c32 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800295e:	4bb3      	ldr	r3, [pc, #716]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800296a:	4bb0      	ldr	r3, [pc, #704]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d159      	bne.n	8002a2a <HAL_RCC_OscConfig+0xf6>
 8002976:	4bad      	ldr	r3, [pc, #692]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d152      	bne.n	8002a2a <HAL_RCC_OscConfig+0xf6>
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002998:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_OscConfig+0x82>
 80029b0:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0xae>
 80029b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029d2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029de:	4b93      	ldr	r3, [pc, #588]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f002 021f 	and.w	r2, r2, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 810c 	beq.w	8002c30 <HAL_RCC_OscConfig+0x2fc>
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 8106 	bne.w	8002c30 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f000 be86 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x110>
 8002a36:	4a7d      	ldr	r2, [pc, #500]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a38:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e030      	b.n	8002aa6 <HAL_RCC_OscConfig+0x172>
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x134>
 8002a4e:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a50:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4a74      	ldr	r2, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a5c:	4b73      	ldr	r3, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x172>
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCC_OscConfig+0x15a>
 8002a74:	4a6d      	ldr	r2, [pc, #436]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a76:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x172>
 8002a8e:	4a67      	ldr	r2, [pc, #412]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a90:	4b66      	ldr	r3, [pc, #408]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4a64      	ldr	r2, [pc, #400]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aa6:	4961      	ldr	r1, [pc, #388]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002aa8:	4b60      	ldr	r3, [pc, #384]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	f023 020f 	bic.w	r2, r3, #15
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d059      	beq.n	8002b78 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f9ae 	bl	8000e24 <HAL_GetTick>
 8002ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ace:	f7fe f9a9 	bl	8000e24 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d902      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	f000 be29 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
 8002ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002af8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_OscConfig+0x1e2>
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x20e>
 8002b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b56:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f002 021f 	and.w	r2, r2, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ab      	beq.n	8002ace <HAL_RCC_OscConfig+0x19a>
 8002b76:	e05c      	b.n	8002c32 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe f954 	bl	8000e24 <HAL_GetTick>
 8002b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b82:	f7fe f94f 	bl	8000e24 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d902      	bls.n	8002b98 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	f000 bdcf 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
 8002b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2c2>
 8002bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002be6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_OscConfig+0x2f8>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c0a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ab      	bne.n	8002b82 <HAL_RCC_OscConfig+0x24e>
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_OscConfig+0x2fe>
 8002c2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 816f 	beq.w	8002f20 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c42:	4bd0      	ldr	r3, [pc, #832]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c4e:	4bcd      	ldr	r3, [pc, #820]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d16c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x400>
 8002c5a:	4bca      	ldr	r3, [pc, #808]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d166      	bne.n	8002d34 <HAL_RCC_OscConfig+0x400>
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_OscConfig+0x362>
 8002c90:	4bbc      	ldr	r3, [pc, #752]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	e013      	b.n	8002cbe <HAL_RCC_OscConfig+0x38a>
 8002c96:	2302      	movs	r3, #2
 8002c98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cba:	4bb2      	ldr	r3, [pc, #712]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cd0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cd4:	fab2 f282 	clz	r2, r2
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f002 021f 	and.w	r2, r2, #31
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_RCC_OscConfig+0x3cc>
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f000 bd1b 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	48a0      	ldr	r0, [pc, #640]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002d02:	4ba0      	ldr	r3, [pc, #640]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	21f8      	movs	r1, #248	; 0xf8
 8002d12:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d1a:	fa91 f1a1 	rbit	r1, r1
 8002d1e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d22:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d26:	fab1 f181 	clz	r1, r1
 8002d2a:	b2c9      	uxtb	r1, r1
 8002d2c:	408b      	lsls	r3, r1
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	e0f5      	b.n	8002f20 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8085 	beq.w	8002e4a <HAL_RCC_OscConfig+0x516>
 8002d40:	2301      	movs	r3, #1
 8002d42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f85a 	bl	8000e24 <HAL_GetTick>
 8002d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe f855 	bl	8000e24 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	f000 bcd5 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x488>
 8002db6:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x4b0>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2202      	movs	r2, #2
 8002de6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dee:	fa92 f2a2 	rbit	r2, r2
 8002df2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0220 	orr.w	r2, r2, #32
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0af      	beq.n	8002d76 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	485b      	ldr	r0, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002e18:	4b5a      	ldr	r3, [pc, #360]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	21f8      	movs	r1, #248	; 0xf8
 8002e28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e30:	fa91 f1a1 	rbit	r1, r1
 8002e34:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e38:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e3c:	fab1 f181 	clz	r1, r1
 8002e40:	b2c9      	uxtb	r1, r1
 8002e42:	408b      	lsls	r3, r1
 8002e44:	4313      	orrs	r3, r2
 8002e46:	6003      	str	r3, [r0, #0]
 8002e48:	e06a      	b.n	8002f20 <HAL_RCC_OscConfig+0x5ec>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	461a      	mov	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fd ffd5 	bl	8000e24 <HAL_GetTick>
 8002e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fd ffd0 	bl	8000e24 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d902      	bls.n	8002e96 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	f000 bc50 	b.w	8003736 <HAL_RCC_OscConfig+0xe02>
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x592>
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	e013      	b.n	8002eee <HAL_RCC_OscConfig+0x5ba>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ede:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCC_OscConfig+0x650>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ef4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ef8:	fa92 f2a2 	rbit	r2, r2
 8002efc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f04:	fab2 f282 	clz	r2, r2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f042 0220 	orr.w	r2, r2, #32
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f002 021f 	and.w	r2, r2, #31
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1af      	bne.n	8002e80 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80da 	beq.w	80030e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d069      	beq.n	800300e <HAL_RCC_OscConfig+0x6da>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_OscConfig+0x654>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2301      	movs	r3, #1
 8002f62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fd ff5e 	bl	8000e24 <HAL_GetTick>
 8002f68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6c:	e00e      	b.n	8002f8c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fd ff59 	bl	8000e24 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d906      	bls.n	8002f8c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e3d9      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	10908120 	.word	0x10908120
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fba:	2202      	movs	r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4ba5      	ldr	r3, [pc, #660]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 8002fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	6019      	str	r1, [r3, #0]
 8002fda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f1a3 	rbit	r1, r3
 8002fe4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fe8:	6019      	str	r1, [r3, #0]
  return result;
 8002fea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0b0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x63a>
 800300c:	e06a      	b.n	80030e4 <HAL_RCC_OscConfig+0x7b0>
 800300e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003024:	601a      	str	r2, [r3, #0]
  return result;
 8003026:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800302a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x934>)
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	461a      	mov	r2, r3
 800303c:	2300      	movs	r3, #0
 800303e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fd fef0 	bl	8000e24 <HAL_GetTick>
 8003044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e009      	b.n	800305e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7fd feeb 	bl	8000e24 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e36b      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 800305e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003092:	2202      	movs	r2, #2
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a6:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030ae:	2102      	movs	r1, #2
 80030b0:	6019      	str	r1, [r3, #0]
 80030b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f1a3 	rbit	r1, r3
 80030bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030c0:	6019      	str	r1, [r3, #0]
  return result;
 80030c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1b2      	bne.n	800304a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8158 	beq.w	80033a4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 8003108:	4b56      	ldr	r3, [pc, #344]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	4b54      	ldr	r3, [pc, #336]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCC_OscConfig+0x938>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11a      	bne.n	800316e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003138:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x938>)
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <HAL_RCC_OscConfig+0x938>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003144:	f7fd fe6e 	bl	8000e24 <HAL_GetTick>
 8003148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e009      	b.n	8003162 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fd fe69 	bl	8000e24 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e2e9      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCC_OscConfig+0x938>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ef      	beq.n	800314e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x852>
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 800317a:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6213      	str	r3, [r2, #32]
 8003184:	e02f      	b.n	80031e6 <HAL_RCC_OscConfig+0x8b2>
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10c      	bne.n	80031aa <HAL_RCC_OscConfig+0x876>
 8003190:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	e01d      	b.n	80031e6 <HAL_RCC_OscConfig+0x8b2>
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x89a>
 80031b4:	4a2b      	ldr	r2, [pc, #172]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x8b2>
 80031ce:	4a25      	ldr	r2, [pc, #148]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d06b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fd fe18 	bl	8000e24 <HAL_GetTick>
 80031f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fe13 	bl	8000e24 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e291      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 8003212:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003216:	2202      	movs	r2, #2
 8003218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800322e:	2202      	movs	r2, #2
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003240:	601a      	str	r2, [r3, #0]
  return result;
 8003242:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003246:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d109      	bne.n	8003270 <HAL_RCC_OscConfig+0x93c>
 800325c:	4b01      	ldr	r3, [pc, #4]	; (8003264 <HAL_RCC_OscConfig+0x930>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x958>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	10908120 	.word	0x10908120
 800326c:	40007000 	.word	0x40007000
 8003270:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003274:	2202      	movs	r2, #2
 8003276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	4bbb      	ldr	r3, [pc, #748]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003290:	2102      	movs	r1, #2
 8003292:	6011      	str	r1, [r2, #0]
 8003294:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	fa92 f1a2 	rbit	r1, r2
 800329e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032a2:	6011      	str	r1, [r2, #0]
  return result;
 80032a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d099      	beq.n	80031fa <HAL_RCC_OscConfig+0x8c6>
 80032c6:	e063      	b.n	8003390 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7fd fdac 	bl	8000e24 <HAL_GetTick>
 80032cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d0:	e00b      	b.n	80032ea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fda7 	bl	8000e24 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e225      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 80032ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032ee:	2202      	movs	r2, #2
 80032f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003306:	2202      	movs	r2, #2
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003318:	601a      	str	r2, [r3, #0]
  return result;
 800331a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800331e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d102      	bne.n	800333a <HAL_RCC_OscConfig+0xa06>
 8003334:	4b90      	ldr	r3, [pc, #576]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	e00d      	b.n	8003356 <HAL_RCC_OscConfig+0xa22>
 800333a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800335a:	2102      	movs	r1, #2
 800335c:	6011      	str	r1, [r2, #0]
 800335e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	fa92 f1a2 	rbit	r1, r2
 8003368:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800336c:	6011      	str	r1, [r2, #0]
  return result;
 800336e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f002 021f 	and.w	r2, r2, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1a0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003390:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4a77      	ldr	r2, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 800339a:	4b77      	ldr	r3, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 81c2 	beq.w	8003734 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b0:	4b71      	ldr	r3, [pc, #452]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	f000 819c 	beq.w	80036f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	f040 8114 	bne.w	80035f2 <HAL_RCC_OscConfig+0xcbe>
 80033ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033e2:	601a      	str	r2, [r3, #0]
  return result;
 80033e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fd10 	bl	8000e24 <HAL_GetTick>
 8003404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e009      	b.n	800341e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd fd0b 	bl	8000e24 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e18b      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 800341e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	fa93 f2a3 	rbit	r2, r3
 8003432:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003436:	601a      	str	r2, [r3, #0]
  return result;
 8003438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800343c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0xb24>
 8003452:	4b49      	ldr	r3, [pc, #292]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	e01b      	b.n	8003490 <HAL_RCC_OscConfig+0xb5c>
 8003458:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800345c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f2a3 	rbit	r2, r3
 800346c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f2a3 	rbit	r2, r3
 8003486:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003494:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003498:	6011      	str	r1, [r2, #0]
 800349a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	fa92 f1a2 	rbit	r1, r2
 80034a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034a8:	6011      	str	r1, [r2, #0]
  return result;
 80034aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	fab2 f282 	clz	r2, r2
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f042 0220 	orr.w	r2, r2, #32
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	f002 021f 	and.w	r2, r2, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d19e      	bne.n	800340a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034cc:	482a      	ldr	r0, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	6043      	str	r3, [r0, #4]
 80034e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003500:	601a      	str	r2, [r3, #0]
  return result;
 8003502:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003506:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003512:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fd fc81 	bl	8000e24 <HAL_GetTick>
 8003522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003526:	e009      	b.n	800353c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd fc7c 	bl	8000e24 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0fc      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 800353c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f2a3 	rbit	r2, r3
 8003550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003554:	601a      	str	r2, [r3, #0]
  return result;
 8003556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800355a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0xc48>
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <HAL_RCC_OscConfig+0xc44>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e01e      	b.n	80035b4 <HAL_RCC_OscConfig+0xc80>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800359a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_OscConfig+0xe0c>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	fa92 f1a2 	rbit	r1, r2
 80035c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035cc:	6011      	str	r1, [r2, #0]
  return result;
 80035ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f002 021f 	and.w	r2, r2, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d09b      	beq.n	8003528 <HAL_RCC_OscConfig+0xbf4>
 80035f0:	e0a0      	b.n	8003734 <HAL_RCC_OscConfig+0xe00>
 80035f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360a:	601a      	str	r2, [r3, #0]
  return result;
 800360c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003610:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800361c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	461a      	mov	r2, r3
 8003624:	2300      	movs	r3, #0
 8003626:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fbfc 	bl	8000e24 <HAL_GetTick>
 800362c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003630:	e009      	b.n	8003646 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fd fbf7 	bl	8000e24 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e077      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
 8003646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800364a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fa93 f2a3 	rbit	r2, r3
 800365a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365e:	601a      	str	r2, [r3, #0]
  return result;
 8003660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0xd4c>
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_OscConfig+0xe0c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	e01b      	b.n	80036b8 <HAL_RCC_OscConfig+0xd84>
 8003680:	f107 0320 	add.w	r3, r7, #32
 8003684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f107 0320 	add.w	r3, r7, #32
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f107 0318 	add.w	r3, r7, #24
 800369e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fa93 f2a3 	rbit	r2, r3
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_OscConfig+0xe0c>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f107 0210 	add.w	r2, r7, #16
 80036bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	f107 0210 	add.w	r2, r7, #16
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	fa92 f1a2 	rbit	r1, r2
 80036cc:	f107 020c 	add.w	r2, r7, #12
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f107 020c 	add.w	r2, r7, #12
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d19e      	bne.n	8003632 <HAL_RCC_OscConfig+0xcfe>
 80036f4:	e01e      	b.n	8003734 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f6:	1d3b      	adds	r3, r7, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e018      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCC_OscConfig+0xe0c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800370c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	429a      	cmp	r2, r3
 800371c:	d108      	bne.n	8003730 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800371e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003726:	1d3b      	adds	r3, r7, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b09e      	sub	sp, #120	; 0x78
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e162      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b90      	ldr	r3, [pc, #576]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0207 	and.w	r2, r3, #7
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d210      	bcs.n	800378c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	498d      	ldr	r1, [pc, #564]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 800376c:	4b8c      	ldr	r3, [pc, #560]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 0207 	bic.w	r2, r3, #7
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b89      	ldr	r3, [pc, #548]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0207 	and.w	r2, r3, #7
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e14a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4982      	ldr	r1, [pc, #520]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 800379a:	4b82      	ldr	r3, [pc, #520]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80dc 	beq.w	8003970 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13c      	bne.n	800383a <HAL_RCC_ClockConfig+0xf6>
 80037c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_ClockConfig+0xa6>
 80037e4:	4b6f      	ldr	r3, [pc, #444]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e00f      	b.n	800380a <HAL_RCC_ClockConfig+0xc6>
 80037ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	667b      	str	r3, [r7, #100]	; 0x64
 80037f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fc:	663b      	str	r3, [r7, #96]	; 0x60
 80037fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800380e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003812:	fa92 f2a2 	rbit	r2, r2
 8003816:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800381a:	fab2 f282 	clz	r2, r2
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f042 0220 	orr.w	r2, r2, #32
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	f002 021f 	and.w	r2, r2, #31
 800382a:	2101      	movs	r1, #1
 800382c:	fa01 f202 	lsl.w	r2, r1, r2
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d17b      	bne.n	800392e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0f3      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d13c      	bne.n	80038bc <HAL_RCC_ClockConfig+0x178>
 8003842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003846:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_RCC_ClockConfig+0x128>
 8003866:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e00f      	b.n	800388c <HAL_RCC_ClockConfig+0x148>
 800386c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003890:	63ba      	str	r2, [r7, #56]	; 0x38
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	fa92 f2a2 	rbit	r2, r2
 8003898:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d13a      	bne.n	800392e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b2      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
 80038bc:	2302      	movs	r3, #2
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d102      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x1a0>
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e00d      	b.n	8003900 <HAL_RCC_ClockConfig+0x1bc>
 80038e4:	2302      	movs	r3, #2
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2202      	movs	r2, #2
 8003902:	61ba      	str	r2, [r7, #24]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	fa92 f2a2 	rbit	r2, r2
 800390a:	617a      	str	r2, [r7, #20]
  return result;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f042 0220 	orr.w	r2, r2, #32
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	f002 021f 	and.w	r2, r2, #31
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f202 	lsl.w	r2, r1, r2
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e079      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	491d      	ldr	r1, [pc, #116]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fd fa70 	bl	8000e24 <HAL_GetTick>
 8003944:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd fa6c 	bl	8000e24 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e061      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_ClockConfig+0x260>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0207 	and.w	r2, r3, #7
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d914      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <HAL_RCC_ClockConfig+0x25c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e040      	b.n	8003a22 <HAL_RCC_ClockConfig+0x2de>
 80039a0:	40022000 	.word	0x40022000
 80039a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	491d      	ldr	r1, [pc, #116]	; (8003a2c <HAL_RCC_ClockConfig+0x2e8>)
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCC_ClockConfig+0x2e8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x2e8>)
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039e6:	f000 f829 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_ClockConfig+0x2e8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	22f0      	movs	r2, #240	; 0xf0
 80039f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	fa92 f2a2 	rbit	r2, r2
 80039fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	40d3      	lsrs	r3, r2
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x2ec>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a12:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <HAL_RCC_ClockConfig+0x2f0>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCC_ClockConfig+0x2f4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd f9be 	bl	8000d9c <HAL_InitTick>
  
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3778      	adds	r7, #120	; 0x78
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08005b4c 	.word	0x08005b4c
 8003a34:	20000000 	.word	0x20000000
 8003a38:	20000004 	.word	0x20000004

08003a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b08b      	sub	sp, #44	; 0x2c
 8003a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x30>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x36>
 8003a6a:	e03c      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	e03c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	fa92 f2a2 	rbit	r2, r2
 8003a84:	607a      	str	r2, [r7, #4]
  return result;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	40d3      	lsrs	r3, r2
 8003a90:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
 8003a94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	fa92 f2a2 	rbit	r2, r2
 8003aa8:	60fa      	str	r2, [r7, #12]
  return result;
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	fab2 f282 	clz	r2, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	40d3      	lsrs	r3, r2
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	623b      	str	r3, [r7, #32]
      break;
 8003ae4:	e002      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae8:	623b      	str	r3, [r7, #32]
      break;
 8003aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	372c      	adds	r7, #44	; 0x2c
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	007a1200 	.word	0x007a1200
 8003b04:	08005b64 	.word	0x08005b64
 8003b08:	08005b74 	.word	0x08005b74
 8003b0c:	003d0900 	.word	0x003d0900

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000000 	.word	0x20000000

08003b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b2e:	f7ff ffef 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b32:	4601      	mov	r1, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	603a      	str	r2, [r7, #0]
  return result;
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08005b5c 	.word	0x08005b5c

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b72:	f7ff ffcd 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b76:	4601      	mov	r1, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	603a      	str	r2, [r7, #0]
  return result;
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	fab2 f282 	clz	r2, r2
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	40d3      	lsrs	r3, r2
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08005b5c 	.word	0x08005b5c

08003bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b092      	sub	sp, #72	; 0x48
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d4 	beq.w	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10e      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4a4b      	ldr	r2, [pc, #300]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	61d3      	str	r3, [r2, #28]
 8003bec:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4a42      	ldr	r2, [pc, #264]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0c:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fd f905 	bl	8000e24 <HAL_GetTick>
 8003c1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fd f901 	bl	8000e24 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e169      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8084 	beq.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d07c      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	461a      	mov	r2, r3
 8003c86:	2301      	movs	r3, #1
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2300      	movs	r3, #0
 8003cac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04b      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fd f8b1 	bl	8000e24 <HAL_GetTick>
 8003cc2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd f8ad 	bl	8000e24 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e113      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	2302      	movs	r3, #2
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d108      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d0a:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	e00d      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
 8003d18:	10908100 	.word	0x10908100
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	613a      	str	r2, [r7, #16]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	fa92 f2a2 	rbit	r2, r2
 8003d36:	60fa      	str	r2, [r7, #12]
  return result;
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0b7      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d56:	496d      	ldr	r1, [pc, #436]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d58:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d70:	4a66      	ldr	r2, [pc, #408]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d72:	4b66      	ldr	r3, [pc, #408]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d88:	4960      	ldr	r1, [pc, #384]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8a:	4b60      	ldr	r3, [pc, #384]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da6:	4959      	ldr	r1, [pc, #356]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da8:	4b58      	ldr	r3, [pc, #352]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc4:	4951      	ldr	r1, [pc, #324]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc6:	4b51      	ldr	r3, [pc, #324]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de2:	494a      	ldr	r1, [pc, #296]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de4:	4b49      	ldr	r3, [pc, #292]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	f023 0210 	bic.w	r2, r3, #16
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e00:	4942      	ldr	r1, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e1e:	493b      	ldr	r1, [pc, #236]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e20:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f023 0220 	bic.w	r2, r3, #32
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e3c:	4933      	ldr	r1, [pc, #204]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e5a:	492c      	ldr	r1, [pc, #176]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e78:	4924      	ldr	r1, [pc, #144]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e96:	491d      	ldr	r1, [pc, #116]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e98:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003eb4:	4915      	ldr	r1, [pc, #84]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ed2:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ef0:	4906      	ldr	r1, [pc, #24]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	4313      	orrs	r3, r2
 8003f00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3748      	adds	r7, #72	; 0x48
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000

08003f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e09b      	b.n	800405a <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f32:	d009      	beq.n	8003f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	61da      	str	r2, [r3, #28]
 8003f3a:	e005      	b.n	8003f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fda2 	bl	8000aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f88:	d902      	bls.n	8003f90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e002      	b.n	8003f96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f9e:	d007      	beq.n	8003fb0 <HAL_SPI_Init+0xa0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6852      	ldr	r2, [r2, #4]
 8003fb8:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6892      	ldr	r2, [r2, #8]
 8003fc0:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6912      	ldr	r2, [r2, #16]
 8003fca:	f002 0202 	and.w	r2, r2, #2
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6952      	ldr	r2, [r2, #20]
 8003fd4:	f002 0201 	and.w	r2, r2, #1
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6992      	ldr	r2, [r2, #24]
 8003fde:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	69d2      	ldr	r2, [r2, #28]
 8003fe8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6a12      	ldr	r2, [r2, #32]
 8003ff2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ffc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6992      	ldr	r2, [r2, #24]
 800400c:	0c12      	lsrs	r2, r2, #16
 800400e:	f002 0104 	and.w	r1, r2, #4
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004016:	f002 0210 	and.w	r2, r2, #16
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004020:	f002 0208 	and.w	r2, r2, #8
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68d2      	ldr	r2, [r2, #12]
 800402a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800402e:	4311      	orrs	r1, r2
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	69d2      	ldr	r2, [r2, #28]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e049      	b.n	8004108 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc fd51 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 faa9 	bl	80045f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e04a      	b.n	80041be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <HAL_TIM_Base_Start_IT+0xbc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d013      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d115      	bne.n	80041a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d015      	beq.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d011      	beq.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a6:	e008      	b.n	80041ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e000      	b.n	80041bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	00010007 	.word	0x00010007

080041e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9c8 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9ba 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9cb 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f99e 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f990 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f9a1 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0208 	mvn.w	r2, #8
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f974 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f966 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f977 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f94a 	bl	80045bc <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f93c 	bl	80045a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f94d 	bl	80045d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0201 	mvn.w	r2, #1
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f916 	bl	8004594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fae6 	bl	8004960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d10e      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d107      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fad9 	bl	8004974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8fb 	bl	80045e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d10e      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d107      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0220 	mvn.w	r2, #32
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa99 	bl	800494c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_TIM_ConfigClockSource+0x18>
 8004436:	2302      	movs	r3, #2
 8004438:	e0a8      	b.n	800458c <HAL_TIM_ConfigClockSource+0x16a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004458:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004464:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d067      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x124>
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d80b      	bhi.n	8004492 <HAL_TIM_ConfigClockSource+0x70>
 800447a:	2b10      	cmp	r3, #16
 800447c:	d073      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x144>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d802      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x66>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d06f      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004486:	e078      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004488:	2b20      	cmp	r3, #32
 800448a:	d06c      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x144>
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d06a      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004490:	e073      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004492:	2b70      	cmp	r3, #112	; 0x70
 8004494:	d00d      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x90>
 8004496:	2b70      	cmp	r3, #112	; 0x70
 8004498:	d804      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x82>
 800449a:	2b50      	cmp	r3, #80	; 0x50
 800449c:	d033      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xe4>
 800449e:	2b60      	cmp	r3, #96	; 0x60
 80044a0:	d041      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80044a2:	e06a      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d066      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x156>
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	d017      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80044b0:	e063      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6899      	ldr	r1, [r3, #8]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f000 f9a3 	bl	800480c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	609a      	str	r2, [r3, #8]
      break;
 80044de:	e04c      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 f98c 	bl	800480c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	6892      	ldr	r2, [r2, #8]
 80044fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e039      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	461a      	mov	r2, r3
 8004514:	f000 f900 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2150      	movs	r1, #80	; 0x50
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f959 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8004524:	e029      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 f91f 	bl	8004776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2160      	movs	r1, #96	; 0x60
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f949 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8004544:	e019      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 f8e0 	bl	8004718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2140      	movs	r1, #64	; 0x40
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f939 	bl	80047d6 <TIM_ITRx_SetConfig>
      break;
 8004564:	e009      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f000 f930 	bl	80047d6 <TIM_ITRx_SetConfig>
        break;
 8004576:	e000      	b.n	800457a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3c      	ldr	r2, [pc, #240]	; (80046fc <TIM_Base_SetConfig+0x104>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00f      	beq.n	8004630 <TIM_Base_SetConfig+0x38>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d00b      	beq.n	8004630 <TIM_Base_SetConfig+0x38>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a39      	ldr	r2, [pc, #228]	; (8004700 <TIM_Base_SetConfig+0x108>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <TIM_Base_SetConfig+0x38>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a38      	ldr	r2, [pc, #224]	; (8004704 <TIM_Base_SetConfig+0x10c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a37      	ldr	r2, [pc, #220]	; (8004708 <TIM_Base_SetConfig+0x110>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d108      	bne.n	8004642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <TIM_Base_SetConfig+0x104>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01b      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d017      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <TIM_Base_SetConfig+0x108>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <TIM_Base_SetConfig+0x10c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a28      	ldr	r2, [pc, #160]	; (8004708 <TIM_Base_SetConfig+0x110>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a27      	ldr	r2, [pc, #156]	; (800470c <TIM_Base_SetConfig+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a26      	ldr	r2, [pc, #152]	; (8004710 <TIM_Base_SetConfig+0x118>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a10      	ldr	r2, [pc, #64]	; (80046fc <TIM_Base_SetConfig+0x104>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0xe8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <TIM_Base_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0xe8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a10      	ldr	r2, [pc, #64]	; (800470c <TIM_Base_SetConfig+0x114>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0xe8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0f      	ldr	r2, [pc, #60]	; (8004710 <TIM_Base_SetConfig+0x118>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0xe8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0e      	ldr	r2, [pc, #56]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	615a      	str	r2, [r3, #20]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40013400 	.word	0x40013400
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f023 0201 	bic.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 030a 	bic.w	r3, r3, #10
 8004754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004776:	b480      	push	{r7}
 8004778:	b087      	sub	sp, #28
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f023 0210 	bic.w	r2, r3, #16
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	031b      	lsls	r3, r3, #12
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f043 0307 	orr.w	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]
}
 8004800:	bf00      	nop
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	021a      	lsls	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	431a      	orrs	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e063      	b.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2b      	ldr	r2, [pc, #172]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2a      	ldr	r2, [pc, #168]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800489e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d018      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d013      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00e      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d009      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10c      	bne.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40014000 	.word	0x40014000

0800494c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e040      	b.n	8004a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc f8e6 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8c0 	bl	8004b4c <UART_SetConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e022      	b.n	8004a1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa86 	bl	8004ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	6852      	ldr	r2, [r2, #4]
 80049ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	6892      	ldr	r2, [r2, #8]
 80049fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb0d 	bl	8005034 <UART_CheckIdleState>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	f040 8082 	bne.w	8004b42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Transmit+0x26>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07a      	b.n	8004b44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Transmit+0x38>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e073      	b.n	8004b44 <HAL_UART_Transmit+0x120>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fc f9d7 	bl	8000e24 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d108      	bne.n	8004aa4 <HAL_UART_Transmit+0x80>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e003      	b.n	8004aac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ab4:	e02d      	b.n	8004b12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb00 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e039      	b.n	8004b44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	8812      	ldrh	r2, [r2, #0]
 8004ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e008      	b.n	8004b00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	b292      	uxth	r2, r2
 8004af8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1cb      	bne.n	8004ab6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	; 0x40
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 facc 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e005      	b.n	8004b44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b7e:	f023 030c 	bic.w	r3, r3, #12
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	6852      	ldr	r2, [r2, #4]
 8004b92:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6892      	ldr	r2, [r2, #8]
 8004bb8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4aad      	ldr	r2, [pc, #692]	; (8004e7c <UART_SetConfig+0x330>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d121      	bne.n	8004c10 <UART_SetConfig+0xc4>
 8004bcc:	4bac      	ldr	r3, [pc, #688]	; (8004e80 <UART_SetConfig+0x334>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d817      	bhi.n	8004c08 <UART_SetConfig+0xbc>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x94>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c03 	.word	0x08004c03
 8004bec:	08004bf7 	.word	0x08004bf7
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e0b2      	b.n	8004d5c <UART_SetConfig+0x210>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	77fb      	strb	r3, [r7, #31]
 8004bfa:	e0af      	b.n	8004d5c <UART_SetConfig+0x210>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e0ac      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c02:	2308      	movs	r3, #8
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e0a9      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	bf00      	nop
 8004c0e:	e0a5      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a9b      	ldr	r2, [pc, #620]	; (8004e84 <UART_SetConfig+0x338>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d123      	bne.n	8004c62 <UART_SetConfig+0x116>
 8004c1a:	4b99      	ldr	r3, [pc, #612]	; (8004e80 <UART_SetConfig+0x334>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d012      	beq.n	8004c4e <UART_SetConfig+0x102>
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d802      	bhi.n	8004c34 <UART_SetConfig+0xe8>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <UART_SetConfig+0xf6>
 8004c32:	e012      	b.n	8004c5a <UART_SetConfig+0x10e>
 8004c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c38:	d00c      	beq.n	8004c54 <UART_SetConfig+0x108>
 8004c3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c3e:	d003      	beq.n	8004c48 <UART_SetConfig+0xfc>
 8004c40:	e00b      	b.n	8004c5a <UART_SetConfig+0x10e>
 8004c42:	2300      	movs	r3, #0
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e089      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e086      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e083      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c54:	2308      	movs	r3, #8
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e080      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	bf00      	nop
 8004c60:	e07c      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a88      	ldr	r2, [pc, #544]	; (8004e88 <UART_SetConfig+0x33c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d123      	bne.n	8004cb4 <UART_SetConfig+0x168>
 8004c6c:	4b84      	ldr	r3, [pc, #528]	; (8004e80 <UART_SetConfig+0x334>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c78:	d012      	beq.n	8004ca0 <UART_SetConfig+0x154>
 8004c7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c7e:	d802      	bhi.n	8004c86 <UART_SetConfig+0x13a>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <UART_SetConfig+0x148>
 8004c84:	e012      	b.n	8004cac <UART_SetConfig+0x160>
 8004c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c8a:	d00c      	beq.n	8004ca6 <UART_SetConfig+0x15a>
 8004c8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c90:	d003      	beq.n	8004c9a <UART_SetConfig+0x14e>
 8004c92:	e00b      	b.n	8004cac <UART_SetConfig+0x160>
 8004c94:	2300      	movs	r3, #0
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e060      	b.n	8004d5c <UART_SetConfig+0x210>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e05d      	b.n	8004d5c <UART_SetConfig+0x210>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e05a      	b.n	8004d5c <UART_SetConfig+0x210>
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e057      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cac:	2310      	movs	r3, #16
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	bf00      	nop
 8004cb2:	e053      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a74      	ldr	r2, [pc, #464]	; (8004e8c <UART_SetConfig+0x340>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d123      	bne.n	8004d06 <UART_SetConfig+0x1ba>
 8004cbe:	4b70      	ldr	r3, [pc, #448]	; (8004e80 <UART_SetConfig+0x334>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cca:	d012      	beq.n	8004cf2 <UART_SetConfig+0x1a6>
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd0:	d802      	bhi.n	8004cd8 <UART_SetConfig+0x18c>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <UART_SetConfig+0x19a>
 8004cd6:	e012      	b.n	8004cfe <UART_SetConfig+0x1b2>
 8004cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cdc:	d00c      	beq.n	8004cf8 <UART_SetConfig+0x1ac>
 8004cde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce2:	d003      	beq.n	8004cec <UART_SetConfig+0x1a0>
 8004ce4:	e00b      	b.n	8004cfe <UART_SetConfig+0x1b2>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e037      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cec:	2302      	movs	r3, #2
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e034      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e031      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e02e      	b.n	8004d5c <UART_SetConfig+0x210>
 8004cfe:	2310      	movs	r3, #16
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	bf00      	nop
 8004d04:	e02a      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a61      	ldr	r2, [pc, #388]	; (8004e90 <UART_SetConfig+0x344>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d123      	bne.n	8004d58 <UART_SetConfig+0x20c>
 8004d10:	4b5b      	ldr	r3, [pc, #364]	; (8004e80 <UART_SetConfig+0x334>)
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1c:	d012      	beq.n	8004d44 <UART_SetConfig+0x1f8>
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d22:	d802      	bhi.n	8004d2a <UART_SetConfig+0x1de>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <UART_SetConfig+0x1ec>
 8004d28:	e012      	b.n	8004d50 <UART_SetConfig+0x204>
 8004d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d2e:	d00c      	beq.n	8004d4a <UART_SetConfig+0x1fe>
 8004d30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d34:	d003      	beq.n	8004d3e <UART_SetConfig+0x1f2>
 8004d36:	e00b      	b.n	8004d50 <UART_SetConfig+0x204>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	77fb      	strb	r3, [r7, #31]
 8004d3c:	e00e      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	77fb      	strb	r3, [r7, #31]
 8004d42:	e00b      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d44:	2304      	movs	r3, #4
 8004d46:	77fb      	strb	r3, [r7, #31]
 8004d48:	e008      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e005      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d50:	2310      	movs	r3, #16
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	bf00      	nop
 8004d56:	e001      	b.n	8004d5c <UART_SetConfig+0x210>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d64:	d15d      	bne.n	8004e22 <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8004d66:	7ffb      	ldrb	r3, [r7, #31]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d828      	bhi.n	8004dbe <UART_SetConfig+0x272>
 8004d6c:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <UART_SetConfig+0x228>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004dbf 	.word	0x08004dbf
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
 8004d94:	08004db7 	.word	0x08004db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fe fec6 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	61b8      	str	r0, [r7, #24]
        break;
 8004d9e:	e013      	b.n	8004dc8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fe fee4 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8004da4:	61b8      	str	r0, [r7, #24]
        break;
 8004da6:	e00f      	b.n	8004dc8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <UART_SetConfig+0x348>)
 8004daa:	61bb      	str	r3, [r7, #24]
        break;
 8004dac:	e00c      	b.n	8004dc8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fe fe45 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8004db2:	61b8      	str	r0, [r7, #24]
        break;
 8004db4:	e008      	b.n	8004dc8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e004      	b.n	8004dc8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8085 	beq.w	8004eda <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	005a      	lsls	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	441a      	add	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d916      	bls.n	8004e1c <UART_SetConfig+0x2d0>
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d212      	bcs.n	8004e1c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f023 030f 	bic.w	r3, r3, #15
 8004dfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	89fa      	ldrh	r2, [r7, #14]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e05e      	b.n	8004eda <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77bb      	strb	r3, [r7, #30]
 8004e20:	e05b      	b.n	8004eda <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d837      	bhi.n	8004e98 <UART_SetConfig+0x34c>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x2e4>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e99 	.word	0x08004e99
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e99 	.word	0x08004e99
 8004e50:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe fe68 	bl	8003b28 <HAL_RCC_GetPCLK1Freq>
 8004e58:	61b8      	str	r0, [r7, #24]
        break;
 8004e5a:	e022      	b.n	8004ea2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fe fe86 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8004e60:	61b8      	str	r0, [r7, #24]
        break;
 8004e62:	e01e      	b.n	8004ea2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <UART_SetConfig+0x348>)
 8004e66:	61bb      	str	r3, [r7, #24]
        break;
 8004e68:	e01b      	b.n	8004ea2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe fde7 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8004e6e:	61b8      	str	r0, [r7, #24]
        break;
 8004e70:	e017      	b.n	8004ea2 <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	61bb      	str	r3, [r7, #24]
        break;
 8004e78:	e013      	b.n	8004ea2 <UART_SetConfig+0x356>
 8004e7a:	bf00      	nop
 8004e7c:	40013800 	.word	0x40013800
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40004400 	.word	0x40004400
 8004e88:	40004800 	.word	0x40004800
 8004e8c:	40004c00 	.word	0x40004c00
 8004e90:	40005000 	.word	0x40005000
 8004e94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	77bb      	strb	r3, [r7, #30]
        break;
 8004ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d018      	beq.n	8004eda <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085a      	lsrs	r2, r3, #1
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b0f      	cmp	r3, #15
 8004ec2:	d908      	bls.n	8004ed6 <UART_SetConfig+0x38a>
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d204      	bcs.n	8004ed6 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e001      	b.n	8004eda <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ee6:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	6852      	ldr	r2, [r2, #4]
 8004f0e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6852      	ldr	r2, [r2, #4]
 8004f30:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	6852      	ldr	r2, [r2, #4]
 8004f52:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6852      	ldr	r2, [r2, #4]
 8004f74:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	6892      	ldr	r2, [r2, #8]
 8004f96:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fee:	d10a      	bne.n	8005006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	6852      	ldr	r2, [r2, #4]
 800501c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005044:	f7fb feee 	bl	8000e24 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10e      	bne.n	8005076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f82d 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e023      	b.n	80050be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d10e      	bne.n	80050a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f817 	bl	80050c6 <UART_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00d      	b.n	80050be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	e05e      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d05a      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e0:	f7fb fea0 	bl	8000e24 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d802      	bhi.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11b      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005104:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	6892      	ldr	r2, [r2, #8]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e043      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02c      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d124      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005154:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005164:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00f      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	401a      	ands	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d091      	beq.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051c6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80051ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4013      	ands	r3, r2
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80051f4:	b084      	sub	sp, #16
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	f107 0014 	add.w	r0, r7, #20
 8005202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	b004      	add	sp, #16
 8005234:	4770      	bx	lr
	...

08005238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005270 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800523c:	480d      	ldr	r0, [pc, #52]	; (8005274 <LoopForever+0x6>)
  ldr r1, =_edata
 800523e:	490e      	ldr	r1, [pc, #56]	; (8005278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005240:	4a0e      	ldr	r2, [pc, #56]	; (800527c <LoopForever+0xe>)
  movs r3, #0
 8005242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005244:	e002      	b.n	800524c <LoopCopyDataInit>

08005246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800524a:	3304      	adds	r3, #4

0800524c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800524c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800524e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005250:	d3f9      	bcc.n	8005246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005252:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005254:	4c0b      	ldr	r4, [pc, #44]	; (8005284 <LoopForever+0x16>)
  movs r3, #0
 8005256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005258:	e001      	b.n	800525e <LoopFillZerobss>

0800525a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800525a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800525c:	3204      	adds	r2, #4

0800525e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800525e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005260:	d3fb      	bcc.n	800525a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005262:	f7fb fd73 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005266:	f000 f817 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800526a:	f7fb f809 	bl	8000280 <main>

0800526e <LoopForever>:

LoopForever:
    b LoopForever
 800526e:	e7fe      	b.n	800526e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005270:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005278:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800527c:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 8005280:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005284:	2000055c 	.word	0x2000055c

08005288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005288:	e7fe      	b.n	8005288 <ADC1_2_IRQHandler>
	...

0800528c <__errno>:
 800528c:	4b01      	ldr	r3, [pc, #4]	; (8005294 <__errno+0x8>)
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0d      	ldr	r6, [pc, #52]	; (80052d0 <__libc_init_array+0x38>)
 800529c:	4c0d      	ldr	r4, [pc, #52]	; (80052d4 <__libc_init_array+0x3c>)
 800529e:	1ba4      	subs	r4, r4, r6
 80052a0:	10a4      	asrs	r4, r4, #2
 80052a2:	2500      	movs	r5, #0
 80052a4:	42a5      	cmp	r5, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	4e0b      	ldr	r6, [pc, #44]	; (80052d8 <__libc_init_array+0x40>)
 80052aa:	4c0c      	ldr	r4, [pc, #48]	; (80052dc <__libc_init_array+0x44>)
 80052ac:	f000 fc3e 	bl	8005b2c <_init>
 80052b0:	1ba4      	subs	r4, r4, r6
 80052b2:	10a4      	asrs	r4, r4, #2
 80052b4:	2500      	movs	r5, #0
 80052b6:	42a5      	cmp	r5, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052c0:	4798      	blx	r3
 80052c2:	3501      	adds	r5, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ca:	4798      	blx	r3
 80052cc:	3501      	adds	r5, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	08005bb8 	.word	0x08005bb8
 80052d4:	08005bb8 	.word	0x08005bb8
 80052d8:	08005bb8 	.word	0x08005bb8
 80052dc:	08005bbc 	.word	0x08005bbc

080052e0 <memset>:
 80052e0:	4402      	add	r2, r0
 80052e2:	4603      	mov	r3, r0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d100      	bne.n	80052ea <memset+0xa>
 80052e8:	4770      	bx	lr
 80052ea:	f803 1b01 	strb.w	r1, [r3], #1
 80052ee:	e7f9      	b.n	80052e4 <memset+0x4>

080052f0 <siprintf>:
 80052f0:	b40e      	push	{r1, r2, r3}
 80052f2:	b500      	push	{lr}
 80052f4:	b09c      	sub	sp, #112	; 0x70
 80052f6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80052fa:	ab1d      	add	r3, sp, #116	; 0x74
 80052fc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005300:	9002      	str	r0, [sp, #8]
 8005302:	9006      	str	r0, [sp, #24]
 8005304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005308:	480a      	ldr	r0, [pc, #40]	; (8005334 <siprintf+0x44>)
 800530a:	9104      	str	r1, [sp, #16]
 800530c:	9107      	str	r1, [sp, #28]
 800530e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005312:	f853 2b04 	ldr.w	r2, [r3], #4
 8005316:	f8ad 1016 	strh.w	r1, [sp, #22]
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	a902      	add	r1, sp, #8
 8005320:	f000 f866 	bl	80053f0 <_svfiprintf_r>
 8005324:	9b02      	ldr	r3, [sp, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	b01c      	add	sp, #112	; 0x70
 800532c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005330:	b003      	add	sp, #12
 8005332:	4770      	bx	lr
 8005334:	2000000c 	.word	0x2000000c

08005338 <__ssputs_r>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	688e      	ldr	r6, [r1, #8]
 800533e:	429e      	cmp	r6, r3
 8005340:	4682      	mov	sl, r0
 8005342:	460c      	mov	r4, r1
 8005344:	4691      	mov	r9, r2
 8005346:	4698      	mov	r8, r3
 8005348:	d835      	bhi.n	80053b6 <__ssputs_r+0x7e>
 800534a:	898a      	ldrh	r2, [r1, #12]
 800534c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005350:	d031      	beq.n	80053b6 <__ssputs_r+0x7e>
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	6909      	ldr	r1, [r1, #16]
 8005356:	1a6f      	subs	r7, r5, r1
 8005358:	6965      	ldr	r5, [r4, #20]
 800535a:	2302      	movs	r3, #2
 800535c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005360:	fb95 f5f3 	sdiv	r5, r5, r3
 8005364:	f108 0301 	add.w	r3, r8, #1
 8005368:	443b      	add	r3, r7
 800536a:	429d      	cmp	r5, r3
 800536c:	bf38      	it	cc
 800536e:	461d      	movcc	r5, r3
 8005370:	0553      	lsls	r3, r2, #21
 8005372:	d531      	bpl.n	80053d8 <__ssputs_r+0xa0>
 8005374:	4629      	mov	r1, r5
 8005376:	f000 fb39 	bl	80059ec <_malloc_r>
 800537a:	4606      	mov	r6, r0
 800537c:	b950      	cbnz	r0, 8005394 <__ssputs_r+0x5c>
 800537e:	230c      	movs	r3, #12
 8005380:	f8ca 3000 	str.w	r3, [sl]
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538a:	81a3      	strh	r3, [r4, #12]
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005394:	463a      	mov	r2, r7
 8005396:	6921      	ldr	r1, [r4, #16]
 8005398:	f000 fab4 	bl	8005904 <memcpy>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	6126      	str	r6, [r4, #16]
 80053aa:	6165      	str	r5, [r4, #20]
 80053ac:	443e      	add	r6, r7
 80053ae:	1bed      	subs	r5, r5, r7
 80053b0:	6026      	str	r6, [r4, #0]
 80053b2:	60a5      	str	r5, [r4, #8]
 80053b4:	4646      	mov	r6, r8
 80053b6:	4546      	cmp	r6, r8
 80053b8:	bf28      	it	cs
 80053ba:	4646      	movcs	r6, r8
 80053bc:	4632      	mov	r2, r6
 80053be:	4649      	mov	r1, r9
 80053c0:	6820      	ldr	r0, [r4, #0]
 80053c2:	f000 faaa 	bl	800591a <memmove>
 80053c6:	68a3      	ldr	r3, [r4, #8]
 80053c8:	1b9b      	subs	r3, r3, r6
 80053ca:	60a3      	str	r3, [r4, #8]
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	441e      	add	r6, r3
 80053d0:	6026      	str	r6, [r4, #0]
 80053d2:	2000      	movs	r0, #0
 80053d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d8:	462a      	mov	r2, r5
 80053da:	f000 fb65 	bl	8005aa8 <_realloc_r>
 80053de:	4606      	mov	r6, r0
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d1e1      	bne.n	80053a8 <__ssputs_r+0x70>
 80053e4:	6921      	ldr	r1, [r4, #16]
 80053e6:	4650      	mov	r0, sl
 80053e8:	f000 fab2 	bl	8005950 <_free_r>
 80053ec:	e7c7      	b.n	800537e <__ssputs_r+0x46>
	...

080053f0 <_svfiprintf_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	b09d      	sub	sp, #116	; 0x74
 80053f6:	4680      	mov	r8, r0
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	898b      	ldrh	r3, [r1, #12]
 80053fc:	061c      	lsls	r4, r3, #24
 80053fe:	460d      	mov	r5, r1
 8005400:	4616      	mov	r6, r2
 8005402:	d50f      	bpl.n	8005424 <_svfiprintf_r+0x34>
 8005404:	690b      	ldr	r3, [r1, #16]
 8005406:	b96b      	cbnz	r3, 8005424 <_svfiprintf_r+0x34>
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	f000 faef 	bl	80059ec <_malloc_r>
 800540e:	6028      	str	r0, [r5, #0]
 8005410:	6128      	str	r0, [r5, #16]
 8005412:	b928      	cbnz	r0, 8005420 <_svfiprintf_r+0x30>
 8005414:	230c      	movs	r3, #12
 8005416:	f8c8 3000 	str.w	r3, [r8]
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	e0c5      	b.n	80055ac <_svfiprintf_r+0x1bc>
 8005420:	2340      	movs	r3, #64	; 0x40
 8005422:	616b      	str	r3, [r5, #20]
 8005424:	2300      	movs	r3, #0
 8005426:	9309      	str	r3, [sp, #36]	; 0x24
 8005428:	2320      	movs	r3, #32
 800542a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800542e:	2330      	movs	r3, #48	; 0x30
 8005430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005434:	f04f 0b01 	mov.w	fp, #1
 8005438:	4637      	mov	r7, r6
 800543a:	463c      	mov	r4, r7
 800543c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d13c      	bne.n	80054be <_svfiprintf_r+0xce>
 8005444:	ebb7 0a06 	subs.w	sl, r7, r6
 8005448:	d00b      	beq.n	8005462 <_svfiprintf_r+0x72>
 800544a:	4653      	mov	r3, sl
 800544c:	4632      	mov	r2, r6
 800544e:	4629      	mov	r1, r5
 8005450:	4640      	mov	r0, r8
 8005452:	f7ff ff71 	bl	8005338 <__ssputs_r>
 8005456:	3001      	adds	r0, #1
 8005458:	f000 80a3 	beq.w	80055a2 <_svfiprintf_r+0x1b2>
 800545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800545e:	4453      	add	r3, sl
 8005460:	9309      	str	r3, [sp, #36]	; 0x24
 8005462:	783b      	ldrb	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 809c 	beq.w	80055a2 <_svfiprintf_r+0x1b2>
 800546a:	2300      	movs	r3, #0
 800546c:	f04f 32ff 	mov.w	r2, #4294967295
 8005470:	9304      	str	r3, [sp, #16]
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	9205      	str	r2, [sp, #20]
 8005476:	9306      	str	r3, [sp, #24]
 8005478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547c:	931a      	str	r3, [sp, #104]	; 0x68
 800547e:	2205      	movs	r2, #5
 8005480:	7821      	ldrb	r1, [r4, #0]
 8005482:	4850      	ldr	r0, [pc, #320]	; (80055c4 <_svfiprintf_r+0x1d4>)
 8005484:	f7fa feac 	bl	80001e0 <memchr>
 8005488:	1c67      	adds	r7, r4, #1
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	b9d8      	cbnz	r0, 80054c6 <_svfiprintf_r+0xd6>
 800548e:	06d9      	lsls	r1, r3, #27
 8005490:	bf44      	itt	mi
 8005492:	2220      	movmi	r2, #32
 8005494:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005498:	071a      	lsls	r2, r3, #28
 800549a:	bf44      	itt	mi
 800549c:	222b      	movmi	r2, #43	; 0x2b
 800549e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054a2:	7822      	ldrb	r2, [r4, #0]
 80054a4:	2a2a      	cmp	r2, #42	; 0x2a
 80054a6:	d016      	beq.n	80054d6 <_svfiprintf_r+0xe6>
 80054a8:	9a07      	ldr	r2, [sp, #28]
 80054aa:	2100      	movs	r1, #0
 80054ac:	200a      	movs	r0, #10
 80054ae:	4627      	mov	r7, r4
 80054b0:	3401      	adds	r4, #1
 80054b2:	783b      	ldrb	r3, [r7, #0]
 80054b4:	3b30      	subs	r3, #48	; 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d951      	bls.n	800555e <_svfiprintf_r+0x16e>
 80054ba:	b1c9      	cbz	r1, 80054f0 <_svfiprintf_r+0x100>
 80054bc:	e011      	b.n	80054e2 <_svfiprintf_r+0xf2>
 80054be:	2b25      	cmp	r3, #37	; 0x25
 80054c0:	d0c0      	beq.n	8005444 <_svfiprintf_r+0x54>
 80054c2:	4627      	mov	r7, r4
 80054c4:	e7b9      	b.n	800543a <_svfiprintf_r+0x4a>
 80054c6:	4a3f      	ldr	r2, [pc, #252]	; (80055c4 <_svfiprintf_r+0x1d4>)
 80054c8:	1a80      	subs	r0, r0, r2
 80054ca:	fa0b f000 	lsl.w	r0, fp, r0
 80054ce:	4318      	orrs	r0, r3
 80054d0:	9004      	str	r0, [sp, #16]
 80054d2:	463c      	mov	r4, r7
 80054d4:	e7d3      	b.n	800547e <_svfiprintf_r+0x8e>
 80054d6:	9a03      	ldr	r2, [sp, #12]
 80054d8:	1d11      	adds	r1, r2, #4
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	9103      	str	r1, [sp, #12]
 80054de:	2a00      	cmp	r2, #0
 80054e0:	db01      	blt.n	80054e6 <_svfiprintf_r+0xf6>
 80054e2:	9207      	str	r2, [sp, #28]
 80054e4:	e004      	b.n	80054f0 <_svfiprintf_r+0x100>
 80054e6:	4252      	negs	r2, r2
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	9207      	str	r2, [sp, #28]
 80054ee:	9304      	str	r3, [sp, #16]
 80054f0:	783b      	ldrb	r3, [r7, #0]
 80054f2:	2b2e      	cmp	r3, #46	; 0x2e
 80054f4:	d10e      	bne.n	8005514 <_svfiprintf_r+0x124>
 80054f6:	787b      	ldrb	r3, [r7, #1]
 80054f8:	2b2a      	cmp	r3, #42	; 0x2a
 80054fa:	f107 0101 	add.w	r1, r7, #1
 80054fe:	d132      	bne.n	8005566 <_svfiprintf_r+0x176>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb8      	it	lt
 800550c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005510:	3702      	adds	r7, #2
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	4c2c      	ldr	r4, [pc, #176]	; (80055c8 <_svfiprintf_r+0x1d8>)
 8005516:	7839      	ldrb	r1, [r7, #0]
 8005518:	2203      	movs	r2, #3
 800551a:	4620      	mov	r0, r4
 800551c:	f7fa fe60 	bl	80001e0 <memchr>
 8005520:	b138      	cbz	r0, 8005532 <_svfiprintf_r+0x142>
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	1b00      	subs	r0, r0, r4
 8005526:	fa03 f000 	lsl.w	r0, r3, r0
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	4303      	orrs	r3, r0
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	3701      	adds	r7, #1
 8005532:	7839      	ldrb	r1, [r7, #0]
 8005534:	4825      	ldr	r0, [pc, #148]	; (80055cc <_svfiprintf_r+0x1dc>)
 8005536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800553a:	2206      	movs	r2, #6
 800553c:	1c7e      	adds	r6, r7, #1
 800553e:	f7fa fe4f 	bl	80001e0 <memchr>
 8005542:	2800      	cmp	r0, #0
 8005544:	d035      	beq.n	80055b2 <_svfiprintf_r+0x1c2>
 8005546:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <_svfiprintf_r+0x1e0>)
 8005548:	b9fb      	cbnz	r3, 800558a <_svfiprintf_r+0x19a>
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	3307      	adds	r3, #7
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	3308      	adds	r3, #8
 8005554:	9303      	str	r3, [sp, #12]
 8005556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005558:	444b      	add	r3, r9
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	e76c      	b.n	8005438 <_svfiprintf_r+0x48>
 800555e:	fb00 3202 	mla	r2, r0, r2, r3
 8005562:	2101      	movs	r1, #1
 8005564:	e7a3      	b.n	80054ae <_svfiprintf_r+0xbe>
 8005566:	2300      	movs	r3, #0
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	4618      	mov	r0, r3
 800556c:	240a      	movs	r4, #10
 800556e:	460f      	mov	r7, r1
 8005570:	3101      	adds	r1, #1
 8005572:	783a      	ldrb	r2, [r7, #0]
 8005574:	3a30      	subs	r2, #48	; 0x30
 8005576:	2a09      	cmp	r2, #9
 8005578:	d903      	bls.n	8005582 <_svfiprintf_r+0x192>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ca      	beq.n	8005514 <_svfiprintf_r+0x124>
 800557e:	9005      	str	r0, [sp, #20]
 8005580:	e7c8      	b.n	8005514 <_svfiprintf_r+0x124>
 8005582:	fb04 2000 	mla	r0, r4, r0, r2
 8005586:	2301      	movs	r3, #1
 8005588:	e7f1      	b.n	800556e <_svfiprintf_r+0x17e>
 800558a:	ab03      	add	r3, sp, #12
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	462a      	mov	r2, r5
 8005590:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <_svfiprintf_r+0x1e4>)
 8005592:	a904      	add	r1, sp, #16
 8005594:	4640      	mov	r0, r8
 8005596:	f3af 8000 	nop.w
 800559a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800559e:	4681      	mov	r9, r0
 80055a0:	d1d9      	bne.n	8005556 <_svfiprintf_r+0x166>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	065b      	lsls	r3, r3, #25
 80055a6:	f53f af38 	bmi.w	800541a <_svfiprintf_r+0x2a>
 80055aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ac:	b01d      	add	sp, #116	; 0x74
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	ab03      	add	r3, sp, #12
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	462a      	mov	r2, r5
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <_svfiprintf_r+0x1e4>)
 80055ba:	a904      	add	r1, sp, #16
 80055bc:	4640      	mov	r0, r8
 80055be:	f000 f881 	bl	80056c4 <_printf_i>
 80055c2:	e7ea      	b.n	800559a <_svfiprintf_r+0x1aa>
 80055c4:	08005b84 	.word	0x08005b84
 80055c8:	08005b8a 	.word	0x08005b8a
 80055cc:	08005b8e 	.word	0x08005b8e
 80055d0:	00000000 	.word	0x00000000
 80055d4:	08005339 	.word	0x08005339

080055d8 <_printf_common>:
 80055d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	4691      	mov	r9, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	688a      	ldr	r2, [r1, #8]
 80055e2:	690b      	ldr	r3, [r1, #16]
 80055e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfb8      	it	lt
 80055ec:	4613      	movlt	r3, r2
 80055ee:	f8c9 3000 	str.w	r3, [r9]
 80055f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f6:	4606      	mov	r6, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	b112      	cbz	r2, 8005602 <_printf_common+0x2a>
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c9 3000 	str.w	r3, [r9]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	0699      	lsls	r1, r3, #26
 8005606:	bf42      	ittt	mi
 8005608:	f8d9 3000 	ldrmi.w	r3, [r9]
 800560c:	3302      	addmi	r3, #2
 800560e:	f8c9 3000 	strmi.w	r3, [r9]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	f015 0506 	ands.w	r5, r5, #6
 8005618:	d107      	bne.n	800562a <_printf_common+0x52>
 800561a:	f104 0a19 	add.w	sl, r4, #25
 800561e:	68e3      	ldr	r3, [r4, #12]
 8005620:	f8d9 2000 	ldr.w	r2, [r9]
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	429d      	cmp	r5, r3
 8005628:	db29      	blt.n	800567e <_printf_common+0xa6>
 800562a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800562e:	6822      	ldr	r2, [r4, #0]
 8005630:	3300      	adds	r3, #0
 8005632:	bf18      	it	ne
 8005634:	2301      	movne	r3, #1
 8005636:	0692      	lsls	r2, r2, #26
 8005638:	d42e      	bmi.n	8005698 <_printf_common+0xc0>
 800563a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800563e:	4639      	mov	r1, r7
 8005640:	4630      	mov	r0, r6
 8005642:	47c0      	blx	r8
 8005644:	3001      	adds	r0, #1
 8005646:	d021      	beq.n	800568c <_printf_common+0xb4>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	68e5      	ldr	r5, [r4, #12]
 800564c:	f8d9 2000 	ldr.w	r2, [r9]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf08      	it	eq
 8005658:	1aad      	subeq	r5, r5, r2
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	bf0c      	ite	eq
 8005660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005664:	2500      	movne	r5, #0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfc4      	itt	gt
 800566a:	1a9b      	subgt	r3, r3, r2
 800566c:	18ed      	addgt	r5, r5, r3
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	341a      	adds	r4, #26
 8005674:	454d      	cmp	r5, r9
 8005676:	d11b      	bne.n	80056b0 <_printf_common+0xd8>
 8005678:	2000      	movs	r0, #0
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	2301      	movs	r3, #1
 8005680:	4652      	mov	r2, sl
 8005682:	4639      	mov	r1, r7
 8005684:	4630      	mov	r0, r6
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d103      	bne.n	8005694 <_printf_common+0xbc>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005694:	3501      	adds	r5, #1
 8005696:	e7c2      	b.n	800561e <_printf_common+0x46>
 8005698:	18e1      	adds	r1, r4, r3
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	2030      	movs	r0, #48	; 0x30
 800569e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a2:	4422      	add	r2, r4
 80056a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ac:	3302      	adds	r3, #2
 80056ae:	e7c4      	b.n	800563a <_printf_common+0x62>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4622      	mov	r2, r4
 80056b4:	4639      	mov	r1, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	47c0      	blx	r8
 80056ba:	3001      	adds	r0, #1
 80056bc:	d0e6      	beq.n	800568c <_printf_common+0xb4>
 80056be:	f109 0901 	add.w	r9, r9, #1
 80056c2:	e7d7      	b.n	8005674 <_printf_common+0x9c>

080056c4 <_printf_i>:
 80056c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c8:	4617      	mov	r7, r2
 80056ca:	7e0a      	ldrb	r2, [r1, #24]
 80056cc:	b085      	sub	sp, #20
 80056ce:	2a6e      	cmp	r2, #110	; 0x6e
 80056d0:	4698      	mov	r8, r3
 80056d2:	4606      	mov	r6, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80056dc:	f000 80bc 	beq.w	8005858 <_printf_i+0x194>
 80056e0:	d81a      	bhi.n	8005718 <_printf_i+0x54>
 80056e2:	2a63      	cmp	r2, #99	; 0x63
 80056e4:	d02e      	beq.n	8005744 <_printf_i+0x80>
 80056e6:	d80a      	bhi.n	80056fe <_printf_i+0x3a>
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	f000 80c8 	beq.w	800587e <_printf_i+0x1ba>
 80056ee:	2a58      	cmp	r2, #88	; 0x58
 80056f0:	f000 808a 	beq.w	8005808 <_printf_i+0x144>
 80056f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80056fc:	e02a      	b.n	8005754 <_printf_i+0x90>
 80056fe:	2a64      	cmp	r2, #100	; 0x64
 8005700:	d001      	beq.n	8005706 <_printf_i+0x42>
 8005702:	2a69      	cmp	r2, #105	; 0x69
 8005704:	d1f6      	bne.n	80056f4 <_printf_i+0x30>
 8005706:	6821      	ldr	r1, [r4, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800570e:	d023      	beq.n	8005758 <_printf_i+0x94>
 8005710:	1d11      	adds	r1, r2, #4
 8005712:	6019      	str	r1, [r3, #0]
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	e027      	b.n	8005768 <_printf_i+0xa4>
 8005718:	2a73      	cmp	r2, #115	; 0x73
 800571a:	f000 80b4 	beq.w	8005886 <_printf_i+0x1c2>
 800571e:	d808      	bhi.n	8005732 <_printf_i+0x6e>
 8005720:	2a6f      	cmp	r2, #111	; 0x6f
 8005722:	d02a      	beq.n	800577a <_printf_i+0xb6>
 8005724:	2a70      	cmp	r2, #112	; 0x70
 8005726:	d1e5      	bne.n	80056f4 <_printf_i+0x30>
 8005728:	680a      	ldr	r2, [r1, #0]
 800572a:	f042 0220 	orr.w	r2, r2, #32
 800572e:	600a      	str	r2, [r1, #0]
 8005730:	e003      	b.n	800573a <_printf_i+0x76>
 8005732:	2a75      	cmp	r2, #117	; 0x75
 8005734:	d021      	beq.n	800577a <_printf_i+0xb6>
 8005736:	2a78      	cmp	r2, #120	; 0x78
 8005738:	d1dc      	bne.n	80056f4 <_printf_i+0x30>
 800573a:	2278      	movs	r2, #120	; 0x78
 800573c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005740:	496e      	ldr	r1, [pc, #440]	; (80058fc <_printf_i+0x238>)
 8005742:	e064      	b.n	800580e <_printf_i+0x14a>
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800574a:	1d11      	adds	r1, r2, #4
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005754:	2301      	movs	r3, #1
 8005756:	e0a3      	b.n	80058a0 <_printf_i+0x1dc>
 8005758:	f011 0f40 	tst.w	r1, #64	; 0x40
 800575c:	f102 0104 	add.w	r1, r2, #4
 8005760:	6019      	str	r1, [r3, #0]
 8005762:	d0d7      	beq.n	8005714 <_printf_i+0x50>
 8005764:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xb0>
 800576c:	222d      	movs	r2, #45	; 0x2d
 800576e:	425b      	negs	r3, r3
 8005770:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005774:	4962      	ldr	r1, [pc, #392]	; (8005900 <_printf_i+0x23c>)
 8005776:	220a      	movs	r2, #10
 8005778:	e017      	b.n	80057aa <_printf_i+0xe6>
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005782:	d003      	beq.n	800578c <_printf_i+0xc8>
 8005784:	1d08      	adds	r0, r1, #4
 8005786:	6018      	str	r0, [r3, #0]
 8005788:	680b      	ldr	r3, [r1, #0]
 800578a:	e006      	b.n	800579a <_printf_i+0xd6>
 800578c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005790:	f101 0004 	add.w	r0, r1, #4
 8005794:	6018      	str	r0, [r3, #0]
 8005796:	d0f7      	beq.n	8005788 <_printf_i+0xc4>
 8005798:	880b      	ldrh	r3, [r1, #0]
 800579a:	4959      	ldr	r1, [pc, #356]	; (8005900 <_printf_i+0x23c>)
 800579c:	2a6f      	cmp	r2, #111	; 0x6f
 800579e:	bf14      	ite	ne
 80057a0:	220a      	movne	r2, #10
 80057a2:	2208      	moveq	r2, #8
 80057a4:	2000      	movs	r0, #0
 80057a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80057aa:	6865      	ldr	r5, [r4, #4]
 80057ac:	60a5      	str	r5, [r4, #8]
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	f2c0 809c 	blt.w	80058ec <_printf_i+0x228>
 80057b4:	6820      	ldr	r0, [r4, #0]
 80057b6:	f020 0004 	bic.w	r0, r0, #4
 80057ba:	6020      	str	r0, [r4, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d13f      	bne.n	8005840 <_printf_i+0x17c>
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	f040 8095 	bne.w	80058f0 <_printf_i+0x22c>
 80057c6:	4675      	mov	r5, lr
 80057c8:	2a08      	cmp	r2, #8
 80057ca:	d10b      	bne.n	80057e4 <_printf_i+0x120>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07da      	lsls	r2, r3, #31
 80057d0:	d508      	bpl.n	80057e4 <_printf_i+0x120>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	6862      	ldr	r2, [r4, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	bfde      	ittt	le
 80057da:	2330      	movle	r3, #48	; 0x30
 80057dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057e4:	ebae 0305 	sub.w	r3, lr, r5
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	f8cd 8000 	str.w	r8, [sp]
 80057ee:	463b      	mov	r3, r7
 80057f0:	aa03      	add	r2, sp, #12
 80057f2:	4621      	mov	r1, r4
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff feef 	bl	80055d8 <_printf_common>
 80057fa:	3001      	adds	r0, #1
 80057fc:	d155      	bne.n	80058aa <_printf_i+0x1e6>
 80057fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005802:	b005      	add	sp, #20
 8005804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005808:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800580c:	493c      	ldr	r1, [pc, #240]	; (8005900 <_printf_i+0x23c>)
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005816:	f100 0504 	add.w	r5, r0, #4
 800581a:	601d      	str	r5, [r3, #0]
 800581c:	d001      	beq.n	8005822 <_printf_i+0x15e>
 800581e:	6803      	ldr	r3, [r0, #0]
 8005820:	e002      	b.n	8005828 <_printf_i+0x164>
 8005822:	0655      	lsls	r5, r2, #25
 8005824:	d5fb      	bpl.n	800581e <_printf_i+0x15a>
 8005826:	8803      	ldrh	r3, [r0, #0]
 8005828:	07d0      	lsls	r0, r2, #31
 800582a:	bf44      	itt	mi
 800582c:	f042 0220 	orrmi.w	r2, r2, #32
 8005830:	6022      	strmi	r2, [r4, #0]
 8005832:	b91b      	cbnz	r3, 800583c <_printf_i+0x178>
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	f022 0220 	bic.w	r2, r2, #32
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	2210      	movs	r2, #16
 800583e:	e7b1      	b.n	80057a4 <_printf_i+0xe0>
 8005840:	4675      	mov	r5, lr
 8005842:	fbb3 f0f2 	udiv	r0, r3, r2
 8005846:	fb02 3310 	mls	r3, r2, r0, r3
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005850:	4603      	mov	r3, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d1f5      	bne.n	8005842 <_printf_i+0x17e>
 8005856:	e7b7      	b.n	80057c8 <_printf_i+0x104>
 8005858:	6808      	ldr	r0, [r1, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6949      	ldr	r1, [r1, #20]
 800585e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005862:	d004      	beq.n	800586e <_printf_i+0x1aa>
 8005864:	1d10      	adds	r0, r2, #4
 8005866:	6018      	str	r0, [r3, #0]
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	6019      	str	r1, [r3, #0]
 800586c:	e007      	b.n	800587e <_printf_i+0x1ba>
 800586e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005872:	f102 0004 	add.w	r0, r2, #4
 8005876:	6018      	str	r0, [r3, #0]
 8005878:	6813      	ldr	r3, [r2, #0]
 800587a:	d0f6      	beq.n	800586a <_printf_i+0x1a6>
 800587c:	8019      	strh	r1, [r3, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	4675      	mov	r5, lr
 8005884:	e7b1      	b.n	80057ea <_printf_i+0x126>
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	1d11      	adds	r1, r2, #4
 800588a:	6019      	str	r1, [r3, #0]
 800588c:	6815      	ldr	r5, [r2, #0]
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	2100      	movs	r1, #0
 8005892:	4628      	mov	r0, r5
 8005894:	f7fa fca4 	bl	80001e0 <memchr>
 8005898:	b108      	cbz	r0, 800589e <_printf_i+0x1da>
 800589a:	1b40      	subs	r0, r0, r5
 800589c:	6060      	str	r0, [r4, #4]
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	2300      	movs	r3, #0
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a8:	e79f      	b.n	80057ea <_printf_i+0x126>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	462a      	mov	r2, r5
 80058ae:	4639      	mov	r1, r7
 80058b0:	4630      	mov	r0, r6
 80058b2:	47c0      	blx	r8
 80058b4:	3001      	adds	r0, #1
 80058b6:	d0a2      	beq.n	80057fe <_printf_i+0x13a>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	079b      	lsls	r3, r3, #30
 80058bc:	d507      	bpl.n	80058ce <_printf_i+0x20a>
 80058be:	2500      	movs	r5, #0
 80058c0:	f104 0919 	add.w	r9, r4, #25
 80058c4:	68e3      	ldr	r3, [r4, #12]
 80058c6:	9a03      	ldr	r2, [sp, #12]
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	429d      	cmp	r5, r3
 80058cc:	db05      	blt.n	80058da <_printf_i+0x216>
 80058ce:	68e0      	ldr	r0, [r4, #12]
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	4298      	cmp	r0, r3
 80058d4:	bfb8      	it	lt
 80058d6:	4618      	movlt	r0, r3
 80058d8:	e793      	b.n	8005802 <_printf_i+0x13e>
 80058da:	2301      	movs	r3, #1
 80058dc:	464a      	mov	r2, r9
 80058de:	4639      	mov	r1, r7
 80058e0:	4630      	mov	r0, r6
 80058e2:	47c0      	blx	r8
 80058e4:	3001      	adds	r0, #1
 80058e6:	d08a      	beq.n	80057fe <_printf_i+0x13a>
 80058e8:	3501      	adds	r5, #1
 80058ea:	e7eb      	b.n	80058c4 <_printf_i+0x200>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1a7      	bne.n	8005840 <_printf_i+0x17c>
 80058f0:	780b      	ldrb	r3, [r1, #0]
 80058f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fa:	e765      	b.n	80057c8 <_printf_i+0x104>
 80058fc:	08005ba6 	.word	0x08005ba6
 8005900:	08005b95 	.word	0x08005b95

08005904 <memcpy>:
 8005904:	b510      	push	{r4, lr}
 8005906:	1e43      	subs	r3, r0, #1
 8005908:	440a      	add	r2, r1
 800590a:	4291      	cmp	r1, r2
 800590c:	d100      	bne.n	8005910 <memcpy+0xc>
 800590e:	bd10      	pop	{r4, pc}
 8005910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005918:	e7f7      	b.n	800590a <memcpy+0x6>

0800591a <memmove>:
 800591a:	4288      	cmp	r0, r1
 800591c:	b510      	push	{r4, lr}
 800591e:	eb01 0302 	add.w	r3, r1, r2
 8005922:	d803      	bhi.n	800592c <memmove+0x12>
 8005924:	1e42      	subs	r2, r0, #1
 8005926:	4299      	cmp	r1, r3
 8005928:	d10c      	bne.n	8005944 <memmove+0x2a>
 800592a:	bd10      	pop	{r4, pc}
 800592c:	4298      	cmp	r0, r3
 800592e:	d2f9      	bcs.n	8005924 <memmove+0xa>
 8005930:	1881      	adds	r1, r0, r2
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	42d3      	cmn	r3, r2
 8005936:	d100      	bne.n	800593a <memmove+0x20>
 8005938:	bd10      	pop	{r4, pc}
 800593a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005942:	e7f7      	b.n	8005934 <memmove+0x1a>
 8005944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005948:	f802 4f01 	strb.w	r4, [r2, #1]!
 800594c:	e7eb      	b.n	8005926 <memmove+0xc>
	...

08005950 <_free_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4605      	mov	r5, r0
 8005954:	2900      	cmp	r1, #0
 8005956:	d045      	beq.n	80059e4 <_free_r+0x94>
 8005958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595c:	1f0c      	subs	r4, r1, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfb8      	it	lt
 8005962:	18e4      	addlt	r4, r4, r3
 8005964:	f000 f8d6 	bl	8005b14 <__malloc_lock>
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <_free_r+0x98>)
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	4610      	mov	r0, r2
 800596e:	b933      	cbnz	r3, 800597e <_free_r+0x2e>
 8005970:	6063      	str	r3, [r4, #4]
 8005972:	6014      	str	r4, [r2, #0]
 8005974:	4628      	mov	r0, r5
 8005976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800597a:	f000 b8cc 	b.w	8005b16 <__malloc_unlock>
 800597e:	42a3      	cmp	r3, r4
 8005980:	d90c      	bls.n	800599c <_free_r+0x4c>
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	1862      	adds	r2, r4, r1
 8005986:	4293      	cmp	r3, r2
 8005988:	bf04      	itt	eq
 800598a:	681a      	ldreq	r2, [r3, #0]
 800598c:	685b      	ldreq	r3, [r3, #4]
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	bf04      	itt	eq
 8005992:	1852      	addeq	r2, r2, r1
 8005994:	6022      	streq	r2, [r4, #0]
 8005996:	6004      	str	r4, [r0, #0]
 8005998:	e7ec      	b.n	8005974 <_free_r+0x24>
 800599a:	4613      	mov	r3, r2
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	b10a      	cbz	r2, 80059a4 <_free_r+0x54>
 80059a0:	42a2      	cmp	r2, r4
 80059a2:	d9fa      	bls.n	800599a <_free_r+0x4a>
 80059a4:	6819      	ldr	r1, [r3, #0]
 80059a6:	1858      	adds	r0, r3, r1
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d10b      	bne.n	80059c4 <_free_r+0x74>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	4401      	add	r1, r0
 80059b0:	1858      	adds	r0, r3, r1
 80059b2:	4282      	cmp	r2, r0
 80059b4:	6019      	str	r1, [r3, #0]
 80059b6:	d1dd      	bne.n	8005974 <_free_r+0x24>
 80059b8:	6810      	ldr	r0, [r2, #0]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	4401      	add	r1, r0
 80059c0:	6019      	str	r1, [r3, #0]
 80059c2:	e7d7      	b.n	8005974 <_free_r+0x24>
 80059c4:	d902      	bls.n	80059cc <_free_r+0x7c>
 80059c6:	230c      	movs	r3, #12
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	e7d3      	b.n	8005974 <_free_r+0x24>
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	1821      	adds	r1, r4, r0
 80059d0:	428a      	cmp	r2, r1
 80059d2:	bf04      	itt	eq
 80059d4:	6811      	ldreq	r1, [r2, #0]
 80059d6:	6852      	ldreq	r2, [r2, #4]
 80059d8:	6062      	str	r2, [r4, #4]
 80059da:	bf04      	itt	eq
 80059dc:	1809      	addeq	r1, r1, r0
 80059de:	6021      	streq	r1, [r4, #0]
 80059e0:	605c      	str	r4, [r3, #4]
 80059e2:	e7c7      	b.n	8005974 <_free_r+0x24>
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
 80059e6:	bf00      	nop
 80059e8:	20000090 	.word	0x20000090

080059ec <_malloc_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	1ccd      	adds	r5, r1, #3
 80059f0:	f025 0503 	bic.w	r5, r5, #3
 80059f4:	3508      	adds	r5, #8
 80059f6:	2d0c      	cmp	r5, #12
 80059f8:	bf38      	it	cc
 80059fa:	250c      	movcc	r5, #12
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	4606      	mov	r6, r0
 8005a00:	db01      	blt.n	8005a06 <_malloc_r+0x1a>
 8005a02:	42a9      	cmp	r1, r5
 8005a04:	d903      	bls.n	8005a0e <_malloc_r+0x22>
 8005a06:	230c      	movs	r3, #12
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	bd70      	pop	{r4, r5, r6, pc}
 8005a0e:	f000 f881 	bl	8005b14 <__malloc_lock>
 8005a12:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <_malloc_r+0xb4>)
 8005a14:	6814      	ldr	r4, [r2, #0]
 8005a16:	4621      	mov	r1, r4
 8005a18:	b991      	cbnz	r1, 8005a40 <_malloc_r+0x54>
 8005a1a:	4c22      	ldr	r4, [pc, #136]	; (8005aa4 <_malloc_r+0xb8>)
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	b91b      	cbnz	r3, 8005a28 <_malloc_r+0x3c>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f000 f867 	bl	8005af4 <_sbrk_r>
 8005a26:	6020      	str	r0, [r4, #0]
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f862 	bl	8005af4 <_sbrk_r>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d126      	bne.n	8005a82 <_malloc_r+0x96>
 8005a34:	230c      	movs	r3, #12
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f000 f86c 	bl	8005b16 <__malloc_unlock>
 8005a3e:	e7e4      	b.n	8005a0a <_malloc_r+0x1e>
 8005a40:	680b      	ldr	r3, [r1, #0]
 8005a42:	1b5b      	subs	r3, r3, r5
 8005a44:	d41a      	bmi.n	8005a7c <_malloc_r+0x90>
 8005a46:	2b0b      	cmp	r3, #11
 8005a48:	d90f      	bls.n	8005a6a <_malloc_r+0x7e>
 8005a4a:	600b      	str	r3, [r1, #0]
 8005a4c:	50cd      	str	r5, [r1, r3]
 8005a4e:	18cc      	adds	r4, r1, r3
 8005a50:	4630      	mov	r0, r6
 8005a52:	f000 f860 	bl	8005b16 <__malloc_unlock>
 8005a56:	f104 000b 	add.w	r0, r4, #11
 8005a5a:	1d23      	adds	r3, r4, #4
 8005a5c:	f020 0007 	bic.w	r0, r0, #7
 8005a60:	1ac3      	subs	r3, r0, r3
 8005a62:	d01b      	beq.n	8005a9c <_malloc_r+0xb0>
 8005a64:	425a      	negs	r2, r3
 8005a66:	50e2      	str	r2, [r4, r3]
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
 8005a6a:	428c      	cmp	r4, r1
 8005a6c:	bf0d      	iteet	eq
 8005a6e:	6863      	ldreq	r3, [r4, #4]
 8005a70:	684b      	ldrne	r3, [r1, #4]
 8005a72:	6063      	strne	r3, [r4, #4]
 8005a74:	6013      	streq	r3, [r2, #0]
 8005a76:	bf18      	it	ne
 8005a78:	460c      	movne	r4, r1
 8005a7a:	e7e9      	b.n	8005a50 <_malloc_r+0x64>
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	6849      	ldr	r1, [r1, #4]
 8005a80:	e7ca      	b.n	8005a18 <_malloc_r+0x2c>
 8005a82:	1cc4      	adds	r4, r0, #3
 8005a84:	f024 0403 	bic.w	r4, r4, #3
 8005a88:	42a0      	cmp	r0, r4
 8005a8a:	d005      	beq.n	8005a98 <_malloc_r+0xac>
 8005a8c:	1a21      	subs	r1, r4, r0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 f830 	bl	8005af4 <_sbrk_r>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0cd      	beq.n	8005a34 <_malloc_r+0x48>
 8005a98:	6025      	str	r5, [r4, #0]
 8005a9a:	e7d9      	b.n	8005a50 <_malloc_r+0x64>
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000090 	.word	0x20000090
 8005aa4:	20000094 	.word	0x20000094

08005aa8 <_realloc_r>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	4607      	mov	r7, r0
 8005aac:	4614      	mov	r4, r2
 8005aae:	460e      	mov	r6, r1
 8005ab0:	b921      	cbnz	r1, 8005abc <_realloc_r+0x14>
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ab8:	f7ff bf98 	b.w	80059ec <_malloc_r>
 8005abc:	b922      	cbnz	r2, 8005ac8 <_realloc_r+0x20>
 8005abe:	f7ff ff47 	bl	8005950 <_free_r>
 8005ac2:	4625      	mov	r5, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac8:	f000 f826 	bl	8005b18 <_malloc_usable_size_r>
 8005acc:	4284      	cmp	r4, r0
 8005ace:	d90f      	bls.n	8005af0 <_realloc_r+0x48>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f7ff ff8a 	bl	80059ec <_malloc_r>
 8005ad8:	4605      	mov	r5, r0
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d0f2      	beq.n	8005ac4 <_realloc_r+0x1c>
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	f7ff ff0f 	bl	8005904 <memcpy>
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ff31 	bl	8005950 <_free_r>
 8005aee:	e7e9      	b.n	8005ac4 <_realloc_r+0x1c>
 8005af0:	4635      	mov	r5, r6
 8005af2:	e7e7      	b.n	8005ac4 <_realloc_r+0x1c>

08005af4 <_sbrk_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4c06      	ldr	r4, [pc, #24]	; (8005b10 <_sbrk_r+0x1c>)
 8005af8:	2300      	movs	r3, #0
 8005afa:	4605      	mov	r5, r0
 8005afc:	4608      	mov	r0, r1
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	f7fb f8f8 	bl	8000cf4 <_sbrk>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	d102      	bne.n	8005b0e <_sbrk_r+0x1a>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	b103      	cbz	r3, 8005b0e <_sbrk_r+0x1a>
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	bd38      	pop	{r3, r4, r5, pc}
 8005b10:	20000558 	.word	0x20000558

08005b14 <__malloc_lock>:
 8005b14:	4770      	bx	lr

08005b16 <__malloc_unlock>:
 8005b16:	4770      	bx	lr

08005b18 <_malloc_usable_size_r>:
 8005b18:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f1a0 0004 	sub.w	r0, r0, #4
 8005b22:	bfbc      	itt	lt
 8005b24:	580b      	ldrlt	r3, [r1, r0]
 8005b26:	18c0      	addlt	r0, r0, r3
 8005b28:	4770      	bx	lr
	...

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
