
SoilMoistureSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000474c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00000494  2000001c  2000001c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004b0  200004b0  0002001c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011436  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020d7  00000000  00000000  00031482  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f00  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e28  00000000  00000000  00034460  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000847a  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c56  00000000  00000000  0003d702  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042358  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003f80  00000000  00000000  000423d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048bc 	.word	0x080048bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080048bc 	.word	0x080048bc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fdbf 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81d 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f9c1 	bl	800055c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001da:	f000 f87f 	bl	80002dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80001de:	f000 f8ed 	bl	80003bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e2:	f000 f92b 	bl	800043c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f967 	bl	80004b8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80001ea:	f000 f995 	bl	8000518 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* Initializing starting state */
  struct State state = { Idle, 0 };
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <main+0x40>)
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]

  /* Delay before program executing.
   * Goal: give time to setting system before first watering */
  HAL_Delay(DELAY_BEFORE_EXECUTING);
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x44>)
 80001f8:	f000 fe10 	bl	8000e1c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Execute current state ("Idle" for first time) */
	  state.next(&state);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	463a      	mov	r2, r7
 8000200:	4610      	mov	r0, r2
 8000202:	4798      	blx	r3
 8000204:	e7fa      	b.n	80001fc <main+0x34>
 8000206:	bf00      	nop
 8000208:	0800076d 	.word	0x0800076d
 800020c:	000dbba0 	.word	0x000dbba0

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09e      	sub	sp, #120	; 0x78
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f004 fb44 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	223c      	movs	r2, #60	; 0x3c
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f004 fb36 	bl	80048ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000240:	2303      	movs	r3, #3
 8000242:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000244:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000248:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000260:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000264:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fb74 	bl	8002958 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000276:	f000 fbbd 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000290:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000294:	2101      	movs	r1, #1
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fa66 	bl	8003768 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a2:	f000 fba7 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <SystemClock_Config+0xc8>)
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 fc87 	bl	8003bd4 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80002cc:	f000 fb92 	bl	80009f4 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3778      	adds	r7, #120	; 0x78
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	000200a1 	.word	0x000200a1

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b2e      	ldr	r3, [pc, #184]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000306:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	4b2a      	ldr	r3, [pc, #168]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000318:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800032e:	2201      	movs	r2, #1
 8000330:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b1f      	ldr	r3, [pc, #124]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800033a:	2201      	movs	r2, #1
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000348:	2204      	movs	r2, #4
 800034a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800034e:	2200      	movs	r2, #0
 8000350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000352:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4817      	ldr	r0, [pc, #92]	; (80003b8 <MX_ADC1_Init+0xdc>)
 800035a:	f000 fd81 	bl	8000e60 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 fb46 	bl	80009f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4811      	ldr	r0, [pc, #68]	; (80003b8 <MX_ADC1_Init+0xdc>)
 8000374:	f001 fc5e 	bl	8001c34 <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 fb39 	bl	80009f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000382:	2302      	movs	r3, #2
 8000384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	; (80003b8 <MX_ADC1_Init+0xdc>)
 80003a0:	f001 f95c 	bl	800165c <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003aa:	f000 fb23 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	; 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000088 	.word	0x20000088

080003bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_I2C1_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_I2C1_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <MX_I2C1_Init+0x74>)
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <MX_I2C1_Init+0x7c>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_I2C1_Init+0x74>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_I2C1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f6:	480e      	ldr	r0, [pc, #56]	; (8000430 <MX_I2C1_Init+0x74>)
 80003f8:	f002 f8ab 	bl	8002552 <HAL_I2C_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000402:	f000 faf7 	bl	80009f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000406:	2100      	movs	r1, #0
 8000408:	4809      	ldr	r0, [pc, #36]	; (8000430 <MX_I2C1_Init+0x74>)
 800040a:	f002 f930 	bl	800266e <HAL_I2CEx_ConfigAnalogFilter>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000414:	f000 faee 	bl	80009f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000418:	2100      	movs	r1, #0
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_I2C1_Init+0x74>)
 800041c:	f002 f972 	bl	8002704 <HAL_I2CEx_ConfigDigitalFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 fae5 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000003c 	.word	0x2000003c
 8000434:	40005400 	.word	0x40005400
 8000438:	2000090e 	.word	0x2000090e

0800043c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <MX_SPI1_Init+0x78>)
 8000444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800044c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000456:	f44f 7240 	mov.w	r2, #768	; 0x300
 800045a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_SPI1_Init+0x74>)
 800046a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000472:	2208      	movs	r2, #8
 8000474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_SPI1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_SPI1_Init+0x74>)
 800048a:	2207      	movs	r2, #7
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_SPI1_Init+0x74>)
 8000496:	2208      	movs	r2, #8
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_SPI1_Init+0x74>)
 800049c:	f003 fd4a 	bl	8003f34 <HAL_SPI_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 faa5 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000015c 	.word	0x2000015c
 80004b4:	40013000 	.word	0x40013000

080004b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <MX_USART1_UART_Init+0x5c>)
 80004c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004fc:	f003 fdc3 	bl	8004086 <HAL_UART_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000506:	f000 fa75 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000d8 	.word	0x200000d8
 8000514:	40013800 	.word	0x40013800

08000518 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <MX_USB_PCD_Init+0x40>)
 8000520:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 8000524:	2208      	movs	r2, #8
 8000526:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 800052a:	2202      	movs	r2, #2
 800052c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 8000530:	2202      	movs	r2, #2
 8000532:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_USB_PCD_Init+0x3c>)
 8000542:	f002 f92b 	bl	800279c <HAL_PCD_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800054c:	f000 fa52 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200001c0 	.word	0x200001c0
 8000558:	40005c00 	.word	0x40005c00

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000572:	4a45      	ldr	r2, [pc, #276]	; (8000688 <MX_GPIO_Init+0x12c>)
 8000574:	4b44      	ldr	r3, [pc, #272]	; (8000688 <MX_GPIO_Init+0x12c>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b42      	ldr	r3, [pc, #264]	; (8000688 <MX_GPIO_Init+0x12c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4a3f      	ldr	r2, [pc, #252]	; (8000688 <MX_GPIO_Init+0x12c>)
 800058c:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <MX_GPIO_Init+0x12c>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <MX_GPIO_Init+0x12c>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4a39      	ldr	r2, [pc, #228]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4a33      	ldr	r2, [pc, #204]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_GPIO_Init+0x12c>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005ea:	2200      	movs	r2, #0
 80005ec:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005f0:	4826      	ldr	r0, [pc, #152]	; (800068c <MX_GPIO_Init+0x130>)
 80005f2:	f001 ff59 	bl	80024a8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2104      	movs	r1, #4
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f001 ff53 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000602:	2336      	movs	r3, #54	; 0x36
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_GPIO_Init+0x134>)
 8000608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481d      	ldr	r0, [pc, #116]	; (800068c <MX_GPIO_Init+0x130>)
 8000616:	f001 fdcd 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800061a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800061e:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4816      	ldr	r0, [pc, #88]	; (800068c <MX_GPIO_Init+0x130>)
 8000634:	f001 fdbe 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x138>)
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f001 fdb1 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000652:	2304      	movs	r3, #4
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000656:	2311      	movs	r3, #17
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f001 fda2 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2006      	movs	r0, #6
 8000676:	f001 fd66 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800067a:	2006      	movs	r0, #6
 800067c:	f001 fd7f 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	48001000 	.word	0x48001000
 8000690:	10120000 	.word	0x10120000
 8000694:	10110000 	.word	0x10110000

08000698 <Read_From_Sensor>:

/* USER CODE BEGIN 4 */

/* Read sensor data from analog port */
static int Read_From_Sensor(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af02      	add	r7, sp, #8
	uint16_t raw;
	int percentage;

	HAL_ADC_Start(&hadc1);
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <Read_From_Sensor+0x40>)
 80006a0:	f000 fdbe 	bl	8001220 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006a4:	f04f 31ff 	mov.w	r1, #4294967295
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <Read_From_Sensor+0x40>)
 80006aa:	f000 fecf 	bl	800144c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <Read_From_Sensor+0x40>)
 80006b0:	f000 ffc6 	bl	8001640 <HAL_ADC_GetValue>
 80006b4:	4603      	mov	r3, r0
 80006b6:	80fb      	strh	r3, [r7, #6]

	percentage = Convert_to_percents(raw, 1230, 3140, 0, 100);
 80006b8:	88f8      	ldrh	r0, [r7, #6]
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	f640 4244 	movw	r2, #3140	; 0xc44
 80006c4:	f240 41ce 	movw	r1, #1230	; 0x4ce
 80006c8:	f000 f808 	bl	80006dc <Convert_to_percents>
 80006cc:	6038      	str	r0, [r7, #0]

	return percentage;
 80006ce:	683b      	ldr	r3, [r7, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000088 	.word	0x20000088

080006dc <Convert_to_percents>:

/* convert analog port output (1230-3140) to percents (1-100)*/
static int Convert_to_percents(int input, int input_min, int input_max, int output_min, int output_max)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	603b      	str	r3, [r7, #0]
	return ((((input - input_min)*(output_max - output_min))/(input_max - input_min)) + output_min);
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	69b9      	ldr	r1, [r7, #24]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	1a8a      	subs	r2, r1, r2
 80006f6:	fb02 f203 	mul.w	r2, r2, r3
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1acb      	subs	r3, r1, r3
 8000700:	fb92 f2f3 	sdiv	r2, r2, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	4413      	add	r3, r2
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <Watering>:

/* Watering state function for watering control */
static void Watering(struct State * state)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    int dryness_before = Read_From_Sensor();
 800071c:	f7ff ffbc 	bl	8000698 <Read_From_Sensor>
 8000720:	60f8      	str	r0, [r7, #12]
    Humidify();
 8000722:	f000 f855 	bl	80007d0 <Humidify>

    /* Wait for the water to be absorbed into the ground.
     * After, reads moisture data again */
    HAL_Delay(DELAY_AFTER_WATERING);
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <Watering+0x50>)
 8000728:	f000 fb78 	bl	8000e1c <HAL_Delay>
    int dryness_after = Read_From_Sensor();
 800072c:	f7ff ffb4 	bl	8000698 <Read_From_Sensor>
 8000730:	60b8      	str	r0, [r7, #8]

    /* If moisture change after watering, reset unsuccessful watering counter
     * Else increment counter */
    if (abs(dryness_after - dryness_before) >= 10)
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	bfb8      	it	lt
 800073c:	425b      	neglt	r3, r3
 800073e:	2b09      	cmp	r3, #9
 8000740:	dd03      	ble.n	800074a <Watering+0x36>
    	state->cnt_unsucc_waterings = 0;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	e004      	b.n	8000754 <Watering+0x40>
    else
    	state->cnt_unsucc_waterings++;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]

    /* Set up next state to Idle */
    state->next = Idle;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <Watering+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	0002bf20 	.word	0x0002bf20
 8000768:	0800076d 	.word	0x0800076d

0800076c <Idle>:

/* Idle state function for system control logic */
static void Idle(struct State * state)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

    // char msg[10]; *Debug info too
    int dryness = Read_From_Sensor();
 8000774:	f7ff ff90 	bl	8000698 <Read_From_Sensor>
 8000778:	60f8      	str	r0, [r7, #12]

    /* Debug info, uncomment (with previous commented string) for display moisture values
    sprintf(msg, "%hu%%\r\n", dryness);
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 10); */

    if (dryness > 87)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b57      	cmp	r3, #87	; 0x57
 800077e:	dd09      	ble.n	8000794 <Idle+0x28>
    	/* Set up state to Panic if counter of unsuccessful watering == 2
    	 * Else set up state to Watering */
        state->next = state->cnt_unsucc_waterings >= 2 ? Panic : Watering;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b01      	cmp	r3, #1
 8000786:	dd01      	ble.n	800078c <Idle+0x20>
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <Idle+0x38>)
 800078a:	e000      	b.n	800078e <Idle+0x22>
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <Idle+0x3c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
    else
    	/* If watering is not needed, sets program to sleep
    	 * Unobvious forth state Sleep */
        HAL_Delay(DELAY_AFTER_LOOP); // set proper value
}
 8000792:	e002      	b.n	800079a <Idle+0x2e>
        HAL_Delay(DELAY_AFTER_LOOP); // set proper value
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <Idle+0x40>)
 8000796:	f000 fb41 	bl	8000e1c <HAL_Delay>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	080007b1 	.word	0x080007b1
 80007a8:	08000715 	.word	0x08000715
 80007ac:	006ddd00 	.word	0x006ddd00

080007b0 <Panic>:


/* Panic state function for system work troubles */
static void Panic(struct State * state)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	/* Flashing LED for certain time,
	 * Set up Watering state and try to make watering */
	Flash_LED();
 80007b8:	f000 f83e 	bl	8000838 <Flash_LED>
	state->next = Watering;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a03      	ldr	r2, [pc, #12]	; (80007cc <Panic+0x1c>)
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	08000715 	.word	0x08000715

080007d0 <Humidify>:

/* Function for pure watering.
 * Watering state function it's something like watering handler,
 * while Humidify responsible for watering only */
static void Humidify(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 fe64 	bl	80024a8 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 80007e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <Humidify+0x5c>)
 80007e6:	f001 fe77 	bl	80024d8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 80007ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <Humidify+0x5c>)
 80007f0:	f001 fe72 	bl	80024d8 <HAL_GPIO_TogglePin>

	HAL_Delay(Mode_Delay[current_mode]);
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <Humidify+0x60>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <Humidify+0x64>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fb0b 	bl	8000e1c <HAL_Delay>

	HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <Humidify+0x5c>)
 800080c:	f001 fe64 	bl	80024d8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin (GPIOE, LD7_Pin);
 8000810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <Humidify+0x5c>)
 8000816:	f001 fe5f 	bl	80024d8 <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2104      	movs	r1, #4
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f001 fe41 	bl	80024a8 <HAL_GPIO_WritePin>

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	48001000 	.word	0x48001000
 8000830:	20000038 	.word	0x20000038
 8000834:	20000000 	.word	0x20000000

08000838 <Flash_LED>:

/* Flashing red LEDs for take user attention to system usage problem */
static void Flash_LED(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	int repeat = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]

	while(repeat++ < 3600) //3600 (every hour)
 8000842:	e01b      	b.n	800087c <Flash_LED+0x44>
	{
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <Flash_LED+0x58>)
 800084a:	f001 fe45 	bl	80024d8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 800084e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <Flash_LED+0x58>)
 8000854:	f001 fe40 	bl	80024d8 <HAL_GPIO_TogglePin>
		HAL_Delay(ALARM_LIGHTS_DELAY);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 fade 	bl	8000e1c <HAL_Delay>
		HAL_GPIO_TogglePin (GPIOE, LD3_Pin);
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <Flash_LED+0x58>)
 8000866:	f001 fe37 	bl	80024d8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <Flash_LED+0x58>)
 8000870:	f001 fe32 	bl	80024d8 <HAL_GPIO_TogglePin>
		HAL_Delay(ALARM_LIGHTS_DELAY);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f000 fad0 	bl	8000e1c <HAL_Delay>
	while(repeat++ < 3600) //3600 (every hour)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000886:	dbdd      	blt.n	8000844 <Flash_LED+0xc>
	}
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48001000 	.word	0x48001000

08000894 <Ext_Delay>:

/* Custom delay to use inside interrupt handlers */
static void Ext_Delay(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
	int c;
	for (c = 1; c <= 500000; c++)
 800089a:	2301      	movs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	e002      	b.n	80008a6 <Ext_Delay+0x12>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <Ext_Delay+0x28>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	ddf8      	ble.n	80008a0 <Ext_Delay+0xc>
	{}
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	0007a120 	.word	0x0007a120

080008c0 <EXTI0_IRQHandler>:

/* Handle user button interrupt */
void EXTI0_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 fe21 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  current_mode = (current_mode + 1) % 4;
 80008ca:	4b48      	ldr	r3, [pc, #288]	; (80009ec <EXTI0_IRQHandler+0x12c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	425a      	negs	r2, r3
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	f002 0203 	and.w	r2, r2, #3
 80008da:	bf58      	it	pl
 80008dc:	4253      	negpl	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b42      	ldr	r3, [pc, #264]	; (80009ec <EXTI0_IRQHandler+0x12c>)
 80008e2:	701a      	strb	r2, [r3, #0]
  /* Visualize mode changing by blinking LEDs */
  switch(current_mode)
 80008e4:	4b41      	ldr	r3, [pc, #260]	; (80009ec <EXTI0_IRQHandler+0x12c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d87b      	bhi.n	80009e4 <EXTI0_IRQHandler+0x124>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <EXTI0_IRQHandler+0x34>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800091f 	.word	0x0800091f
 80008fc:	0800094d 	.word	0x0800094d
 8000900:	0800098f 	.word	0x0800098f
  {
  case LOW:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4839      	ldr	r0, [pc, #228]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800090a:	f001 fde5 	bl	80024d8 <HAL_GPIO_TogglePin>
	  Ext_Delay();
 800090e:	f7ff ffc1 	bl	8000894 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000916:	4836      	ldr	r0, [pc, #216]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000918:	f001 fdde 	bl	80024d8 <HAL_GPIO_TogglePin>
	  break;
 800091c:	e063      	b.n	80009e6 <EXTI0_IRQHandler+0x126>
  case MEDIUM:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800091e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000922:	4833      	ldr	r0, [pc, #204]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000924:	f001 fdd8 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4830      	ldr	r0, [pc, #192]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800092e:	f001 fdd3 	bl	80024d8 <HAL_GPIO_TogglePin>
	  Ext_Delay();
 8000932:	f7ff ffaf 	bl	8000894 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800093c:	f001 fdcc 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000944:	482a      	ldr	r0, [pc, #168]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000946:	f001 fdc7 	bl	80024d8 <HAL_GPIO_TogglePin>
	  break;
 800094a:	e04c      	b.n	80009e6 <EXTI0_IRQHandler+0x126>
  case HIGH:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800094c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000950:	4827      	ldr	r0, [pc, #156]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000952:	f001 fdc1 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095a:	4825      	ldr	r0, [pc, #148]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800095c:	f001 fdbc 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000964:	4822      	ldr	r0, [pc, #136]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000966:	f001 fdb7 	bl	80024d8 <HAL_GPIO_TogglePin>
	  Ext_Delay();
 800096a:	f7ff ff93 	bl	8000894 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	481f      	ldr	r0, [pc, #124]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000974:	f001 fdb0 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	481c      	ldr	r0, [pc, #112]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800097e:	f001 fdab 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 8000982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000986:	481a      	ldr	r0, [pc, #104]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000988:	f001 fda6 	bl	80024d8 <HAL_GPIO_TogglePin>
	  break;
 800098c:	e02b      	b.n	80009e6 <EXTI0_IRQHandler+0x126>
  case ULTRA:
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 800098e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000992:	4817      	ldr	r0, [pc, #92]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 8000994:	f001 fda0 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 8000998:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 800099e:	f001 fd9b 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 80009a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009a8:	f001 fd96 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009b2:	f001 fd91 	bl	80024d8 <HAL_GPIO_TogglePin>
	  Ext_Delay();
 80009b6:	f7ff ff6d 	bl	8000894 <Ext_Delay>
	  HAL_GPIO_TogglePin (GPIOE, LD6_Pin);
 80009ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009c0:	f001 fd8a 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD9_Pin);
 80009c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009ca:	f001 fd85 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD8_Pin);
 80009ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009d4:	f001 fd80 	bl	80024d8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin (GPIOE, LD10_Pin);
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <EXTI0_IRQHandler+0x130>)
 80009de:	f001 fd7b 	bl	80024d8 <HAL_GPIO_TogglePin>
	  break;
 80009e2:	e000      	b.n	80009e6 <EXTI0_IRQHandler+0x126>
  default:
	  break;
 80009e4:	bf00      	nop
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000038 	.word	0x20000038
 80009f0:	48001000 	.word	0x48001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x44>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a32:	2007      	movs	r0, #7
 8000a34:	f001 fb7c 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a64:	d124      	bne.n	8000ab0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_ADC_MspInit+0x74>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a96:	2302      	movs	r3, #2
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 fb82 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_I2C_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d127      	bne.n	8000b2e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b06:	2304      	movs	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000b12:	f001 fb4f 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_I2C_MspInit+0x80>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400

08000b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_SPI_MspInit+0x7c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d128      	bne.n	8000bb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_SPI_MspInit+0x80>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b96:	23e0      	movs	r3, #224	; 0xe0
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2305      	movs	r3, #5
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f001 fafe 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d127      	bne.n	8000c3a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0x80>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c1a:	2330      	movs	r3, #48	; 0x30
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0x84>)
 8000c36:	f001 fabd 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013800 	.word	0x40013800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000800 	.word	0x48000800

08000c50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_PCD_MspInit+0x80>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d129      	bne.n	8000cc6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000c8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000c9c:	230e      	movs	r3, #14
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f001 fa83 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_PCD_MspInit+0x84>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40005c00 	.word	0x40005c00
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f85a 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f001 f9e5 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe46 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f9fd 	bl	800219a <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f001 f9c5 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	20000014 	.word	0x20000014

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	200004ac 	.word	0x200004ac

08000e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200004ac 	.word	0x200004ac

08000e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_Delay+0x40>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3f7      	bcc.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000018 	.word	0x20000018

08000e60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09a      	sub	sp, #104	; 0x68
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e1c9      	b.n	8001214 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d176      	bne.n	8000f80 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d152      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff fdc5 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d13b      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 f803 	bl	8001ed4 <ADC_Disable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d12f      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
 8000ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d12b      	bne.n	8000f40 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef0:	f023 0302 	bic.w	r3, r3, #2
 8000ef4:	f043 0202 	orr.w	r2, r3, #2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	6892      	ldr	r2, [r2, #8]
 8000f06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f0a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	6892      	ldr	r2, [r2, #8]
 8000f16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1c:	4b86      	ldr	r3, [pc, #536]	; (8001138 <HAL_ADC_Init+0x2d8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a86      	ldr	r2, [pc, #536]	; (800113c <HAL_ADC_Init+0x2dc>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9a      	lsrs	r2, r3, #18
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f32:	e002      	b.n	8000f3a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f9      	bne.n	8000f34 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f5c:	d110      	bne.n	8000f80 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f023 0312 	bic.w	r3, r3, #18
 8000f66:	f043 0210 	orr.w	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f040 8136 	bne.w	80011fa <HAL_ADC_Init+0x39a>
 8000f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8131 	bne.w	80011fa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8129 	bne.w	80011fa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000fb0:	f043 0202 	orr.w	r2, r3, #2
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc0:	d004      	beq.n	8000fcc <HAL_ADC_Init+0x16c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <HAL_ADC_Init+0x2e0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d101      	bne.n	8000fd0 <HAL_ADC_Init+0x170>
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <HAL_ADC_Init+0x2e4>)
 8000fce:	e000      	b.n	8000fd2 <HAL_ADC_Init+0x172>
 8000fd0:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <HAL_ADC_Init+0x2e8>)
 8000fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fdc:	d102      	bne.n	8000fe4 <HAL_ADC_Init+0x184>
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_ADC_Init+0x2e0>)
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e01a      	b.n	800101a <HAL_ADC_Init+0x1ba>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a55      	ldr	r2, [pc, #340]	; (8001140 <HAL_ADC_Init+0x2e0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d103      	bne.n	8000ff6 <HAL_ADC_Init+0x196>
 8000fee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e011      	b.n	800101a <HAL_ADC_Init+0x1ba>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a54      	ldr	r2, [pc, #336]	; (800114c <HAL_ADC_Init+0x2ec>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_ADC_Init+0x1a6>
 8001000:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_ADC_Init+0x2f0>)
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e009      	b.n	800101a <HAL_ADC_Init+0x1ba>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_ADC_Init+0x2f0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d102      	bne.n	8001016 <HAL_ADC_Init+0x1b6>
 8001010:	4b4e      	ldr	r3, [pc, #312]	; (800114c <HAL_ADC_Init+0x2ec>)
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e001      	b.n	800101a <HAL_ADC_Init+0x1ba>
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d108      	bne.n	800103a <HAL_ADC_Init+0x1da>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_ADC_Init+0x1da>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_ADC_Init+0x1dc>
 800103a:	2300      	movs	r3, #0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11c      	bne.n	800107a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001040:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d010      	beq.n	8001068 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_ADC_Init+0x202>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x202>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_ADC_Init+0x204>
 8001062:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001064:	2b00      	cmp	r3, #0
 8001066:	d108      	bne.n	800107a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	431a      	orrs	r2, r3
 8001076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001078:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7e5b      	ldrb	r3, [r3, #25]
 800107e:	035a      	lsls	r2, r3, #13
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001084:	2b01      	cmp	r3, #1
 8001086:	d002      	beq.n	800108e <HAL_ADC_Init+0x22e>
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	e000      	b.n	8001090 <HAL_ADC_Init+0x230>
 800108e:	2300      	movs	r3, #0
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010a0:	4313      	orrs	r3, r2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11b      	bne.n	80010e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e5b      	ldrb	r3, [r3, #25]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	3b01      	subs	r3, #1
 80010bc:	045a      	lsls	r2, r3, #17
 80010be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c0:	4313      	orrs	r3, r2
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	663b      	str	r3, [r7, #96]	; 0x60
 80010c8:	e00d      	b.n	80010e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80010d2:	f043 0220 	orr.w	r2, r3, #32
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d03a      	beq.n	8001164 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_ADC_Init+0x2ec>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Init+0x2a2>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_ADC_Init+0x2f0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_ADC_Init+0x2f4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800110a:	d012      	beq.n	8001132 <HAL_ADC_Init+0x2d2>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d00a      	beq.n	800112c <HAL_ADC_Init+0x2cc>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800111e:	d002      	beq.n	8001126 <HAL_ADC_Init+0x2c6>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	e018      	b.n	8001158 <HAL_ADC_Init+0x2f8>
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	e015      	b.n	8001158 <HAL_ADC_Init+0x2f8>
 800112c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001130:	e012      	b.n	8001158 <HAL_ADC_Init+0x2f8>
 8001132:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001136:	e00f      	b.n	8001158 <HAL_ADC_Init+0x2f8>
 8001138:	20000010 	.word	0x20000010
 800113c:	431bde83 	.word	0x431bde83
 8001140:	50000100 	.word	0x50000100
 8001144:	50000300 	.word	0x50000300
 8001148:	50000700 	.word	0x50000700
 800114c:	50000400 	.word	0x50000400
 8001150:	50000500 	.word	0x50000500
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800115c:	4313      	orrs	r3, r2
 800115e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001160:	4313      	orrs	r3, r2
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001180:	f023 0302 	bic.w	r3, r3, #2
 8001184:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7e1b      	ldrb	r3, [r3, #24]
 800118a:	039a      	lsls	r2, r3, #14
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4313      	orrs	r3, r2
 8001196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001198:	4313      	orrs	r3, r2
 800119a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68d9      	ldr	r1, [r3, #12]
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_ADC_Init+0x3bc>)
 80011a8:	400b      	ands	r3, r1
 80011aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80011ac:	430b      	orrs	r3, r1
 80011ae:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10c      	bne.n	80011d2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011c2:	f022 010f 	bic.w	r1, r2, #15
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	69d2      	ldr	r2, [r2, #28]
 80011ca:	3a01      	subs	r2, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
 80011d0:	e007      	b.n	80011e2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011dc:	f022 020f 	bic.w	r2, r2, #15
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f023 0303 	bic.w	r3, r3, #3
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	e00a      	b.n	8001210 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f023 0312 	bic.w	r3, r3, #18
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001214:	4618      	mov	r0, r3
 8001216:	3768      	adds	r7, #104	; 0x68
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	fff0c007 	.word	0xfff0c007

08001220 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80f9 	bne.w	800142e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ADC_Start+0x2a>
 8001246:	2302      	movs	r3, #2
 8001248:	e0f4      	b.n	8001434 <HAL_ADC_Start+0x214>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fde0 	bl	8001e18 <ADC_Enable>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 80e0 	bne.w	8001424 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001280:	d004      	beq.n	800128c <HAL_ADC_Start+0x6c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6d      	ldr	r2, [pc, #436]	; (800143c <HAL_ADC_Start+0x21c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d106      	bne.n	800129a <HAL_ADC_Start+0x7a>
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <HAL_ADC_Start+0x220>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	2b00      	cmp	r3, #0
 8001296:	d010      	beq.n	80012ba <HAL_ADC_Start+0x9a>
 8001298:	e005      	b.n	80012a6 <HAL_ADC_Start+0x86>
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_ADC_Start+0x224>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_ADC_Start+0x9a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ae:	d004      	beq.n	80012ba <HAL_ADC_Start+0x9a>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a64      	ldr	r2, [pc, #400]	; (8001448 <HAL_ADC_Start+0x228>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d115      	bne.n	80012e6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d036      	beq.n	8001342 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e4:	e02d      	b.n	8001342 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Start+0xe6>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_ADC_Start+0x21c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10a      	bne.n	800131c <HAL_ADC_Start+0xfc>
 8001306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e008      	b.n	800132e <HAL_ADC_Start+0x10e>
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_ADC_Start+0x228>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800133a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134e:	d106      	bne.n	800135e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f023 0206 	bic.w	r2, r3, #6
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
 800135c:	e002      	b.n	8001364 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	221c      	movs	r2, #28
 8001372:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137c:	d004      	beq.n	8001388 <HAL_ADC_Start+0x168>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_ADC_Start+0x21c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d106      	bne.n	8001396 <HAL_ADC_Start+0x176>
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_ADC_Start+0x220>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b00      	cmp	r3, #0
 8001392:	d03e      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 8001394:	e005      	b.n	80013a2 <HAL_ADC_Start+0x182>
 8001396:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_ADC_Start+0x224>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d037      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Start+0x196>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_ADC_Start+0x21c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d106      	bne.n	80013c4 <HAL_ADC_Start+0x1a4>
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_ADC_Start+0x220>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d027      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 80013c2:	e005      	b.n	80013d0 <HAL_ADC_Start+0x1b0>
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_ADC_Start+0x224>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d020      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_Start+0x1c4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_ADC_Start+0x21c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Start+0x1d2>
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_ADC_Start+0x220>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d010      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 80013f0:	e005      	b.n	80013fe <HAL_ADC_Start+0x1de>
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_ADC_Start+0x224>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d009      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Start+0x1f2>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_ADC_Start+0x228>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10f      	bne.n	8001432 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	6892      	ldr	r2, [r2, #8]
 800141c:	f042 0204 	orr.w	r2, r2, #4
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	e006      	b.n	8001432 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800142c:	e001      	b.n	8001432 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800142e:	2302      	movs	r3, #2
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	50000100 	.word	0x50000100
 8001440:	50000300 	.word	0x50000300
 8001444:	50000700 	.word	0x50000700
 8001448:	50000400 	.word	0x50000400

0800144c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d102      	bne.n	8001468 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001462:	2308      	movs	r3, #8
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e03a      	b.n	80014de <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001470:	d004      	beq.n	800147c <HAL_ADC_PollForConversion+0x30>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6e      	ldr	r2, [pc, #440]	; (8001630 <HAL_ADC_PollForConversion+0x1e4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_ADC_PollForConversion+0x34>
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_ADC_PollForConversion+0x1e8>)
 800147e:	e000      	b.n	8001482 <HAL_ADC_PollForConversion+0x36>
 8001480:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_ADC_PollForConversion+0x1ec>)
 8001482:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	2b00      	cmp	r3, #0
 800148e:	d112      	bne.n	80014b6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11d      	bne.n	80014da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f043 0220 	orr.w	r2, r3, #32
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0b8      	b.n	8001628 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f043 0220 	orr.w	r2, r3, #32
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0a6      	b.n	8001628 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e6:	d004      	beq.n	80014f2 <HAL_ADC_PollForConversion+0xa6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_ADC_PollForConversion+0x1e4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d106      	bne.n	8001500 <HAL_ADC_PollForConversion+0xb4>
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_ADC_PollForConversion+0x1e8>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d010      	beq.n	8001520 <HAL_ADC_PollForConversion+0xd4>
 80014fe:	e005      	b.n	800150c <HAL_ADC_PollForConversion+0xc0>
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_ADC_PollForConversion+0x1ec>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <HAL_ADC_PollForConversion+0xd4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001514:	d004      	beq.n	8001520 <HAL_ADC_PollForConversion+0xd4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a48      	ldr	r2, [pc, #288]	; (800163c <HAL_ADC_PollForConversion+0x1f0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d104      	bne.n	800152a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	e00f      	b.n	800154a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001532:	d004      	beq.n	800153e <HAL_ADC_PollForConversion+0xf2>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3d      	ldr	r2, [pc, #244]	; (8001630 <HAL_ADC_PollForConversion+0x1e4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d102      	bne.n	8001544 <HAL_ADC_PollForConversion+0xf8>
 800153e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001542:	e000      	b.n	8001546 <HAL_ADC_PollForConversion+0xfa>
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_ADC_PollForConversion+0x1f0>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800154a:	f7ff fc5b 	bl	8000e04 <HAL_GetTick>
 800154e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001550:	e01a      	b.n	8001588 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d016      	beq.n	8001588 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_PollForConversion+0x124>
 8001560:	f7ff fc50 	bl	8000e04 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d90b      	bls.n	8001588 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e04f      	b.n	8001628 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0dd      	beq.n	8001552 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d131      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d12c      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d125      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d112      	bne.n	80015fc <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d112      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	e00b      	b.n	8001614 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f043 0220 	orr.w	r2, r3, #32
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	50000100 	.word	0x50000100
 8001634:	50000300 	.word	0x50000300
 8001638:	50000700 	.word	0x50000700
 800163c:	50000400 	.word	0x50000400

08001640 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800165c:	b490      	push	{r4, r7}
 800165e:	b09a      	sub	sp, #104	; 0x68
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADC_ConfigChannel+0x22>
 800167a:	2302      	movs	r3, #2
 800167c:	e2cd      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x5be>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 82b1 	bne.w	8001bf8 <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d81c      	bhi.n	80016d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	461a      	mov	r2, r3
 80016b6:	231f      	movs	r3, #31
 80016b8:	4093      	lsls	r3, r2
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4018      	ands	r0, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681c      	ldr	r4, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa04 f303 	lsl.w	r3, r4, r3
 80016d2:	4303      	orrs	r3, r0
 80016d4:	630b      	str	r3, [r1, #48]	; 0x30
 80016d6:	e063      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d81e      	bhi.n	800171e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	3b1e      	subs	r3, #30
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	4018      	ands	r0, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681c      	ldr	r4, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3b1e      	subs	r3, #30
 8001714:	fa04 f303 	lsl.w	r3, r4, r3
 8001718:	4303      	orrs	r3, r0
 800171a:	634b      	str	r3, [r1, #52]	; 0x34
 800171c:	e040      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b0e      	cmp	r3, #14
 8001724:	d81e      	bhi.n	8001764 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	3b3c      	subs	r3, #60	; 0x3c
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4018      	ands	r0, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681c      	ldr	r4, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	3b3c      	subs	r3, #60	; 0x3c
 800175a:	fa04 f303 	lsl.w	r3, r4, r3
 800175e:	4303      	orrs	r3, r0
 8001760:	638b      	str	r3, [r1, #56]	; 0x38
 8001762:	e01d      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	3b5a      	subs	r3, #90	; 0x5a
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	4018      	ands	r0, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681c      	ldr	r4, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	3b5a      	subs	r3, #90	; 0x5a
 8001798:	fa04 f303 	lsl.w	r3, r4, r3
 800179c:	4303      	orrs	r3, r0
 800179e:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80e5 	bne.w	800197a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d91c      	bls.n	80017f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6998      	ldr	r0, [r3, #24]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	3b1e      	subs	r3, #30
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4018      	ands	r0, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689c      	ldr	r4, [r3, #8]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	3b1e      	subs	r3, #30
 80017e8:	fa04 f303 	lsl.w	r3, r4, r3
 80017ec:	4303      	orrs	r3, r0
 80017ee:	618b      	str	r3, [r1, #24]
 80017f0:	e019      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6958      	ldr	r0, [r3, #20]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4018      	ands	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689c      	ldr	r4, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	fa04 f303 	lsl.w	r3, r4, r3
 8001822:	4303      	orrs	r3, r0
 8001824:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	3b01      	subs	r3, #1
 8001844:	2b03      	cmp	r3, #3
 8001846:	d84f      	bhi.n	80018e8 <HAL_ADC_ConfigChannel+0x28c>
 8001848:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <HAL_ADC_ConfigChannel+0x1f4>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001861 	.word	0x08001861
 8001854:	08001883 	.word	0x08001883
 8001858:	080018a5 	.word	0x080018a5
 800185c:	080018c7 	.word	0x080018c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800186a:	4ba1      	ldr	r3, [pc, #644]	; (8001af0 <HAL_ADC_ConfigChannel+0x494>)
 800186c:	400b      	ands	r3, r1
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	6809      	ldr	r1, [r1, #0]
 8001872:	0688      	lsls	r0, r1, #26
 8001874:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001876:	4301      	orrs	r1, r0
 8001878:	430b      	orrs	r3, r1
 800187a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800187e:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001880:	e07b      	b.n	800197a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800188c:	4b98      	ldr	r3, [pc, #608]	; (8001af0 <HAL_ADC_ConfigChannel+0x494>)
 800188e:	400b      	ands	r3, r1
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	0688      	lsls	r0, r1, #26
 8001896:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001898:	4301      	orrs	r1, r0
 800189a:	430b      	orrs	r3, r1
 800189c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018a0:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018a2:	e06a      	b.n	800197a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80018ae:	4b90      	ldr	r3, [pc, #576]	; (8001af0 <HAL_ADC_ConfigChannel+0x494>)
 80018b0:	400b      	ands	r3, r1
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	6809      	ldr	r1, [r1, #0]
 80018b6:	0688      	lsls	r0, r1, #26
 80018b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018ba:	4301      	orrs	r1, r0
 80018bc:	430b      	orrs	r3, r1
 80018be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c2:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c4:	e059      	b.n	800197a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80018d0:	4b87      	ldr	r3, [pc, #540]	; (8001af0 <HAL_ADC_ConfigChannel+0x494>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	6809      	ldr	r1, [r1, #0]
 80018d8:	0688      	lsls	r0, r1, #26
 80018da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018dc:	4301      	orrs	r1, r0
 80018de:	430b      	orrs	r3, r1
 80018e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e4:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018e6:	e048      	b.n	800197a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	069b      	lsls	r3, r3, #26
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800190a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	069b      	lsls	r3, r3, #26
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800192a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800192e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	069b      	lsls	r3, r3, #26
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800194e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001952:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800195a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	069b      	lsls	r3, r3, #26
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001976:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001978:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_ADC_ConfigChannel+0x33e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADC_ConfigChannel+0x33e>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_ADC_ConfigChannel+0x340>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8136 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d00f      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	2001      	movs	r0, #1
 80019bc:	fa00 f202 	lsl.w	r2, r0, r2
 80019c0:	43d2      	mvns	r2, r2
 80019c2:	400a      	ands	r2, r1
 80019c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019c8:	e04a      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	2001      	movs	r0, #1
 80019dc:	fa00 f202 	lsl.w	r2, r0, r2
 80019e0:	430a      	orrs	r2, r1
 80019e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	d91c      	bls.n	8001a28 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6998      	ldr	r0, [r3, #24]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	3b1b      	subs	r3, #27
 8001a04:	2207      	movs	r2, #7
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4018      	ands	r0, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689c      	ldr	r4, [r3, #8]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1b      	subs	r3, #27
 8001a1e:	fa04 f303 	lsl.w	r3, r4, r3
 8001a22:	4303      	orrs	r3, r0
 8001a24:	618b      	str	r3, [r1, #24]
 8001a26:	e01b      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6958      	ldr	r0, [r3, #20]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4018      	ands	r0, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689c      	ldr	r4, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	fa04 f303 	lsl.w	r3, r4, r3
 8001a5c:	4303      	orrs	r3, r0
 8001a5e:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a68:	d004      	beq.n	8001a74 <HAL_ADC_ConfigChannel+0x418>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_ADC_ConfigChannel+0x498>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x41c>
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_ADC_ConfigChannel+0x49c>)
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x41e>
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_ADC_ConfigChannel+0x4a0>)
 8001a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a94:	2b11      	cmp	r3, #17
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	f040 80b0 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 80a9 	bne.w	8001c0e <HAL_ADC_ConfigChannel+0x5b2>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac4:	d102      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x470>
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_ADC_ConfigChannel+0x498>)
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e027      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x4c0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_ADC_ConfigChannel+0x498>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d103      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x482>
 8001ad6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e01e      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x4c0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_ADC_ConfigChannel+0x4a4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d10f      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x4ac>
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_ADC_ConfigChannel+0x4a8>)
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e016      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x4c0>
 8001aee:	bf00      	nop
 8001af0:	83fff000 	.word	0x83fff000
 8001af4:	50000100 	.word	0x50000100
 8001af8:	50000300 	.word	0x50000300
 8001afc:	50000700 	.word	0x50000700
 8001b00:	50000400 	.word	0x50000400
 8001b04:	50000500 	.word	0x50000500
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d102      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x4bc>
 8001b12:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x4c0>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x4e0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x4e0>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x4e2>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d150      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d010      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0x50e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x508>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x508>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x50a>
 8001b64:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d13c      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x588>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d11d      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x552>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7a:	d118      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b86:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_ADC_ConfigChannel+0x5d0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_ADC_ConfigChannel+0x5d4>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b9e:	e002      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x544>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bac:	e02e      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5b0>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b11      	cmp	r3, #17
 8001bb4:	d10b      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x572>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bcc:	e01e      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b12      	cmp	r3, #18
 8001bd4:	d11a      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001be2:	e013      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001bf6:	e00a      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f043 0220 	orr.w	r2, r3, #32
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x5b2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c0c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3768      	adds	r7, #104	; 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc90      	pop	{r4, r7}
 8001c22:	4770      	bx	lr
 8001c24:	50000500 	.word	0x50000500
 8001c28:	50000400 	.word	0x50000400
 8001c2c:	20000010 	.word	0x20000010
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b099      	sub	sp, #100	; 0x64
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	e01a      	b.n	8001c8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6a      	ldr	r2, [pc, #424]	; (8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d103      	bne.n	8001c66 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001c5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	e011      	b.n	8001c8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d102      	bne.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c70:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	e009      	b.n	8001c8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d102      	bne.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	e001      	b.n	8001c8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b0      	b.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0a9      	b.n	8001df6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 808d 	bne.w	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8086 	bne.w	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001cde:	e000      	b.n	8001ce2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d040      	beq.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfe:	035b      	lsls	r3, r3, #13
 8001d00:	430b      	orrs	r3, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d06:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d15c      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001d4a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d14b      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d58:	f023 030f 	bic.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6811      	ldr	r1, [r2, #0]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	6892      	ldr	r2, [r2, #8]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d6c:	e03c      	b.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d78:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d123      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001dbc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d112      	bne.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dca:	f023 030f 	bic.w	r3, r3, #15
 8001dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dd0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dd2:	e009      	b.n	8001de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001de6:	e000      	b.n	8001dea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001df6:	4618      	mov	r0, r3
 8001df8:	3764      	adds	r7, #100	; 0x64
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	50000100 	.word	0x50000100
 8001e08:	50000400 	.word	0x50000400
 8001e0c:	50000500 	.word	0x50000500
 8001e10:	50000300 	.word	0x50000300
 8001e14:	50000700 	.word	0x50000700

08001e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <ADC_Enable+0x2c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <ADC_Enable+0x2c>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <ADC_Enable+0x2e>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d13c      	bne.n	8001ec4 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <ADC_Enable+0xb8>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00d      	beq.n	8001e74 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0210 	orr.w	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e028      	b.n	8001ec6 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	6892      	ldr	r2, [r2, #8]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e84:	f7fe ffbe 	bl	8000e04 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e8a:	e014      	b.n	8001eb6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e8c:	f7fe ffba 	bl	8000e04 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d90d      	bls.n	8001eb6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 0210 	orr.w	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e007      	b.n	8001ec6 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d1e3      	bne.n	8001e8c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	8000003f 	.word	0x8000003f

08001ed4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <ADC_Disable+0x2c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <ADC_Disable+0x2c>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <ADC_Disable+0x2e>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d040      	beq.n	8001f88 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030d 	and.w	r3, r3, #13
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10f      	bne.n	8001f34 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	f042 0202 	orr.w	r2, r2, #2
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2203      	movs	r2, #3
 8001f2a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f2c:	f7fe ff6a 	bl	8000e04 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f32:	e022      	b.n	8001f7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f043 0210 	orr.w	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e01c      	b.n	8001f8a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f50:	f7fe ff58 	bl	8000e04 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d90d      	bls.n	8001f7a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d0e3      	beq.n	8001f50 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	4909      	ldr	r1, [pc, #36]	; (8002030 <__NVIC_EnableIRQ+0x38>)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	095b      	lsrs	r3, r3, #5
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	490d      	ldr	r1, [pc, #52]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	4909      	ldr	r1, [pc, #36]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	2201      	movs	r2, #1
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	401a      	ands	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ce:	2101      	movs	r1, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	1e59      	subs	r1, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff90 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff2b 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff40 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff90 	bl	8002088 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5f 	bl	8002034 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff33 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	e154      	b.n	800246e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8146 	beq.w	8002468 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d00b      	beq.n	80021fc <HAL_GPIO_Init+0x48>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f0:	2b11      	cmp	r3, #17
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0xea>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b12      	cmp	r3, #18
 800229c:	d123      	bne.n	80022e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	6939      	ldr	r1, [r7, #16]
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0203 	and.w	r2, r3, #3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a0 	beq.w	8002468 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_GPIO_Init+0x2d8>)
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_GPIO_Init+0x2d8>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_GPIO_Init+0x2d8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002340:	4a53      	ldr	r2, [pc, #332]	; (8002490 <HAL_GPIO_Init+0x2dc>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800236a:	d019      	beq.n	80023a0 <HAL_GPIO_Init+0x1ec>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_GPIO_Init+0x2e0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_GPIO_Init+0x1e8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a48      	ldr	r2, [pc, #288]	; (8002498 <HAL_GPIO_Init+0x2e4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00d      	beq.n	8002398 <HAL_GPIO_Init+0x1e4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a47      	ldr	r2, [pc, #284]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <HAL_GPIO_Init+0x1e0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_GPIO_Init+0x1dc>
 800238c:	2304      	movs	r3, #4
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 8002390:	2305      	movs	r3, #5
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b2:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_GPIO_Init+0x2dc>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023e4:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800240e:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43db      	mvns	r3, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f aea3 	bne.w	80021c4 <HAL_GPIO_Init+0x10>
  }
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000
 8002494:	48000400 	.word	0x48000400
 8002498:	48000800 	.word	0x48000800
 800249c:	48000c00 	.word	0x48000c00
 80024a0:	48001000 	.word	0x48001000
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43d9      	mvns	r1, r3
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f806 	bl	800253c <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e080      	b.n	8002666 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7fe fa9f 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2224      	movs	r2, #36	; 0x24
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6852      	ldr	r2, [r2, #4]
 800259e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d104      	bne.n	80025ec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6911      	ldr	r1, [r2, #16]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6952      	ldr	r2, [r2, #20]
 800261c:	4311      	orrs	r1, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6992      	ldr	r2, [r2, #24]
 8002622:	0212      	lsls	r2, r2, #8
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	69d1      	ldr	r1, [r2, #28]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6a12      	ldr	r2, [r2, #32]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d138      	bne.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800268e:	2302      	movs	r3, #2
 8002690:	e032      	b.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2224      	movs	r2, #36	; 0x24
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d139      	bne.n	800278e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002724:	2302      	movs	r3, #2
 8002726:	e033      	b.n	8002790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002756:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b08b      	sub	sp, #44	; 0x2c
 80027a0:	af06      	add	r7, sp, #24
 80027a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0d0      	b.n	8002950 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fa44 	bl	8000c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2203      	movs	r2, #3
 80027cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 ffde 	bl	8004796 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e04c      	b.n	800287a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	3301      	adds	r3, #1
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	b298      	uxth	r0, r3
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3336      	adds	r3, #54	; 0x36
 800281e:	4602      	mov	r2, r0
 8002820:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	3303      	adds	r3, #3
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3338      	adds	r3, #56	; 0x38
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	333c      	adds	r3, #60	; 0x3c
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	3340      	adds	r3, #64	; 0x40
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	3301      	adds	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3ad      	bcc.n	80027e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e044      	b.n	8002914 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	f203 1369 	addw	r3, r3, #361	; 0x169
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3b5      	bcc.n	800288a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	687e      	ldr	r6, [r7, #4]
 8002926:	466d      	mov	r5, sp
 8002928:	f106 0410 	add.w	r4, r6, #16
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	1d33      	adds	r3, r6, #4
 8002936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002938:	6838      	ldr	r0, [r7, #0]
 800293a:	f001 ff47 	bl	80047cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800295e:	af00      	add	r7, sp, #0
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f000 bef4 	b.w	800375a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 816a 	beq.w	8002c56 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002982:	4bb3      	ldr	r3, [pc, #716]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b04      	cmp	r3, #4
 800298c:	d00c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298e:	4bb0      	ldr	r3, [pc, #704]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d159      	bne.n	8002a4e <HAL_RCC_OscConfig+0xf6>
 800299a:	4bad      	ldr	r3, [pc, #692]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a6:	d152      	bne.n	8002a4e <HAL_RCC_OscConfig+0xf6>
 80029a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0x82>
 80029d4:	4b9e      	ldr	r3, [pc, #632]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0xae>
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a02:	4b93      	ldr	r3, [pc, #588]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a0a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a0e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a12:	fa92 f2a2 	rbit	r2, r2
 8002a16:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f042 0220 	orr.w	r2, r2, #32
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 810c 	beq.w	8002c54 <HAL_RCC_OscConfig+0x2fc>
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 8106 	bne.w	8002c54 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f000 be86 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x110>
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e030      	b.n	8002aca <HAL_RCC_OscConfig+0x172>
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x134>
 8002a72:	4a77      	ldr	r2, [pc, #476]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a74:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4a74      	ldr	r2, [pc, #464]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a80:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e01e      	b.n	8002aca <HAL_RCC_OscConfig+0x172>
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x15a>
 8002a98:	4a6d      	ldr	r2, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a9a:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4a6a      	ldr	r2, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0x172>
 8002ab2:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4a64      	ldr	r2, [pc, #400]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aca:	4961      	ldr	r1, [pc, #388]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002acc:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f023 020f 	bic.w	r2, r3, #15
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d059      	beq.n	8002b9c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe f98c 	bl	8000e04 <HAL_GetTick>
 8002aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af2:	f7fe f987 	bl	8000e04 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d902      	bls.n	8002b08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f000 be29 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
 8002b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1e2>
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x20e>
 8002b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b56:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b72:	fa92 f2a2 	rbit	r2, r2
 8002b76:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b7a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b7e:	fab2 f282 	clz	r2, r2
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	f002 021f 	and.w	r2, r2, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ab      	beq.n	8002af2 <HAL_RCC_OscConfig+0x19a>
 8002b9a:	e05c      	b.n	8002c56 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f932 	bl	8000e04 <HAL_GetTick>
 8002ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba6:	f7fe f92d 	bl	8000e04 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d902      	bls.n	8002bbc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	f000 bdcf 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bd0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_OscConfig+0x296>
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x2c2>
 8002bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c0a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c2e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c32:	fab2 f282 	clz	r2, r2
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f002 021f 	and.w	r2, r2, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f202 	lsl.w	r2, r1, r2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ab      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x24e>
 8002c4e:	e002      	b.n	8002c56 <HAL_RCC_OscConfig+0x2fe>
 8002c50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 816f 	beq.w	8002f44 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c66:	4bd0      	ldr	r3, [pc, #832]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c72:	4bcd      	ldr	r3, [pc, #820]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d16c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x400>
 8002c7e:	4bca      	ldr	r3, [pc, #808]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d166      	bne.n	8002d58 <HAL_RCC_OscConfig+0x400>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c9c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0x362>
 8002cb4:	4bbc      	ldr	r3, [pc, #752]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e013      	b.n	8002ce2 <HAL_RCC_OscConfig+0x38a>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cde:	4bb2      	ldr	r3, [pc, #712]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ce8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cf4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f002 021f 	and.w	r2, r2, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f000 bd1b 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	48a0      	ldr	r0, [pc, #640]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002d26:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	21f8      	movs	r1, #248	; 0xf8
 8002d36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d3e:	fa91 f1a1 	rbit	r1, r1
 8002d42:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d46:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d4a:	fab1 f181 	clz	r1, r1
 8002d4e:	b2c9      	uxtb	r1, r1
 8002d50:	408b      	lsls	r3, r1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e0f5      	b.n	8002f44 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8085 	beq.w	8002e6e <HAL_RCC_OscConfig+0x516>
 8002d64:	2301      	movs	r3, #1
 8002d66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe f838 	bl	8000e04 <HAL_GetTick>
 8002d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9a:	f7fe f833 	bl	8000e04 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d902      	bls.n	8002db0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f000 bcd5 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x488>
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e013      	b.n	8002e08 <HAL_RCC_OscConfig+0x4b0>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002df2:	2302      	movs	r3, #2
 8002df4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002df8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e1a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0af      	beq.n	8002d9a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	485b      	ldr	r0, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	21f8      	movs	r1, #248	; 0xf8
 8002e4c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e54:	fa91 f1a1 	rbit	r1, r1
 8002e58:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e5c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e60:	fab1 f181 	clz	r1, r1
 8002e64:	b2c9      	uxtb	r1, r1
 8002e66:	408b      	lsls	r3, r1
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	6003      	str	r3, [r0, #0]
 8002e6c:	e06a      	b.n	8002f44 <HAL_RCC_OscConfig+0x5ec>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fd ffb3 	bl	8000e04 <HAL_GetTick>
 8002e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7fd ffae 	bl	8000e04 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d902      	bls.n	8002eba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f000 bc50 	b.w	800375a <HAL_RCC_OscConfig+0xe02>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <HAL_RCC_OscConfig+0x592>
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	e013      	b.n	8002f12 <HAL_RCC_OscConfig+0x5ba>
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002efc:	2302      	movs	r3, #2
 8002efe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x650>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2202      	movs	r2, #2
 8002f14:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f1c:	fa92 f2a2 	rbit	r2, r2
 8002f20:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f042 0220 	orr.w	r2, r2, #32
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f002 021f 	and.w	r2, r2, #31
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1af      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80da 	beq.w	8003108 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d069      	beq.n	8003032 <HAL_RCC_OscConfig+0x6da>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x654>)
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f88:	f7fd ff3c 	bl	8000e04 <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f90:	e00e      	b.n	8002fb0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fd ff37 	bl	8000e04 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d906      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e3d9      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	10908120 	.word	0x10908120
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ff0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4ba5      	ldr	r3, [pc, #660]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8002ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ffa:	2102      	movs	r1, #2
 8002ffc:	6019      	str	r1, [r3, #0]
 8002ffe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	fa93 f1a3 	rbit	r1, r3
 8003008:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800300c:	6019      	str	r1, [r3, #0]
  return result;
 800300e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0b0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x63a>
 8003030:	e06a      	b.n	8003108 <HAL_RCC_OscConfig+0x7b0>
 8003032:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800304e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	4b8c      	ldr	r3, [pc, #560]	; (800328c <HAL_RCC_OscConfig+0x934>)
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fd fece 	bl	8000e04 <HAL_GetTick>
 8003068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e009      	b.n	8003082 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fd fec9 	bl	8000e04 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e36b      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 8003082:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fa93 f2a3 	rbit	r2, r3
 8003094:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800309e:	2202      	movs	r2, #2
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fa93 f2a3 	rbit	r2, r3
 80030ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030b6:	2202      	movs	r2, #2
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ca:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80030cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030d2:	2102      	movs	r1, #2
 80030d4:	6019      	str	r1, [r3, #0]
 80030d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f1a3 	rbit	r1, r3
 80030e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030e4:	6019      	str	r1, [r3, #0]
  return result;
 80030e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1b2      	bne.n	800306e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8158 	beq.w	80033c8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4a57      	ldr	r2, [pc, #348]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f107 0308 	add.w	r3, r7, #8
 8003148:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_OscConfig+0x938>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11a      	bne.n	8003192 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315c:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x938>)
 800315e:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x938>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fd fe4c 	bl	8000e04 <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	e009      	b.n	8003186 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7fd fe47 	bl	8000e04 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e2e9      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b42      	ldr	r3, [pc, #264]	; (8003290 <HAL_RCC_OscConfig+0x938>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ef      	beq.n	8003172 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x852>
 800319c:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 800319e:	4b3a      	ldr	r3, [pc, #232]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	e02f      	b.n	800320a <HAL_RCC_OscConfig+0x8b2>
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x876>
 80031b4:	4a34      	ldr	r2, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e01d      	b.n	800320a <HAL_RCC_OscConfig+0x8b2>
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x89a>
 80031d8:	4a2b      	ldr	r2, [pc, #172]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	4a28      	ldr	r2, [pc, #160]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x8b2>
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031f4:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d06b      	beq.n	80032ec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fd fdf6 	bl	8000e04 <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	e00b      	b.n	8003236 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fd fdf1 	bl	8000e04 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e291      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 8003236:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	fa93 f2a3 	rbit	r2, r3
 8003260:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003264:	601a      	str	r2, [r3, #0]
  return result;
 8003266:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800326a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d109      	bne.n	8003294 <HAL_RCC_OscConfig+0x93c>
 8003280:	4b01      	ldr	r3, [pc, #4]	; (8003288 <HAL_RCC_OscConfig+0x930>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	e014      	b.n	80032b0 <HAL_RCC_OscConfig+0x958>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	10908120 	.word	0x10908120
 8003290:	40007000 	.word	0x40007000
 8003294:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003298:	2202      	movs	r2, #2
 800329a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4bbb      	ldr	r3, [pc, #748]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032b4:	2102      	movs	r1, #2
 80032b6:	6011      	str	r1, [r2, #0]
 80032b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	fa92 f1a2 	rbit	r1, r2
 80032c2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032c6:	6011      	str	r1, [r2, #0]
  return result;
 80032c8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	fab2 f282 	clz	r2, r2
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	f002 021f 	and.w	r2, r2, #31
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f202 	lsl.w	r2, r1, r2
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d099      	beq.n	800321e <HAL_RCC_OscConfig+0x8c6>
 80032ea:	e063      	b.n	80033b4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fd fd8a 	bl	8000e04 <HAL_GetTick>
 80032f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fd fd85 	bl	8000e04 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e225      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 800330e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003312:	2202      	movs	r2, #2
 8003314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f2a3 	rbit	r2, r3
 8003320:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800332a:	2202      	movs	r2, #2
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003342:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d102      	bne.n	800335e <HAL_RCC_OscConfig+0xa06>
 8003358:	4b90      	ldr	r3, [pc, #576]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	e00d      	b.n	800337a <HAL_RCC_OscConfig+0xa22>
 800335e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800337e:	2102      	movs	r1, #2
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	fa92 f1a2 	rbit	r1, r2
 800338c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003390:	6011      	str	r1, [r2, #0]
  return result;
 8003392:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1a0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 81c2 	beq.w	8003758 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d4:	4b71      	ldr	r3, [pc, #452]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f000 819c 	beq.w	800371a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	f040 8114 	bne.w	8003616 <HAL_RCC_OscConfig+0xcbe>
 80033ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003406:	601a      	str	r2, [r3, #0]
  return result;
 8003408:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800340c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fcee 	bl	8000e04 <HAL_GetTick>
 8003428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fce9 	bl	8000e04 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e18b      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 8003442:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800345a:	601a      	str	r2, [r3, #0]
  return result;
 800345c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003460:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0xb24>
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0xb5c>
 800347c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003480:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800349a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fa92 f1a2 	rbit	r1, r2
 80034c8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034cc:	6011      	str	r1, [r2, #0]
  return result;
 80034ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d19e      	bne.n	800342e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f0:	482a      	ldr	r0, [pc, #168]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80034f2:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	430b      	orrs	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	6043      	str	r3, [r0, #4]
 800350c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003524:	601a      	str	r2, [r3, #0]
  return result;
 8003526:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800352a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003536:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	461a      	mov	r2, r3
 800353e:	2301      	movs	r3, #1
 8003540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fd fc5f 	bl	8000e04 <HAL_GetTick>
 8003546:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800354a:	e009      	b.n	8003560 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fd fc5a 	bl	8000e04 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0fc      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 8003560:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003578:	601a      	str	r2, [r3, #0]
  return result;
 800357a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800357e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0xc48>
 8003594:	4b01      	ldr	r3, [pc, #4]	; (800359c <HAL_RCC_OscConfig+0xc44>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	e01e      	b.n	80035d8 <HAL_RCC_OscConfig+0xc80>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_OscConfig+0xe0c>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fa92 f1a2 	rbit	r1, r2
 80035ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035f0:	6011      	str	r1, [r2, #0]
  return result;
 80035f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	fab2 f282 	clz	r2, r2
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	f042 0220 	orr.w	r2, r2, #32
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	f002 021f 	and.w	r2, r2, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f202 	lsl.w	r2, r1, r2
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d09b      	beq.n	800354c <HAL_RCC_OscConfig+0xbf4>
 8003614:	e0a0      	b.n	8003758 <HAL_RCC_OscConfig+0xe00>
 8003616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800361a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362e:	601a      	str	r2, [r3, #0]
  return result;
 8003630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003634:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003640:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	461a      	mov	r2, r3
 8003648:	2300      	movs	r3, #0
 800364a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fd fbda 	bl	8000e04 <HAL_GetTick>
 8003650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003654:	e009      	b.n	800366a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003656:	f7fd fbd5 	bl	8000e04 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e077      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
 800366a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800366e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f2a3 	rbit	r2, r3
 800367e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003682:	601a      	str	r2, [r3, #0]
  return result;
 8003684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003688:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_OscConfig+0xd4c>
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0xe0c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e01b      	b.n	80036dc <HAL_RCC_OscConfig+0xd84>
 80036a4:	f107 0320 	add.w	r3, r7, #32
 80036a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	fa93 f2a3 	rbit	r2, r3
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f107 0318 	add.w	r3, r7, #24
 80036c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f107 0318 	add.w	r3, r7, #24
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0xe0c>)
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f107 0210 	add.w	r2, r7, #16
 80036e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	f107 0210 	add.w	r2, r7, #16
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	fa92 f1a2 	rbit	r1, r2
 80036f0:	f107 020c 	add.w	r2, r7, #12
 80036f4:	6011      	str	r1, [r2, #0]
  return result;
 80036f6:	f107 020c 	add.w	r2, r7, #12
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d19e      	bne.n	8003656 <HAL_RCC_OscConfig+0xcfe>
 8003718:	e01e      	b.n	8003758 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371a:	1d3b      	adds	r3, r7, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0xe0c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003730:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	429a      	cmp	r2, r3
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003742:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b09e      	sub	sp, #120	; 0x78
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e162      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b90      	ldr	r3, [pc, #576]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d210      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	498d      	ldr	r1, [pc, #564]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 8003790:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 0207 	bic.w	r2, r3, #7
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b89      	ldr	r3, [pc, #548]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0207 	and.w	r2, r3, #7
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e14a      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4982      	ldr	r1, [pc, #520]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 80037be:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80dc 	beq.w	8003994 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d13c      	bne.n	800385e <HAL_RCC_ClockConfig+0xf6>
 80037e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <HAL_RCC_ClockConfig+0xa6>
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e00f      	b.n	800382e <HAL_RCC_ClockConfig+0xc6>
 800380e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	667b      	str	r3, [r7, #100]	; 0x64
 800381c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
 8003822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800382a:	4b67      	ldr	r3, [pc, #412]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003832:	65ba      	str	r2, [r7, #88]	; 0x58
 8003834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003836:	fa92 f2a2 	rbit	r2, r2
 800383a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800383c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d17b      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0f3      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d13c      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x178>
 8003866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_RCC_ClockConfig+0x128>
 800388a:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	e00f      	b.n	80038b0 <HAL_RCC_ClockConfig+0x148>
 8003890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	647b      	str	r3, [r7, #68]	; 0x44
 800389e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80038b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f042 0220 	orr.w	r2, r2, #32
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f002 021f 	and.w	r2, r2, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d13a      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b2      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
 80038e0:	2302      	movs	r3, #2
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_RCC_ClockConfig+0x1a0>
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e00d      	b.n	8003924 <HAL_RCC_ClockConfig+0x1bc>
 8003908:	2302      	movs	r3, #2
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
 8003914:	2302      	movs	r3, #2
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2202      	movs	r2, #2
 8003926:	61ba      	str	r2, [r7, #24]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	fa92 f2a2 	rbit	r2, r2
 800392e:	617a      	str	r2, [r7, #20]
  return result;
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f042 0220 	orr.w	r2, r2, #32
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f002 021f 	and.w	r2, r2, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e079      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	491d      	ldr	r1, [pc, #116]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003954:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 0203 	bic.w	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7fd fa4e 	bl	8000e04 <HAL_GetTick>
 8003968:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fd fa4a 	bl	8000e04 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e061      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_RCC_ClockConfig+0x260>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0207 	and.w	r2, r3, #7
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d914      	bls.n	80039cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_RCC_ClockConfig+0x25c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e040      	b.n	8003a46 <HAL_RCC_ClockConfig+0x2de>
 80039c4:	40022000 	.word	0x40022000
 80039c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	491d      	ldr	r1, [pc, #116]	; (8003a50 <HAL_RCC_ClockConfig+0x2e8>)
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCC_ClockConfig+0x2e8>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4916      	ldr	r1, [pc, #88]	; (8003a50 <HAL_RCC_ClockConfig+0x2e8>)
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a0a:	f000 f829 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <HAL_RCC_ClockConfig+0x2e8>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a18:	22f0      	movs	r2, #240	; 0xf0
 8003a1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	fa92 f2a2 	rbit	r2, r2
 8003a22:	60fa      	str	r2, [r7, #12]
  return result;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	fab2 f282 	clz	r2, r2
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	40d3      	lsrs	r3, r2
 8003a2e:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x2ec>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	fa21 f303 	lsr.w	r3, r1, r3
 8003a36:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_RCC_ClockConfig+0x2f0>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_ClockConfig+0x2f4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd f99c 	bl	8000d7c <HAL_InitTick>
  
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3778      	adds	r7, #120	; 0x78
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	080048d4 	.word	0x080048d4
 8003a58:	20000010 	.word	0x20000010
 8003a5c:	20000014 	.word	0x20000014

08003a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b08b      	sub	sp, #44	; 0x2c
 8003a64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a7a:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x30>
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x36>
 8003a8e:	e03c      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a92:	623b      	str	r3, [r7, #32]
      break;
 8003a94:	e03c      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003aa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	fa92 f2a2 	rbit	r2, r2
 8003aa8:	607a      	str	r2, [r7, #4]
  return result;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	fab2 f282 	clz	r2, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	40d3      	lsrs	r3, r2
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	fa92 f2a2 	rbit	r2, r2
 8003acc:	60fa      	str	r2, [r7, #12]
  return result;
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	40d3      	lsrs	r3, r2
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
 8003af8:	e004      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	623b      	str	r3, [r7, #32]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b0c:	623b      	str	r3, [r7, #32]
      break;
 8003b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b10:	6a3b      	ldr	r3, [r7, #32]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	372c      	adds	r7, #44	; 0x2c
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	007a1200 	.word	0x007a1200
 8003b28:	080048ec 	.word	0x080048ec
 8003b2c:	080048fc 	.word	0x080048fc
 8003b30:	003d0900 	.word	0x003d0900

08003b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000010 	.word	0x20000010

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b52:	f7ff ffef 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b56:	4601      	mov	r1, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	fa92 f2a2 	rbit	r2, r2
 8003b6c:	603a      	str	r2, [r7, #0]
  return result;
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	fab2 f282 	clz	r2, r2
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	40d3      	lsrs	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	080048e4 	.word	0x080048e4

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b96:	f7ff ffcd 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ba4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ba8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	fa92 f2a2 	rbit	r2, r2
 8003bb0:	603a      	str	r2, [r7, #0]
  return result;
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	40d3      	lsrs	r3, r2
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	080048e4 	.word	0x080048e4

08003bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b092      	sub	sp, #72	; 0x48
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80d4 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf8:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	4b4b      	ldr	r3, [pc, #300]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
 8003c10:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b45      	ldr	r3, [pc, #276]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4a42      	ldr	r2, [pc, #264]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c30:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd f8e3 	bl	8000e04 <HAL_GetTick>
 8003c3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fd f8df 	bl	8000e04 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e169      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8084 	beq.w	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d07c      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2301      	movs	r3, #1
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cd2:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04b      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd f88f 	bl	8000e04 <HAL_GetTick>
 8003ce6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fd f88b 	bl	8000e04 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e113      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	61fb      	str	r3, [r7, #28]
  return result;
 8003d18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d2e:	4b01      	ldr	r3, [pc, #4]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	e00d      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	10908100 	.word	0x10908100
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	2202      	movs	r2, #2
 8003d52:	613a      	str	r2, [r7, #16]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	fa92 f2a2 	rbit	r2, r2
 8003d5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0b7      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d7a:	496d      	ldr	r1, [pc, #436]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4a66      	ldr	r2, [pc, #408]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d96:	4b66      	ldr	r3, [pc, #408]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dac:	4960      	ldr	r1, [pc, #384]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dca:	4959      	ldr	r1, [pc, #356]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dcc:	4b58      	ldr	r3, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de8:	4951      	ldr	r1, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dea:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	494a      	ldr	r1, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e24:	4942      	ldr	r1, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e42:	493b      	ldr	r1, [pc, #236]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f023 0220 	bic.w	r2, r3, #32
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e60:	4933      	ldr	r1, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7e:	492c      	ldr	r1, [pc, #176]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e9c:	4924      	ldr	r1, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eba:	491d      	ldr	r1, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ed8:	4915      	ldr	r1, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ef6:	490e      	ldr	r1, [pc, #56]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f14:	4906      	ldr	r1, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	4313      	orrs	r3, r2
 8003f24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3748      	adds	r7, #72	; 0x48
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09b      	b.n	800407e <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d009      	beq.n	8003f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	e005      	b.n	8003f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc fddc 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fac:	d902      	bls.n	8003fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e002      	b.n	8003fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_Init+0xa0>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6852      	ldr	r2, [r2, #4]
 8003fdc:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6892      	ldr	r2, [r2, #8]
 8003fe4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6912      	ldr	r2, [r2, #16]
 8003fee:	f002 0202 	and.w	r2, r2, #2
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6952      	ldr	r2, [r2, #20]
 8003ff8:	f002 0201 	and.w	r2, r2, #1
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6992      	ldr	r2, [r2, #24]
 8004002:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004006:	4311      	orrs	r1, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	69d2      	ldr	r2, [r2, #28]
 800400c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6a12      	ldr	r2, [r2, #32]
 8004016:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004020:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6992      	ldr	r2, [r2, #24]
 8004030:	0c12      	lsrs	r2, r2, #16
 8004032:	f002 0104 	and.w	r1, r2, #4
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800403a:	f002 0210 	and.w	r2, r2, #16
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004044:	f002 0208 	and.w	r2, r2, #8
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68d2      	ldr	r2, [r2, #12]
 800404e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004052:	4311      	orrs	r1, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	69d2      	ldr	r2, [r2, #28]
 8004068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e040      	b.n	800411a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fc fd8d 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2224      	movs	r2, #36	; 0x24
 80040b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f82d 	bl	8004124 <UART_SetConfig>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e022      	b.n	800411a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9f3 	bl	80044c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	6852      	ldr	r2, [r2, #4]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004100:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa7a 	bl	800460c <UART_CheckIdleState>
 8004118:	4603      	mov	r3, r0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004156:	f023 030c 	bic.w	r3, r3, #12
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	430b      	orrs	r3, r1
 800415e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	6852      	ldr	r2, [r2, #4]
 800416a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	6892      	ldr	r2, [r2, #8]
 8004190:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4aad      	ldr	r2, [pc, #692]	; (8004454 <UART_SetConfig+0x330>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d121      	bne.n	80041e8 <UART_SetConfig+0xc4>
 80041a4:	4bac      	ldr	r3, [pc, #688]	; (8004458 <UART_SetConfig+0x334>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d817      	bhi.n	80041e0 <UART_SetConfig+0xbc>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0x94>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041db 	.word	0x080041db
 80041c4:	080041cf 	.word	0x080041cf
 80041c8:	2301      	movs	r3, #1
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0b2      	b.n	8004334 <UART_SetConfig+0x210>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0af      	b.n	8004334 <UART_SetConfig+0x210>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0ac      	b.n	8004334 <UART_SetConfig+0x210>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e0a9      	b.n	8004334 <UART_SetConfig+0x210>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	bf00      	nop
 80041e6:	e0a5      	b.n	8004334 <UART_SetConfig+0x210>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a9b      	ldr	r2, [pc, #620]	; (800445c <UART_SetConfig+0x338>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d123      	bne.n	800423a <UART_SetConfig+0x116>
 80041f2:	4b99      	ldr	r3, [pc, #612]	; (8004458 <UART_SetConfig+0x334>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d012      	beq.n	8004226 <UART_SetConfig+0x102>
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d802      	bhi.n	800420c <UART_SetConfig+0xe8>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <UART_SetConfig+0xf6>
 800420a:	e012      	b.n	8004232 <UART_SetConfig+0x10e>
 800420c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004210:	d00c      	beq.n	800422c <UART_SetConfig+0x108>
 8004212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004216:	d003      	beq.n	8004220 <UART_SetConfig+0xfc>
 8004218:	e00b      	b.n	8004232 <UART_SetConfig+0x10e>
 800421a:	2300      	movs	r3, #0
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e089      	b.n	8004334 <UART_SetConfig+0x210>
 8004220:	2302      	movs	r3, #2
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e086      	b.n	8004334 <UART_SetConfig+0x210>
 8004226:	2304      	movs	r3, #4
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e083      	b.n	8004334 <UART_SetConfig+0x210>
 800422c:	2308      	movs	r3, #8
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e080      	b.n	8004334 <UART_SetConfig+0x210>
 8004232:	2310      	movs	r3, #16
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	bf00      	nop
 8004238:	e07c      	b.n	8004334 <UART_SetConfig+0x210>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a88      	ldr	r2, [pc, #544]	; (8004460 <UART_SetConfig+0x33c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d123      	bne.n	800428c <UART_SetConfig+0x168>
 8004244:	4b84      	ldr	r3, [pc, #528]	; (8004458 <UART_SetConfig+0x334>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800424c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004250:	d012      	beq.n	8004278 <UART_SetConfig+0x154>
 8004252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004256:	d802      	bhi.n	800425e <UART_SetConfig+0x13a>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <UART_SetConfig+0x148>
 800425c:	e012      	b.n	8004284 <UART_SetConfig+0x160>
 800425e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004262:	d00c      	beq.n	800427e <UART_SetConfig+0x15a>
 8004264:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004268:	d003      	beq.n	8004272 <UART_SetConfig+0x14e>
 800426a:	e00b      	b.n	8004284 <UART_SetConfig+0x160>
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e060      	b.n	8004334 <UART_SetConfig+0x210>
 8004272:	2302      	movs	r3, #2
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e05d      	b.n	8004334 <UART_SetConfig+0x210>
 8004278:	2304      	movs	r3, #4
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e05a      	b.n	8004334 <UART_SetConfig+0x210>
 800427e:	2308      	movs	r3, #8
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e057      	b.n	8004334 <UART_SetConfig+0x210>
 8004284:	2310      	movs	r3, #16
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	bf00      	nop
 800428a:	e053      	b.n	8004334 <UART_SetConfig+0x210>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a74      	ldr	r2, [pc, #464]	; (8004464 <UART_SetConfig+0x340>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d123      	bne.n	80042de <UART_SetConfig+0x1ba>
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <UART_SetConfig+0x334>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a2:	d012      	beq.n	80042ca <UART_SetConfig+0x1a6>
 80042a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a8:	d802      	bhi.n	80042b0 <UART_SetConfig+0x18c>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <UART_SetConfig+0x19a>
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0x1b2>
 80042b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b4:	d00c      	beq.n	80042d0 <UART_SetConfig+0x1ac>
 80042b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x1a0>
 80042bc:	e00b      	b.n	80042d6 <UART_SetConfig+0x1b2>
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e037      	b.n	8004334 <UART_SetConfig+0x210>
 80042c4:	2302      	movs	r3, #2
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e034      	b.n	8004334 <UART_SetConfig+0x210>
 80042ca:	2304      	movs	r3, #4
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e031      	b.n	8004334 <UART_SetConfig+0x210>
 80042d0:	2308      	movs	r3, #8
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e02e      	b.n	8004334 <UART_SetConfig+0x210>
 80042d6:	2310      	movs	r3, #16
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	bf00      	nop
 80042dc:	e02a      	b.n	8004334 <UART_SetConfig+0x210>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a61      	ldr	r2, [pc, #388]	; (8004468 <UART_SetConfig+0x344>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d123      	bne.n	8004330 <UART_SetConfig+0x20c>
 80042e8:	4b5b      	ldr	r3, [pc, #364]	; (8004458 <UART_SetConfig+0x334>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f4:	d012      	beq.n	800431c <UART_SetConfig+0x1f8>
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d802      	bhi.n	8004302 <UART_SetConfig+0x1de>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <UART_SetConfig+0x1ec>
 8004300:	e012      	b.n	8004328 <UART_SetConfig+0x204>
 8004302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004306:	d00c      	beq.n	8004322 <UART_SetConfig+0x1fe>
 8004308:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800430c:	d003      	beq.n	8004316 <UART_SetConfig+0x1f2>
 800430e:	e00b      	b.n	8004328 <UART_SetConfig+0x204>
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e00e      	b.n	8004334 <UART_SetConfig+0x210>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e00b      	b.n	8004334 <UART_SetConfig+0x210>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e008      	b.n	8004334 <UART_SetConfig+0x210>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e005      	b.n	8004334 <UART_SetConfig+0x210>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	bf00      	nop
 800432e:	e001      	b.n	8004334 <UART_SetConfig+0x210>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d15d      	bne.n	80043fa <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 800433e:	7ffb      	ldrb	r3, [r7, #31]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d828      	bhi.n	8004396 <UART_SetConfig+0x272>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x228>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004379 	.word	0x08004379
 8004354:	08004381 	.word	0x08004381
 8004358:	08004397 	.word	0x08004397
 800435c:	08004387 	.word	0x08004387
 8004360:	08004397 	.word	0x08004397
 8004364:	08004397 	.word	0x08004397
 8004368:	08004397 	.word	0x08004397
 800436c:	0800438f 	.word	0x0800438f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7ff fbec 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8004374:	61b8      	str	r0, [r7, #24]
        break;
 8004376:	e013      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7ff fc0a 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e00f      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <UART_SetConfig+0x348>)
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e00c      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004386:	f7ff fb6b 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 800438a:	61b8      	str	r0, [r7, #24]
        break;
 800438c:	e008      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	61bb      	str	r3, [r7, #24]
        break;
 8004394:	e004      	b.n	80043a0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	77bb      	strb	r3, [r7, #30]
        break;
 800439e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8085 	beq.w	80044b2 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	b29b      	uxth	r3, r3
 80043be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d916      	bls.n	80043f4 <UART_SetConfig+0x2d0>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d212      	bcs.n	80043f4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	89fa      	ldrh	r2, [r7, #14]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e05e      	b.n	80044b2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77bb      	strb	r3, [r7, #30]
 80043f8:	e05b      	b.n	80044b2 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fa:	7ffb      	ldrb	r3, [r7, #31]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d837      	bhi.n	8004470 <UART_SetConfig+0x34c>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x2e4>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004435 	.word	0x08004435
 8004410:	0800443d 	.word	0x0800443d
 8004414:	08004471 	.word	0x08004471
 8004418:	08004443 	.word	0x08004443
 800441c:	08004471 	.word	0x08004471
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	0800444b 	.word	0x0800444b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7ff fb8e 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8004430:	61b8      	str	r0, [r7, #24]
        break;
 8004432:	e022      	b.n	800447a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7ff fbac 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004438:	61b8      	str	r0, [r7, #24]
        break;
 800443a:	e01e      	b.n	800447a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <UART_SetConfig+0x348>)
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e01b      	b.n	800447a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004442:	f7ff fb0d 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8004446:	61b8      	str	r0, [r7, #24]
        break;
 8004448:	e017      	b.n	800447a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	61bb      	str	r3, [r7, #24]
        break;
 8004450:	e013      	b.n	800447a <UART_SetConfig+0x356>
 8004452:	bf00      	nop
 8004454:	40013800 	.word	0x40013800
 8004458:	40021000 	.word	0x40021000
 800445c:	40004400 	.word	0x40004400
 8004460:	40004800 	.word	0x40004800
 8004464:	40004c00 	.word	0x40004c00
 8004468:	40005000 	.word	0x40005000
 800446c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	77bb      	strb	r3, [r7, #30]
        break;
 8004478:	bf00      	nop
    }

    if (pclk != 0U)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	085a      	lsrs	r2, r3, #1
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d908      	bls.n	80044ae <UART_SetConfig+0x38a>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d204      	bcs.n	80044ae <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e001      	b.n	80044b2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044be:	7fbb      	ldrb	r3, [r7, #30]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	6852      	ldr	r2, [r2, #4]
 80044e6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	6852      	ldr	r2, [r2, #4]
 8004508:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	6852      	ldr	r2, [r2, #4]
 800452a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	6852      	ldr	r2, [r2, #4]
 800454c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004554:	430a      	orrs	r2, r1
 8004556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	6892      	ldr	r2, [r2, #8]
 800456e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004598:	430a      	orrs	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01a      	beq.n	80045de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	6852      	ldr	r2, [r2, #4]
 80045b2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c6:	d10a      	bne.n	80045de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	6852      	ldr	r2, [r2, #4]
 80045d2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af02      	add	r7, sp, #8
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800461c:	f7fc fbf2 	bl	8000e04 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d10e      	bne.n	800464e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f82d 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e023      	b.n	8004696 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d10e      	bne.n	800467a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800465c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f817 	bl	800469e <UART_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e00d      	b.n	8004696 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ae:	e05e      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d05a      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fc fba4 	bl	8000e04 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d802      	bhi.n	80046ce <UART_WaitOnFlagUntilTimeout+0x30>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11b      	bne.n	8004706 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	6892      	ldr	r2, [r2, #8]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e043      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02c      	beq.n	800476e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004722:	d124      	bne.n	800476e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800472c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800473c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e00f      	b.n	800478e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	401a      	ands	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	bf0c      	ite	eq
 800477e:	2301      	moveq	r3, #1
 8004780:	2300      	movne	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	429a      	cmp	r2, r3
 800478a:	d091      	beq.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800479e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 0014 	add.w	r0, r7, #20
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	b004      	add	sp, #16
 800480c:	4770      	bx	lr
	...

08004810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004814:	480d      	ldr	r0, [pc, #52]	; (800484c <LoopForever+0x6>)
  ldr r1, =_edata
 8004816:	490e      	ldr	r1, [pc, #56]	; (8004850 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <LoopForever+0xe>)
  movs r3, #0
 800481a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800481c:	e002      	b.n	8004824 <LoopCopyDataInit>

0800481e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800481e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004822:	3304      	adds	r3, #4

08004824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004828:	d3f9      	bcc.n	800481e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LoopForever+0x12>)
  ldr r4, =_ebss
 800482c:	4c0b      	ldr	r4, [pc, #44]	; (800485c <LoopForever+0x16>)
  movs r3, #0
 800482e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004830:	e001      	b.n	8004836 <LoopFillZerobss>

08004832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004834:	3204      	adds	r2, #4

08004836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004838:	d3fb      	bcc.n	8004832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800483a:	f7fc fa77 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800483e:	f000 f811 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004842:	f7fb fcc1 	bl	80001c8 <main>

08004846 <LoopForever>:

LoopForever:
    b LoopForever
 8004846:	e7fe      	b.n	8004846 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004848:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800484c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004850:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004854:	08004914 	.word	0x08004914
  ldr r2, =_sbss
 8004858:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800485c:	200004b0 	.word	0x200004b0

08004860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC1_2_IRQHandler>
	...

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4e0d      	ldr	r6, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1ba4      	subs	r4, r4, r6
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2500      	movs	r5, #0
 8004870:	42a5      	cmp	r5, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4e0b      	ldr	r6, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f000 f820 	bl	80048bc <_init>
 800487c:	1ba4      	subs	r4, r4, r6
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2500      	movs	r5, #0
 8004882:	42a5      	cmp	r5, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488c:	4798      	blx	r3
 800488e:	3501      	adds	r5, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004896:	4798      	blx	r3
 8004898:	3501      	adds	r5, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	0800490c 	.word	0x0800490c
 80048a0:	0800490c 	.word	0x0800490c
 80048a4:	0800490c 	.word	0x0800490c
 80048a8:	08004910 	.word	0x08004910

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
